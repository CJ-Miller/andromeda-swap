{"version":3,"file":"walletlink-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n  darkMode?: boolean\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n  private readonly darkMode: boolean\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl, darkMode }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: [CHAIN_ID] })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n    this.darkMode = darkMode || false\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletLink) {\n      const WalletLink = await import('walletlink').then(m => m?.default ?? m)\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    const account = await this.provider.send('eth_requestAccounts').then((accounts: string[]): string => accounts[0])\n\n    this.provider.on('chainChanged', this.handleChainChanged)\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.provider, chainId: CHAIN_ID, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return CHAIN_ID\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged)\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n\n  public async close() {\n    this.provider.close()\n    this.emitDeactivate()\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n}\n"],"names":["url","appName","appLogoUrl","darkMode","supportedChainIds","activate","this","_this3","provider","send","then","accounts","account","on","handleChainChanged","handleAccountsChanged","chainId","walletLink","m","WalletLink","makeWeb3Provider","getProvider","getChainId","getAccount","deactivate","removeListener","close","emitDeactivate","emitUpdate","AbstractConnector"],"mappings":"4aAqBgBA,IAAAA,IAAKC,IAAAA,QAASC,IAAAA,WAAYC,IAAAA,8BAChC,CAAEC,kBAAmB,CAnBd,YAqBRJ,IAAMA,IACNC,QAAUA,IACVC,WAAaA,IACbC,SAAWA,IAAY,+GAGjBE,8BACNC,yCAUiBC,EAAKC,SAASC,KAAK,uBAAuBC,MAAK,SAACC,UAA+BA,EAAS,sBAAxGC,YAEDJ,SAASK,GAAG,eAAgBN,EAAKO,sBACjCN,SAASK,GAAG,kBAAmBN,EAAKQ,uBAElC,CAAEP,SAAUD,EAAKC,SAAUQ,QA3CrB,EA2CwCJ,QAASA,wBAfzDL,EAAKU,kCACiB,8QAAO,mBAAcP,MAAK,SAAAQ,+BAAKA,SAAAA,aAAcA,qBAAhEC,KACDF,WAAa,IAAIE,KACpBlB,QAASM,EAAKN,QACdE,SAAUI,EAAKJ,UACXI,EAAKL,WAAa,CAAEA,WAAYK,EAAKL,YAAe,OAErDM,SAAWD,EAAKU,WAAWG,iBAAiBb,EAAKP,IAnC3C,+FA8CFqB,kDACJf,KAAKE,gDAGDc,6CAlDE,MAsDFC,iDACJjB,KAAKE,SAASC,KAAK,gBAAgBC,MAAK,SAACC,UAA+BA,EAAS,6CAGnFa,WAAA,gBACAhB,SAASiB,eAAe,eAAgBnB,KAAKQ,yBAC7CN,SAASiB,eAAe,kBAAmBnB,KAAKS,0BAG1CW,4BACXpB,KAAKE,SAASkB,QAAdpB,KACKqB,yEAGCb,mBAAA,SAAmBE,QAIpBY,WAAW,CAAEZ,QAAAA,OAGZD,sBAAA,SAAsBJ,QAIvBiB,WAAW,CAAEhB,QAASD,EAAS,SAtECkB"}