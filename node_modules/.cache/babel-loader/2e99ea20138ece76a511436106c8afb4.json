{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { ChainId, Token } from '@pancakeswap-libs/sdk';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\n/**\n * Token instances created from token info.\n */\nexport class WrappedTokenInfo extends Token {\n  constructor(tokenInfo, tags) {\n    super(tokenInfo.chainId, tokenInfo.address, tokenInfo.decimals, tokenInfo.symbol, tokenInfo.name);\n    this.tokenInfo = void 0;\n    this.tags = void 0;\n    this.tokenInfo = tokenInfo;\n    this.tags = tags;\n  }\n\n  get logoURI() {\n    return this.tokenInfo.logoURI;\n  }\n\n}\n\n/**\n * An empty result, useful as a default.\n */\nconst EMPTY_LIST = {\n  [ChainId.MAINNET]: {},\n  [ChainId.BSCTESTNET]: {}\n};\nconst listCache = typeof WeakMap !== 'undefined' ? new WeakMap() : null;\nexport function listToTokenMap(list) {\n  const result = listCache === null || listCache === void 0 ? void 0 : listCache.get(list);\n  if (result) return result;\n  const map = list.tokens.reduce((tokenMap, tokenInfo) => {\n    var _tokenInfo$tags$map$f, _tokenInfo$tags, _tokenInfo$tags$map;\n\n    const tags = (_tokenInfo$tags$map$f = (_tokenInfo$tags = tokenInfo.tags) === null || _tokenInfo$tags === void 0 ? void 0 : (_tokenInfo$tags$map = _tokenInfo$tags.map(tagId => {\n      var _list$tags;\n\n      if (!((_list$tags = list.tags) === null || _list$tags === void 0 ? void 0 : _list$tags[tagId])) return undefined;\n      return { ...list.tags[tagId],\n        id: tagId\n      };\n    })) === null || _tokenInfo$tags$map === void 0 ? void 0 : _tokenInfo$tags$map.filter(x => Boolean(x))) !== null && _tokenInfo$tags$map$f !== void 0 ? _tokenInfo$tags$map$f : [];\n    const token = new WrappedTokenInfo(tokenInfo, tags);\n    if (tokenMap[token.chainId][token.address] !== undefined) throw Error('Duplicate tokens.');\n    return { ...tokenMap,\n      [token.chainId]: { ...tokenMap[token.chainId],\n        [token.address]: token\n      }\n    };\n  }, { ...EMPTY_LIST\n  });\n  listCache === null || listCache === void 0 ? void 0 : listCache.set(list, map);\n  return map;\n}\nexport function useTokenList(url) {\n  _s();\n\n  const lists = useSelector(state => state.lists.byUrl);\n  return useMemo(() => {\n    var _lists$url;\n\n    if (!url) return EMPTY_LIST;\n    const current = (_lists$url = lists[url]) === null || _lists$url === void 0 ? void 0 : _lists$url.current;\n    if (!current) return EMPTY_LIST;\n\n    try {\n      return listToTokenMap(current);\n    } catch (error) {\n      console.error('Could not show token list due to error', error);\n      return EMPTY_LIST;\n    }\n  }, [lists, url]);\n}\n\n_s(useTokenList, \"CPtzWPSAgVUGbNKI1Wkc4nuPc3o=\", false, function () {\n  return [useSelector];\n});\n\nexport function useSelectedListUrl() {\n  _s2();\n\n  return useSelector(state => state.lists.selectedListUrl);\n}\n\n_s2(useSelectedListUrl, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useSelectedTokenList() {\n  _s3();\n\n  return useTokenList(useSelectedListUrl());\n}\n\n_s3(useSelectedTokenList, \"kBaMVumAUsvKwqzs7wdnX29TRuM=\", false, function () {\n  return [useTokenList, useSelectedListUrl];\n});\n\nexport function useSelectedListInfo() {\n  _s4();\n\n  var _list$current, _list$pendingUpdate;\n\n  const selectedUrl = useSelectedListUrl();\n  const listsByUrl = useSelector(state => state.lists.byUrl);\n  const list = selectedUrl ? listsByUrl[selectedUrl] : undefined;\n  return {\n    current: (_list$current = list === null || list === void 0 ? void 0 : list.current) !== null && _list$current !== void 0 ? _list$current : null,\n    pending: (_list$pendingUpdate = list === null || list === void 0 ? void 0 : list.pendingUpdate) !== null && _list$pendingUpdate !== void 0 ? _list$pendingUpdate : null,\n    loading: (list === null || list === void 0 ? void 0 : list.loadingRequestId) !== null\n  };\n} // returns all downloaded current lists\n\n_s4(useSelectedListInfo, \"eEXQWQZuHgHfEhZccryGmtXRQJM=\", false, function () {\n  return [useSelectedListUrl, useSelector];\n});\n\nexport function useAllLists() {\n  _s5();\n\n  const lists = useSelector(state => state.lists.byUrl);\n  return useMemo(() => Object.keys(lists).map(url => lists[url].current).filter(l => Boolean(l)), [lists]);\n}\n\n_s5(useAllLists, \"CPtzWPSAgVUGbNKI1Wkc4nuPc3o=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/src/state/lists/hooks.ts"],"names":["ChainId","Token","useMemo","useSelector","WrappedTokenInfo","constructor","tokenInfo","tags","chainId","address","decimals","symbol","name","logoURI","EMPTY_LIST","MAINNET","BSCTESTNET","listCache","WeakMap","listToTokenMap","list","result","get","map","tokens","reduce","tokenMap","tagId","undefined","id","filter","x","Boolean","token","Error","set","useTokenList","url","lists","state","byUrl","current","error","console","useSelectedListUrl","selectedListUrl","useSelectedTokenList","useSelectedListInfo","selectedUrl","listsByUrl","pending","pendingUpdate","loading","loadingRequestId","useAllLists","Object","keys","l"],"mappings":"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","sourcesContent":["import { ChainId, Token } from '@pancakeswap-libs/sdk'\nimport { Tags, TokenInfo, TokenList } from '@uniswap/token-lists'\nimport { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppState } from '../index'\n\ntype TagDetails = Tags[keyof Tags]\nexport interface TagInfo extends TagDetails {\n  id: string\n}\n\n/**\n * Token instances created from token info.\n */\nexport class WrappedTokenInfo extends Token {\n  public readonly tokenInfo: TokenInfo\n\n  public readonly tags: TagInfo[]\n\n  constructor(tokenInfo: TokenInfo, tags: TagInfo[]) {\n    super(tokenInfo.chainId, tokenInfo.address, tokenInfo.decimals, tokenInfo.symbol, tokenInfo.name)\n    this.tokenInfo = tokenInfo\n    this.tags = tags\n  }\n\n  public get logoURI(): string | undefined {\n    return this.tokenInfo.logoURI\n  }\n}\n\nexport type TokenAddressMap = Readonly<{ [chainId in ChainId]: Readonly<{ [tokenAddress: string]: WrappedTokenInfo }> }>\n\n/**\n * An empty result, useful as a default.\n */\nconst EMPTY_LIST: TokenAddressMap = {\n  [ChainId.MAINNET]: {},\n  [ChainId.BSCTESTNET]: {}\n}\n\nconst listCache: WeakMap<TokenList, TokenAddressMap> | null =\n  typeof WeakMap !== 'undefined' ? new WeakMap<TokenList, TokenAddressMap>() : null\n\nexport function listToTokenMap(list: TokenList): TokenAddressMap {\n  const result = listCache?.get(list)\n  if (result) return result\n\n  const map = list.tokens.reduce<TokenAddressMap>(\n    (tokenMap, tokenInfo) => {\n      const tags: TagInfo[] =\n        tokenInfo.tags\n          ?.map(tagId => {\n            if (!list.tags?.[tagId]) return undefined\n            return { ...list.tags[tagId], id: tagId }\n          })\n          ?.filter((x): x is TagInfo => Boolean(x)) ?? []\n      const token = new WrappedTokenInfo(tokenInfo, tags)\n      if (tokenMap[token.chainId][token.address] !== undefined) throw Error('Duplicate tokens.')\n      return {\n        ...tokenMap,\n        [token.chainId]: {\n          ...tokenMap[token.chainId],\n          [token.address]: token\n        }\n      }\n    },\n    { ...EMPTY_LIST }\n  )\n  listCache?.set(list, map)\n  return map\n}\n\nexport function useTokenList(url: string | undefined): TokenAddressMap {\n  const lists = useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n  return useMemo(() => {\n    if (!url) return EMPTY_LIST\n    const current = lists[url]?.current\n    if (!current) return EMPTY_LIST\n    try {\n      return listToTokenMap(current)\n    } catch (error) {\n      console.error('Could not show token list due to error', error)\n      return EMPTY_LIST\n    }\n  }, [lists, url])\n}\n\nexport function useSelectedListUrl(): string | undefined {\n  return useSelector<AppState, AppState['lists']['selectedListUrl']>(state => state.lists.selectedListUrl)\n}\n\nexport function useSelectedTokenList(): TokenAddressMap {\n  return useTokenList(useSelectedListUrl())\n}\n\nexport function useSelectedListInfo(): { current: TokenList | null; pending: TokenList | null; loading: boolean } {\n  const selectedUrl = useSelectedListUrl()\n  const listsByUrl = useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n  const list = selectedUrl ? listsByUrl[selectedUrl] : undefined\n  return {\n    current: list?.current ?? null,\n    pending: list?.pendingUpdate ?? null,\n    loading: list?.loadingRequestId !== null\n  }\n}\n\n// returns all downloaded current lists\nexport function useAllLists(): TokenList[] {\n  const lists = useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n\n  return useMemo(\n    () =>\n      Object.keys(lists)\n        .map(url => lists[url].current)\n        .filter((l): l is TokenList => Boolean(l)),\n    [lists]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}