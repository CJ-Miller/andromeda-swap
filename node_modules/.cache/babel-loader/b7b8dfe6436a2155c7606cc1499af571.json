{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletLinkProvider = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst util_1 = require(\"../util\");\n\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\n\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\n\nconst JSONRPC_1 = require(\"./JSONRPC\");\n\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\n\nconst LOCAL_STORAGE_ADDRESSES_KEY = \"Addresses\";\n\nclass WalletLinkProvider extends safe_event_emitter_1.default {\n  constructor(options) {\n    super();\n    this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n    this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n    this._relay = null;\n    this._addresses = [];\n    this.hasMadeFirstChainChangedEmission = false;\n    this._send = this.send;\n    this._sendAsync = this.sendAsync;\n    this._chainId = util_1.ensureIntNumber(options.chainId || 1);\n    this._jsonRpcUrl = options.jsonRpcUrl;\n    this._overrideIsMetaMask = options.overrideIsMetaMask;\n    this._relayProvider = options.relayProvider;\n    this._storage = options.storage;\n    this._relayEventManager = options.relayEventManager;\n    const chainIdStr = util_1.prepend0x(this._chainId.toString(16)); // indicate that we've connected, for EIP-1193 compliance\n\n    this.emit(\"connect\", {\n      chainIdStr\n    });\n\n    const cachedAddresses = this._storage.getItem(LOCAL_STORAGE_ADDRESSES_KEY);\n\n    if (cachedAddresses) {\n      const addresses = cachedAddresses.split(\" \");\n\n      if (addresses[0] !== \"\") {\n        this._addresses = addresses;\n        this.emit(\"accountsChanged\", addresses);\n      }\n    }\n\n    this._subscriptionManager.events.on(\"notification\", notification => {\n      this.emit(\"message\", {\n        type: notification.method,\n        data: notification.params\n      });\n    });\n\n    if (this._addresses.length > 0) {\n      this.initializeRelay();\n    }\n  }\n\n  get selectedAddress() {\n    return this._addresses[0] || undefined;\n  }\n\n  get networkVersion() {\n    return this._chainId.toString(10);\n  }\n\n  get chainId() {\n    return util_1.prepend0x(this._chainId.toString(16));\n  }\n\n  get isWalletLink() {\n    return true;\n  }\n  /**\n   * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n   * true for this method.\n   */\n\n\n  get isMetaMask() {\n    return this._overrideIsMetaMask;\n  }\n\n  get host() {\n    return this._jsonRpcUrl;\n  }\n\n  get connected() {\n    return true;\n  }\n\n  isConnected() {\n    return true;\n  }\n\n  setProviderInfo(jsonRpcUrl, chainId) {\n    this._jsonRpcUrl = jsonRpcUrl;\n    const originalChainId = this._chainId;\n    this._chainId = util_1.ensureIntNumber(chainId);\n    const chainChanged = this._chainId !== originalChainId;\n\n    if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n      this.emit(\"chainChanged\", this._chainId);\n      this.hasMadeFirstChainChangedEmission = true;\n    }\n  }\n\n  setAppInfo(appName, appLogoUrl) {\n    this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n  }\n\n  async enable() {\n    if (this._addresses.length > 0) {\n      return this._addresses;\n    }\n\n    return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n  }\n\n  close() {\n    this.initializeRelay().then(relay => relay.resetAndReload());\n  }\n\n  send(requestOrMethod, callbackOrParams) {\n    // send<T>(method, params): Promise<T>\n    if (typeof requestOrMethod === \"string\") {\n      const method = requestOrMethod;\n      const params = Array.isArray(callbackOrParams) ? callbackOrParams : callbackOrParams !== undefined ? [callbackOrParams] : [];\n      const request = {\n        jsonrpc: \"2.0\",\n        id: 0,\n        method,\n        params\n      };\n      return this._sendRequestAsync(request).then(res => res.result);\n    } // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n\n\n    if (typeof callbackOrParams === \"function\") {\n      const request = requestOrMethod;\n      const callback = callbackOrParams;\n      return this._sendAsync(request, callback);\n    } // send(JSONRPCRequest[]): JSONRPCResponse[]\n\n\n    if (Array.isArray(requestOrMethod)) {\n      const requests = requestOrMethod;\n      return requests.map(r => this._sendRequest(r));\n    } // send(JSONRPCRequest): JSONRPCResponse\n\n\n    const req = requestOrMethod;\n    return this._sendRequest(req);\n  }\n\n  sendAsync(request, callback) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"callback is required\");\n    } // send(JSONRPCRequest[], callback): void\n\n\n    if (Array.isArray(request)) {\n      const arrayCb = callback;\n\n      this._sendMultipleRequestsAsync(request).then(responses => arrayCb(null, responses)).catch(err => arrayCb(err, null));\n\n      return;\n    } // send(JSONRPCRequest, callback): void\n\n\n    const cb = callback;\n\n    this._sendRequestAsync(request).then(response => cb(null, response)).catch(err => cb(err, null));\n  }\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"Expected a single, non-array, object argument.\",\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.method' must be a non-empty string.\",\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.params' must be an object or array if provided.\",\n        data: args\n      });\n    }\n\n    const newParams = params === undefined ? [] : params; // WalletLink Requests\n\n    const id = this._relayEventManager.makeRequestId();\n\n    const result = await this._sendRequestAsync({\n      method,\n      params: newParams,\n      jsonrpc: \"2.0\",\n      id\n    });\n    return result.result;\n  }\n\n  async scanQRCode(match) {\n    const relay = await this.initializeRelay();\n    const res = await relay.scanQRCode(util_1.ensureRegExpString(match));\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  async arbitraryRequest(data) {\n    const relay = await this.initializeRelay();\n    const res = await relay.arbitraryRequest(data);\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  async childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL) {\n    const relay = await this.initializeRelay();\n    await relay.childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL);\n    return true;\n  }\n\n  supportsSubscriptions() {\n    return false;\n  }\n\n  subscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  unsubscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  disconnect() {\n    return true;\n  }\n\n  _sendRequest(request) {\n    const response = {\n      jsonrpc: \"2.0\",\n      id: request.id\n    };\n    const {\n      method\n    } = request;\n    response.result = this._handleSynchronousMethods(request);\n\n    if (response.result === undefined) {\n      throw new Error(`WalletLink does not support calling ${method} synchronously without ` + `a callback. Please provide a callback parameter to call ${method} ` + `asynchronously.`);\n    }\n\n    return response;\n  }\n\n  _setAddresses(addresses) {\n    if (!Array.isArray(addresses)) {\n      throw new Error(\"addresses is not an array\");\n    }\n\n    this._addresses = addresses.map(address => util_1.ensureAddressString(address));\n    this.emit(\"accountsChanged\", this._addresses);\n\n    this._storage.setItem(LOCAL_STORAGE_ADDRESSES_KEY, addresses.join(\" \"));\n\n    window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", {\n      detail: this._addresses\n    }));\n  }\n\n  _sendRequestAsync(request) {\n    return new Promise((resolve, reject) => {\n      try {\n        const syncResult = this._handleSynchronousMethods(request);\n\n        if (syncResult !== undefined) {\n          return resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: syncResult\n          });\n        }\n\n        const filterPromise = this._handleAsynchronousFilterMethods(request);\n\n        if (filterPromise !== undefined) {\n          filterPromise.then(res => resolve(Object.assign(Object.assign({}, res), {\n            id: request.id\n          }))).catch(err => reject(err));\n          return;\n        }\n\n        const subscriptionPromise = this._handleSubscriptionMethods(request);\n\n        if (subscriptionPromise !== undefined) {\n          subscriptionPromise.then(res => resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: res.result\n          })).catch(err => reject(err));\n          return;\n        }\n      } catch (err) {\n        return reject(err);\n      }\n\n      this._handleAsynchronousMethods(request).then(res => resolve(Object.assign(Object.assign({}, res), {\n        id: request.id\n      }))).catch(err => reject(err));\n    });\n  }\n\n  _sendMultipleRequestsAsync(requests) {\n    return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n  }\n\n  _handleSynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_accounts:\n        return this._eth_accounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n        return this._eth_coinbase();\n\n      case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n        return this._eth_uninstallFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.net_version:\n        return this._net_version();\n\n      case JSONRPC_1.JSONRPCMethod.eth_chainId:\n        return this._eth_chainId();\n\n      default:\n        return undefined;\n    }\n  }\n\n  _handleAsynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n        return this._eth_requestAccounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_sign:\n        return this._eth_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n        return this._eth_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_sign:\n        return this._personal_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n        return this._personal_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n        return this._eth_signTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n        return this._eth_sendRawTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n        return this._eth_sendTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n        return this._eth_signTypedData_v1(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n        return this._throwUnsupportedMethodError();\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n        return this._eth_signTypedData_v3(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n        return this._eth_signTypedData_v4(params);\n\n      case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n        return this._walletlink_arbitrary(params);\n    }\n\n    if (!this._jsonRpcUrl) throw Error(\"Error: No jsonRpcUrl provided\");\n    return window.fetch(this._jsonRpcUrl, {\n      method: \"POST\",\n      body: JSON.stringify(request),\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(json => {\n      if (!json) {\n        throw eth_rpc_errors_1.ethErrors.rpc.parse({});\n      }\n\n      const response = json;\n      const {\n        error\n      } = response;\n\n      if (error) {\n        throw eth_rpc_errors_1.serializeError(error);\n      }\n\n      return response;\n    });\n  }\n\n  _handleAsynchronousFilterMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n        return this._eth_newFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n        return this._eth_newBlockFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n        return this._eth_newPendingTransactionFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n        return this._eth_getFilterChanges(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n        return this._eth_getFilterLogs(params);\n    }\n\n    return undefined;\n  }\n\n  _handleSubscriptionMethods(request) {\n    switch (request.method) {\n      case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n      case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n        return this._subscriptionManager.handleRequest(request);\n    }\n\n    return undefined;\n  }\n\n  _isKnownAddress(addressString) {\n    try {\n      const address = util_1.ensureAddressString(addressString);\n      return this._addresses.includes(address);\n    } catch (_a) {}\n\n    return false;\n  }\n\n  _ensureKnownAddress(addressString) {\n    if (!this._isKnownAddress(addressString)) {\n      throw new Error(\"Unknown Ethereum address\");\n    }\n  }\n\n  _prepareTransactionParams(tx) {\n    const fromAddress = tx.from ? util_1.ensureAddressString(tx.from) : this.selectedAddress;\n\n    if (!fromAddress) {\n      throw new Error(\"Ethereum address is unavailable\");\n    }\n\n    this._ensureKnownAddress(fromAddress);\n\n    const toAddress = tx.to ? util_1.ensureAddressString(tx.to) : null;\n    const weiValue = tx.value != null ? util_1.ensureBN(tx.value) : new bn_js_1.default(0);\n    const data = tx.data ? util_1.ensureBuffer(tx.data) : Buffer.alloc(0);\n    const nonce = tx.nonce != null ? util_1.ensureIntNumber(tx.nonce) : null;\n    const gasPriceInWei = tx.gasPrice != null ? util_1.ensureBN(tx.gasPrice) : null;\n    const gasLimit = tx.gas != null ? util_1.ensureBN(tx.gas) : null;\n    const chainId = this._chainId;\n    return {\n      fromAddress,\n      toAddress,\n      weiValue,\n      data,\n      nonce,\n      gasPriceInWei,\n      gasLimit,\n      chainId\n    };\n  }\n\n  _requireAuthorization() {\n    if (this._addresses.length === 0) {\n      throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n    }\n  }\n\n  _throwUnsupportedMethodError() {\n    throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n  }\n\n  async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n    this._ensureKnownAddress(address);\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n    const relay = await this.initializeRelay();\n    const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  _eth_accounts() {\n    return this._addresses;\n  }\n\n  _eth_coinbase() {\n    return this.selectedAddress || null;\n  }\n\n  _net_version() {\n    return this._chainId.toString(10);\n  }\n\n  _eth_chainId() {\n    return util_1.hexStringFromIntNumber(this._chainId);\n  }\n\n  async _eth_requestAccounts() {\n    if (this._addresses.length > 0) {\n      return Promise.resolve({\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: this._addresses\n      });\n    }\n\n    let res;\n\n    try {\n      const relay = await this.initializeRelay();\n      res = await relay.requestEthereumAccounts();\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n      }\n\n      throw err;\n    }\n\n    if (!res.result) {\n      throw new Error(\"accounts received is empty\");\n    }\n\n    this._setAddresses(res.result);\n\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: this._addresses\n    };\n  }\n\n  _eth_sign(params) {\n    this._requireAuthorization();\n\n    const address = util_1.ensureAddressString(params[0]);\n    const message = util_1.ensureBuffer(params[1]);\n    return this._signEthereumMessage(message, address, false);\n  }\n\n  _eth_ecRecover(params) {\n    const message = util_1.ensureBuffer(params[0]);\n    const signature = util_1.ensureBuffer(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, false);\n  }\n\n  _personal_sign(params) {\n    this._requireAuthorization();\n\n    const message = util_1.ensureBuffer(params[0]);\n    const address = util_1.ensureAddressString(params[1]);\n    return this._signEthereumMessage(message, address, true);\n  }\n\n  _personal_ecRecover(params) {\n    const message = util_1.ensureBuffer(params[0]);\n    const signature = util_1.ensureBuffer(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, true);\n  }\n\n  async _eth_signTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumTransaction(tx);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_sendRawTransaction(params) {\n    const signedTransaction = util_1.ensureBuffer(params[0]);\n    const relay = await this.initializeRelay();\n    const res = await relay.submitEthereumTransaction(signedTransaction, this._chainId);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  async _eth_sendTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signAndSubmitEthereumTransaction(tx);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_signTypedData_v1(params) {\n    this._requireAuthorization();\n\n    const typedData = util_1.ensureParsedJSONObject(params[0]);\n    const address = util_1.ensureAddressString(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _eth_signTypedData_v3(params) {\n    this._requireAuthorization();\n\n    const address = util_1.ensureAddressString(params[0]);\n    const typedData = util_1.ensureParsedJSONObject(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v3({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _eth_signTypedData_v4(params) {\n    this._requireAuthorization();\n\n    const address = util_1.ensureAddressString(params[0]);\n    const typedData = util_1.ensureParsedJSONObject(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v4({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _walletlink_arbitrary(params) {\n    const data = params[0];\n\n    if (typeof data !== \"string\") {\n      throw new Error(\"parameter must be a string\");\n    }\n\n    const result = await this.arbitraryRequest(data);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result\n    };\n  }\n\n  _eth_uninstallFilter(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.uninstallFilter(filterId);\n  }\n\n  async _eth_newFilter(params) {\n    const param = params[0];\n    const filterId = await this._filterPolyfill.newFilter(param);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newBlockFilter() {\n    const filterId = await this._filterPolyfill.newBlockFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newPendingTransactionFilter() {\n    const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  _eth_getFilterChanges(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.getFilterChanges(filterId);\n  }\n\n  _eth_getFilterLogs(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.getFilterLogs(filterId);\n  }\n\n  initializeRelay() {\n    if (this._relay) {\n      return Promise.resolve(this._relay);\n    }\n\n    return this._relayProvider().then(relay => {\n      relay.setChainIdCallback(chainId => this.setProviderInfo(this._jsonRpcUrl, parseInt(chainId, 10)));\n      relay.setJsonRpcUrlCallback(jsonRpcUrl => this.setProviderInfo(jsonRpcUrl, this._chainId));\n      this._relay = relay;\n      return relay;\n    });\n  }\n\n}\n\nexports.WalletLinkProvider = WalletLinkProvider;","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/node_modules/walletlink/dist/provider/WalletLinkProvider.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","WalletLinkProvider","bn_js_1","require","util_1","eth_eip712_util_1","FilterPolyfill_1","JSONRPC_1","eth_rpc_errors_1","safe_event_emitter_1","SubscriptionManager_1","LOCAL_STORAGE_ADDRESSES_KEY","default","constructor","options","_filterPolyfill","FilterPolyfill","_subscriptionManager","SubscriptionManager","_relay","_addresses","hasMadeFirstChainChangedEmission","_send","send","_sendAsync","sendAsync","_chainId","ensureIntNumber","chainId","_jsonRpcUrl","jsonRpcUrl","_overrideIsMetaMask","overrideIsMetaMask","_relayProvider","relayProvider","_storage","storage","_relayEventManager","relayEventManager","chainIdStr","prepend0x","toString","emit","cachedAddresses","getItem","addresses","split","events","on","notification","type","method","data","params","length","initializeRelay","selectedAddress","undefined","networkVersion","isWalletLink","isMetaMask","host","connected","isConnected","setProviderInfo","originalChainId","chainChanged","setAppInfo","appName","appLogoUrl","then","relay","enable","JSONRPCMethod","eth_requestAccounts","close","resetAndReload","requestOrMethod","callbackOrParams","Array","isArray","request","jsonrpc","id","_sendRequestAsync","res","result","callback","requests","map","r","_sendRequest","req","Error","arrayCb","_sendMultipleRequestsAsync","responses","catch","err","cb","response","args","ethErrors","rpc","invalidRequest","message","newParams","makeRequestId","scanQRCode","match","ensureRegExpString","arbitraryRequest","childRequestEthereumAccounts","childSessionId","childSessionSecret","dappName","dappLogoURL","dappURL","supportsSubscriptions","subscribe","unsubscribe","disconnect","_handleSynchronousMethods","_setAddresses","address","ensureAddressString","setItem","join","window","dispatchEvent","CustomEvent","detail","Promise","resolve","reject","syncResult","filterPromise","_handleAsynchronousFilterMethods","assign","subscriptionPromise","_handleSubscriptionMethods","_handleAsynchronousMethods","all","eth_accounts","_eth_accounts","eth_coinbase","_eth_coinbase","eth_uninstallFilter","_eth_uninstallFilter","net_version","_net_version","eth_chainId","_eth_chainId","_eth_requestAccounts","eth_sign","_eth_sign","eth_ecRecover","_eth_ecRecover","personal_sign","_personal_sign","personal_ecRecover","_personal_ecRecover","eth_signTransaction","_eth_signTransaction","eth_sendRawTransaction","_eth_sendRawTransaction","eth_sendTransaction","_eth_sendTransaction","eth_signTypedData_v1","_eth_signTypedData_v1","eth_signTypedData_v2","_throwUnsupportedMethodError","eth_signTypedData_v3","_eth_signTypedData_v3","eth_signTypedData_v4","eth_signTypedData","_eth_signTypedData_v4","walletlink_arbitrary","_walletlink_arbitrary","fetch","body","JSON","stringify","mode","headers","json","parse","error","serializeError","eth_newFilter","_eth_newFilter","eth_newBlockFilter","_eth_newBlockFilter","eth_newPendingTransactionFilter","_eth_newPendingTransactionFilter","eth_getFilterChanges","_eth_getFilterChanges","eth_getFilterLogs","_eth_getFilterLogs","eth_subscribe","eth_unsubscribe","handleRequest","_isKnownAddress","addressString","includes","_a","_ensureKnownAddress","_prepareTransactionParams","tx","fromAddress","from","toAddress","to","weiValue","ensureBN","ensureBuffer","Buffer","alloc","nonce","gasPriceInWei","gasPrice","gasLimit","gas","_requireAuthorization","provider","unauthorized","unsupportedMethod","_signEthereumMessage","addPrefix","typedDataJson","signEthereumMessage","userRejectedRequest","_ethereumAddressFromSignedMessage","signature","ethereumAddressFromSignedMessage","hexStringFromIntNumber","requestEthereumAccounts","signEthereumTransaction","signedTransaction","submitEthereumTransaction","signAndSubmitEthereumTransaction","typedData","ensureParsedJSONObject","hashForSignTypedDataLegacy","typedDataJSON","hashForSignTypedData_v3","hashForSignTypedData_v4","filterId","ensureHexString","uninstallFilter","param","newFilter","newBlockFilter","newPendingTransactionFilter","getFilterChanges","getFilterLogs","setChainIdCallback","parseInt","setJsonRpcUrlCallback"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletLinkProvider = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nconst LOCAL_STORAGE_ADDRESSES_KEY = \"Addresses\";\nclass WalletLinkProvider extends safe_event_emitter_1.default {\n    constructor(options) {\n        super();\n        this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n        this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n        this._relay = null;\n        this._addresses = [];\n        this.hasMadeFirstChainChangedEmission = false;\n        this._send = this.send;\n        this._sendAsync = this.sendAsync;\n        this._chainId = util_1.ensureIntNumber(options.chainId || 1);\n        this._jsonRpcUrl = options.jsonRpcUrl;\n        this._overrideIsMetaMask = options.overrideIsMetaMask;\n        this._relayProvider = options.relayProvider;\n        this._storage = options.storage;\n        this._relayEventManager = options.relayEventManager;\n        const chainIdStr = util_1.prepend0x(this._chainId.toString(16));\n        // indicate that we've connected, for EIP-1193 compliance\n        this.emit(\"connect\", { chainIdStr });\n        const cachedAddresses = this._storage.getItem(LOCAL_STORAGE_ADDRESSES_KEY);\n        if (cachedAddresses) {\n            const addresses = cachedAddresses.split(\" \");\n            if (addresses[0] !== \"\") {\n                this._addresses = addresses;\n                this.emit(\"accountsChanged\", addresses);\n            }\n        }\n        this._subscriptionManager.events.on(\"notification\", (notification) => {\n            this.emit(\"message\", {\n                type: notification.method,\n                data: notification.params\n            });\n        });\n        if (this._addresses.length > 0) {\n            this.initializeRelay();\n        }\n    }\n    get selectedAddress() {\n        return this._addresses[0] || undefined;\n    }\n    get networkVersion() {\n        return this._chainId.toString(10);\n    }\n    get chainId() {\n        return util_1.prepend0x(this._chainId.toString(16));\n    }\n    get isWalletLink() {\n        return true;\n    }\n    /**\n     * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n     * true for this method.\n     */\n    get isMetaMask() {\n        return this._overrideIsMetaMask;\n    }\n    get host() {\n        return this._jsonRpcUrl;\n    }\n    get connected() {\n        return true;\n    }\n    isConnected() {\n        return true;\n    }\n    setProviderInfo(jsonRpcUrl, chainId) {\n        this._jsonRpcUrl = jsonRpcUrl;\n        const originalChainId = this._chainId;\n        this._chainId = util_1.ensureIntNumber(chainId);\n        const chainChanged = this._chainId !== originalChainId;\n        if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n            this.emit(\"chainChanged\", this._chainId);\n            this.hasMadeFirstChainChangedEmission = true;\n        }\n    }\n    setAppInfo(appName, appLogoUrl) {\n        this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n    }\n    async enable() {\n        if (this._addresses.length > 0) {\n            return this._addresses;\n        }\n        return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n    }\n    close() {\n        this.initializeRelay().then(relay => relay.resetAndReload());\n    }\n    send(requestOrMethod, callbackOrParams) {\n        // send<T>(method, params): Promise<T>\n        if (typeof requestOrMethod === \"string\") {\n            const method = requestOrMethod;\n            const params = Array.isArray(callbackOrParams)\n                ? callbackOrParams\n                : callbackOrParams !== undefined\n                    ? [callbackOrParams]\n                    : [];\n            const request = {\n                jsonrpc: \"2.0\",\n                id: 0,\n                method,\n                params\n            };\n            return this._sendRequestAsync(request).then(res => res.result);\n        }\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n        if (typeof callbackOrParams === \"function\") {\n            const request = requestOrMethod;\n            const callback = callbackOrParams;\n            return this._sendAsync(request, callback);\n        }\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\n        if (Array.isArray(requestOrMethod)) {\n            const requests = requestOrMethod;\n            return requests.map(r => this._sendRequest(r));\n        }\n        // send(JSONRPCRequest): JSONRPCResponse\n        const req = requestOrMethod;\n        return this._sendRequest(req);\n    }\n    sendAsync(request, callback) {\n        if (typeof callback !== \"function\") {\n            throw new Error(\"callback is required\");\n        }\n        // send(JSONRPCRequest[], callback): void\n        if (Array.isArray(request)) {\n            const arrayCb = callback;\n            this._sendMultipleRequestsAsync(request)\n                .then(responses => arrayCb(null, responses))\n                .catch(err => arrayCb(err, null));\n            return;\n        }\n        // send(JSONRPCRequest, callback): void\n        const cb = callback;\n        this._sendRequestAsync(request)\n            .then(response => cb(null, response))\n            .catch(err => cb(err, null));\n    }\n    async request(args) {\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"Expected a single, non-array, object argument.\",\n                data: args\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.method' must be a non-empty string.\",\n                data: args\n            });\n        }\n        if (params !== undefined &&\n            !Array.isArray(params) &&\n            (typeof params !== \"object\" || params === null)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.params' must be an object or array if provided.\",\n                data: args\n            });\n        }\n        const newParams = params === undefined ? [] : params;\n        // WalletLink Requests\n        const id = this._relayEventManager.makeRequestId();\n        const result = await this._sendRequestAsync({\n            method,\n            params: newParams,\n            jsonrpc: \"2.0\",\n            id\n        });\n        return result.result;\n    }\n    async scanQRCode(match) {\n        const relay = await this.initializeRelay();\n        const res = await relay.scanQRCode(util_1.ensureRegExpString(match));\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async arbitraryRequest(data) {\n        const relay = await this.initializeRelay();\n        const res = await relay.arbitraryRequest(data);\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL) {\n        const relay = await this.initializeRelay();\n        await relay.childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL);\n        return true;\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    subscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    unsubscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    disconnect() {\n        return true;\n    }\n    _sendRequest(request) {\n        const response = {\n            jsonrpc: \"2.0\",\n            id: request.id\n        };\n        const { method } = request;\n        response.result = this._handleSynchronousMethods(request);\n        if (response.result === undefined) {\n            throw new Error(`WalletLink does not support calling ${method} synchronously without ` +\n                `a callback. Please provide a callback parameter to call ${method} ` +\n                `asynchronously.`);\n        }\n        return response;\n    }\n    _setAddresses(addresses) {\n        if (!Array.isArray(addresses)) {\n            throw new Error(\"addresses is not an array\");\n        }\n        this._addresses = addresses.map(address => util_1.ensureAddressString(address));\n        this.emit(\"accountsChanged\", this._addresses);\n        this._storage.setItem(LOCAL_STORAGE_ADDRESSES_KEY, addresses.join(\" \"));\n        window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", { detail: this._addresses }));\n    }\n    _sendRequestAsync(request) {\n        return new Promise((resolve, reject) => {\n            try {\n                const syncResult = this._handleSynchronousMethods(request);\n                if (syncResult !== undefined) {\n                    return resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: syncResult\n                    });\n                }\n                const filterPromise = this._handleAsynchronousFilterMethods(request);\n                if (filterPromise !== undefined) {\n                    filterPromise\n                        .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                        .catch(err => reject(err));\n                    return;\n                }\n                const subscriptionPromise = this._handleSubscriptionMethods(request);\n                if (subscriptionPromise !== undefined) {\n                    subscriptionPromise\n                        .then(res => resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: res.result\n                    }))\n                        .catch(err => reject(err));\n                    return;\n                }\n            }\n            catch (err) {\n                return reject(err);\n            }\n            this._handleAsynchronousMethods(request)\n                .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                .catch(err => reject(err));\n        });\n    }\n    _sendMultipleRequestsAsync(requests) {\n        return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n    }\n    _handleSynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_accounts:\n                return this._eth_accounts();\n            case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n                return this._eth_coinbase();\n            case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n                return this._eth_uninstallFilter(params);\n            case JSONRPC_1.JSONRPCMethod.net_version:\n                return this._net_version();\n            case JSONRPC_1.JSONRPCMethod.eth_chainId:\n                return this._eth_chainId();\n            default:\n                return undefined;\n        }\n    }\n    _handleAsynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n                return this._eth_requestAccounts();\n            case JSONRPC_1.JSONRPCMethod.eth_sign:\n                return this._eth_sign(params);\n            case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n                return this._eth_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.personal_sign:\n                return this._personal_sign(params);\n            case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n                return this._personal_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n                return this._eth_signTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n                return this._eth_sendRawTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n                return this._eth_sendTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n                return this._eth_signTypedData_v1(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n                return this._throwUnsupportedMethodError();\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n                return this._eth_signTypedData_v3(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n                return this._eth_signTypedData_v4(params);\n            case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n                return this._walletlink_arbitrary(params);\n        }\n        if (!this._jsonRpcUrl)\n            throw Error(\"Error: No jsonRpcUrl provided\");\n        return window\n            .fetch(this._jsonRpcUrl, {\n            method: \"POST\",\n            body: JSON.stringify(request),\n            mode: \"cors\",\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n            .then(res => res.json())\n            .then(json => {\n            if (!json) {\n                throw eth_rpc_errors_1.ethErrors.rpc.parse({});\n            }\n            const response = json;\n            const { error } = response;\n            if (error) {\n                throw eth_rpc_errors_1.serializeError(error);\n            }\n            return response;\n        });\n    }\n    _handleAsynchronousFilterMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n                return this._eth_newFilter(params);\n            case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n                return this._eth_newBlockFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n                return this._eth_newPendingTransactionFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n                return this._eth_getFilterChanges(params);\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n                return this._eth_getFilterLogs(params);\n        }\n        return undefined;\n    }\n    _handleSubscriptionMethods(request) {\n        switch (request.method) {\n            case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n            case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n                return this._subscriptionManager.handleRequest(request);\n        }\n        return undefined;\n    }\n    _isKnownAddress(addressString) {\n        try {\n            const address = util_1.ensureAddressString(addressString);\n            return this._addresses.includes(address);\n        }\n        catch (_a) { }\n        return false;\n    }\n    _ensureKnownAddress(addressString) {\n        if (!this._isKnownAddress(addressString)) {\n            throw new Error(\"Unknown Ethereum address\");\n        }\n    }\n    _prepareTransactionParams(tx) {\n        const fromAddress = tx.from\n            ? util_1.ensureAddressString(tx.from)\n            : this.selectedAddress;\n        if (!fromAddress) {\n            throw new Error(\"Ethereum address is unavailable\");\n        }\n        this._ensureKnownAddress(fromAddress);\n        const toAddress = tx.to ? util_1.ensureAddressString(tx.to) : null;\n        const weiValue = tx.value != null ? util_1.ensureBN(tx.value) : new bn_js_1.default(0);\n        const data = tx.data ? util_1.ensureBuffer(tx.data) : Buffer.alloc(0);\n        const nonce = tx.nonce != null ? util_1.ensureIntNumber(tx.nonce) : null;\n        const gasPriceInWei = tx.gasPrice != null ? util_1.ensureBN(tx.gasPrice) : null;\n        const gasLimit = tx.gas != null ? util_1.ensureBN(tx.gas) : null;\n        const chainId = this._chainId;\n        return {\n            fromAddress,\n            toAddress,\n            weiValue,\n            data,\n            nonce,\n            gasPriceInWei,\n            gasLimit,\n            chainId\n        };\n    }\n    _requireAuthorization() {\n        if (this._addresses.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n        }\n    }\n    _throwUnsupportedMethodError() {\n        throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n    }\n    async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n        this._ensureKnownAddress(address);\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n            }\n            throw err;\n        }\n    }\n    async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n        const relay = await this.initializeRelay();\n        const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix);\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    _eth_accounts() {\n        return this._addresses;\n    }\n    _eth_coinbase() {\n        return this.selectedAddress || null;\n    }\n    _net_version() {\n        return this._chainId.toString(10);\n    }\n    _eth_chainId() {\n        return util_1.hexStringFromIntNumber(this._chainId);\n    }\n    async _eth_requestAccounts() {\n        if (this._addresses.length > 0) {\n            return Promise.resolve({\n                jsonrpc: \"2.0\",\n                id: 0,\n                result: this._addresses\n            });\n        }\n        let res;\n        try {\n            const relay = await this.initializeRelay();\n            res = await relay.requestEthereumAccounts();\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n            }\n            throw err;\n        }\n        if (!res.result) {\n            throw new Error(\"accounts received is empty\");\n        }\n        this._setAddresses(res.result);\n        return { jsonrpc: \"2.0\", id: 0, result: this._addresses };\n    }\n    _eth_sign(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const message = util_1.ensureBuffer(params[1]);\n        return this._signEthereumMessage(message, address, false);\n    }\n    _eth_ecRecover(params) {\n        const message = util_1.ensureBuffer(params[0]);\n        const signature = util_1.ensureBuffer(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, false);\n    }\n    _personal_sign(params) {\n        this._requireAuthorization();\n        const message = util_1.ensureBuffer(params[0]);\n        const address = util_1.ensureAddressString(params[1]);\n        return this._signEthereumMessage(message, address, true);\n    }\n    _personal_ecRecover(params) {\n        const message = util_1.ensureBuffer(params[0]);\n        const signature = util_1.ensureBuffer(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, true);\n    }\n    async _eth_signTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumTransaction(tx);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_sendRawTransaction(params) {\n        const signedTransaction = util_1.ensureBuffer(params[0]);\n        const relay = await this.initializeRelay();\n        const res = await relay.submitEthereumTransaction(signedTransaction, this._chainId);\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    async _eth_sendTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signAndSubmitEthereumTransaction(tx);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_signTypedData_v1(params) {\n        this._requireAuthorization();\n        const typedData = util_1.ensureParsedJSONObject(params[0]);\n        const address = util_1.ensureAddressString(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v3(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const typedData = util_1.ensureParsedJSONObject(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v3({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v4(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const typedData = util_1.ensureParsedJSONObject(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v4({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _walletlink_arbitrary(params) {\n        const data = params[0];\n        if (typeof data !== \"string\") {\n            throw new Error(\"parameter must be a string\");\n        }\n        const result = await this.arbitraryRequest(data);\n        return { jsonrpc: \"2.0\", id: 0, result };\n    }\n    _eth_uninstallFilter(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.uninstallFilter(filterId);\n    }\n    async _eth_newFilter(params) {\n        const param = params[0];\n        const filterId = await this._filterPolyfill.newFilter(param);\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newBlockFilter() {\n        const filterId = await this._filterPolyfill.newBlockFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newPendingTransactionFilter() {\n        const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    _eth_getFilterChanges(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.getFilterChanges(filterId);\n    }\n    _eth_getFilterLogs(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.getFilterLogs(filterId);\n    }\n    initializeRelay() {\n        if (this._relay) {\n            return Promise.resolve(this._relay);\n        }\n        return this._relayProvider().then(relay => {\n            relay.setChainIdCallback((chainId) => this.setProviderInfo(this._jsonRpcUrl, parseInt(chainId, 10)));\n            relay.setJsonRpcUrlCallback((jsonRpcUrl) => this.setProviderInfo(jsonRpcUrl, this._chainId));\n            this._relay = relay;\n            return relay;\n        });\n    }\n}\nexports.WalletLinkProvider = WalletLinkProvider;\n"]},"metadata":{},"sourceType":"script"}