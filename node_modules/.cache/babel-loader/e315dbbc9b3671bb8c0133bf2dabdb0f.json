{"ast":null,"code":"var _jsxFileName = \"/Users/cj/Desktop/swap-attempts/swap2/src/pages/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Suspense, useEffect, useState } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { StringTranslations } from '@crowdin/crowdin-api-client';\nimport Popups from '../components/Popups';\nimport Web3ReactManager from '../components/Web3ReactManager';\nimport Swap from './Swap';\nimport { EN, allLanguages } from '../constants/localisation/languageCodes';\nimport { LanguageContext } from '../hooks/LanguageContext';\nimport { TranslationsContext } from '../hooks/TranslationsContext';\nimport useGetDocumentTitlePrice from '../hooks/useGetDocumentTitlePrice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n  align-items: flex-start;\n  overflow-x: hidden;\n  width: -webkit-fill-available;\n`;\n_c = AppWrapper;\nconst BodyWrapper = styled.div`\n  width: -webkit-fill-available;\n  overflow-y: auto;\n  overflow-x: hidden;\n  z-index: 1;\n  margin-bottom: 64px;\n  ${({\n  theme\n}) => theme.mediaQueries.lg} {\n    margin-bottom: 0;\n  }\n`;\n_c2 = BodyWrapper;\nconst CACHE_KEY = 'pancakeSwapLanguage';\nexport default function App() {\n  _s();\n\n  const [selectedLanguage, setSelectedLanguage] = useState(undefined);\n  const [translatedLanguage, setTranslatedLanguage] = useState(undefined);\n  const [translations, setTranslations] = useState([]);\n  const apiKey = `${process.env.REACT_APP_CROWDIN_APIKEY}`;\n  const projectId = parseInt(`${process.env.REACT_APP_CROWDIN_PROJECTID}`);\n  const fileId = 6;\n  const credentials = {\n    token: apiKey\n  };\n  const stringTranslationsApi = new StringTranslations(credentials);\n\n  const getStoredLang = storedLangCode => {\n    return allLanguages.filter(language => {\n      return language.code === storedLangCode;\n    })[0];\n  };\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY);\n\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode);\n      setSelectedLanguage(storedLang);\n    } else {\n      setSelectedLanguage(EN);\n    }\n  }, []);\n\n  const fetchTranslationsForSelectedLanguage = async () => {\n    stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200).then(translationApiResponse => {\n      if (translationApiResponse.data.length < 1) {\n        setTranslations(['error']);\n      } else {\n        setTranslations(translationApiResponse.data);\n      }\n    }).then(() => setTranslatedLanguage(selectedLanguage)).catch(error => {\n      setTranslations(['error']);\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      fetchTranslationsForSelectedLanguage();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [selectedLanguage]);\n\n  const handleLanguageSelect = langObject => {\n    setSelectedLanguage(langObject);\n    localStorage.setItem(CACHE_KEY, langObject.code);\n  };\n\n  useGetDocumentTitlePrice();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: null,\n    children: /*#__PURE__*/_jsxDEV(HashRouter, {\n      children: /*#__PURE__*/_jsxDEV(AppWrapper, {\n        children: /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n          value: {\n            selectedLanguage,\n            setSelectedLanguage: handleLanguageSelect,\n            translatedLanguage,\n            setTranslatedLanguage\n          },\n          children: /*#__PURE__*/_jsxDEV(TranslationsContext.Provider, {\n            value: {\n              translations,\n              setTranslations\n            },\n            children: /*#__PURE__*/_jsxDEV(BodyWrapper, {\n              children: [/*#__PURE__*/_jsxDEV(Popups, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Web3ReactManager, {\n                children: /*#__PURE__*/_jsxDEV(Switch, {\n                  children: /*#__PURE__*/_jsxDEV(Route, {\n                    exact: true,\n                    strict: true,\n                    path: \"/swap\",\n                    component: Swap\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 124,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WYJnXRDdSU8FdIwtueCB1xS8wAw=\", false, function () {\n  return [useGetDocumentTitlePrice];\n});\n\n_c3 = App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AppWrapper\");\n$RefreshReg$(_c2, \"BodyWrapper\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/src/pages/App.tsx"],"names":["React","Suspense","useEffect","useState","HashRouter","Route","Switch","styled","StringTranslations","Popups","Web3ReactManager","Swap","EN","allLanguages","LanguageContext","TranslationsContext","useGetDocumentTitlePrice","AppWrapper","div","BodyWrapper","theme","mediaQueries","lg","CACHE_KEY","App","selectedLanguage","setSelectedLanguage","undefined","translatedLanguage","setTranslatedLanguage","translations","setTranslations","apiKey","process","env","REACT_APP_CROWDIN_APIKEY","projectId","parseInt","REACT_APP_CROWDIN_PROJECTID","fileId","credentials","token","stringTranslationsApi","getStoredLang","storedLangCode","filter","language","code","localStorage","getItem","storedLang","fetchTranslationsForSelectedLanguage","listLanguageTranslations","then","translationApiResponse","data","length","catch","error","console","handleLanguageSelect","langObject","setItem"],"mappings":"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","sourcesContent":["import React, { Suspense, useEffect, useState } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { Credentials, StringTranslations } from '@crowdin/crowdin-api-client'\nimport { LangType, useModal } from '@pancakeswap-libs/uikit'\nimport VersionBar from 'components/VersionBar'\nimport Popups from '../components/Popups'\nimport Web3ReactManager from '../components/Web3ReactManager'\nimport { RedirectDuplicateTokenIds, RedirectOldAddLiquidityPathStructure } from './AddLiquidity/redirects'\nimport { RedirectOldRemoveLiquidityPathStructure } from './RemoveLiquidity/redirects'\nimport AddLiquidity from './AddLiquidity'\nimport Pool from './Pool'\nimport PoolFinder from './PoolFinder'\nimport RemoveLiquidity from './RemoveLiquidity'\nimport Swap from './Swap'\nimport Migration from './Migration'\nimport { RedirectPathToSwapOnly } from './Swap/redirects'\nimport { EN, allLanguages } from '../constants/localisation/languageCodes'\nimport { LanguageContext } from '../hooks/LanguageContext'\nimport { TranslationsContext } from '../hooks/TranslationsContext'\nimport UseV2ExchangeModal from '../components/UseV2ExchangeModal'\n\nimport CustomMenu from '../components/Menu'\nimport useGetDocumentTitlePrice from '../hooks/useGetDocumentTitlePrice'\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n  align-items: flex-start;\n  overflow-x: hidden;\n  width: -webkit-fill-available;\n`\n\nconst BodyWrapper = styled.div`\n  width: -webkit-fill-available;\n  overflow-y: auto;\n  overflow-x: hidden;\n  z-index: 1;\n  margin-bottom: 64px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 0;\n  }\n`\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport default function App() {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(undefined)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(undefined)\n  const [translations, setTranslations] = useState<Array<any>>([])\n  const apiKey = `${process.env.REACT_APP_CROWDIN_APIKEY}`\n  const projectId = parseInt(`${process.env.REACT_APP_CROWDIN_PROJECTID}`)\n  const fileId = 6\n  const credentials: Credentials = {\n    token: apiKey,\n  }\n\n  const stringTranslationsApi = new StringTranslations(credentials)\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  const fetchTranslationsForSelectedLanguage = async () => {\n    stringTranslationsApi\n      .listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n      .then((translationApiResponse) => {\n        if (translationApiResponse.data.length < 1) {\n          setTranslations(['error'])\n        } else {\n          setTranslations(translationApiResponse.data)\n        }\n      })\n      .then(() => setTranslatedLanguage(selectedLanguage))\n      .catch((error) => {\n        setTranslations(['error'])\n        console.error(error)\n      })\n  }\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      fetchTranslationsForSelectedLanguage()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedLanguage])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  useGetDocumentTitlePrice()\n\n  return (\n    <Suspense fallback={null}>\n      <HashRouter>\n        <AppWrapper>\n          <LanguageContext.Provider\n            value={{\n              selectedLanguage,\n              setSelectedLanguage: handleLanguageSelect,\n              translatedLanguage,\n              setTranslatedLanguage,\n            }}\n          >\n            <TranslationsContext.Provider value={{ translations, setTranslations }}>\n              <BodyWrapper>\n                <Popups />\n                <Web3ReactManager>\n                  <Switch>\n                    <Route exact strict path=\"/swap\" component={Swap} />\n                  </Switch>\n                </Web3ReactManager>\n              </BodyWrapper>\n            </TranslationsContext.Provider>\n          </LanguageContext.Provider>\n        </AppWrapper>\n      </HashRouter>\n    </Suspense>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}