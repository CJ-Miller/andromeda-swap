{"ast":null,"code":"import window from 'global/window'; // const log2 = Math.log2 ? Math.log2 : (x) => (Math.log(x) / Math.log(2));\n\nvar repeat = function repeat(str, len) {\n  var acc = '';\n\n  while (len--) {\n    acc += str;\n  }\n\n  return acc;\n}; // count the number of bits it would take to represent a number\n// we used to do this with log2 but BigInt does not support builtin math\n// Math.ceil(log2(x));\n\n\nexport var countBits = function countBits(x) {\n  return x.toString(2).length;\n}; // count the number of whole bytes it would take to represent a number\n\nexport var countBytes = function countBytes(x) {\n  return Math.ceil(countBits(x) / 8);\n};\nexport var padStart = function padStart(b, len, str) {\n  if (str === void 0) {\n    str = ' ';\n  }\n\n  return (repeat(str, len) + b.toString()).slice(-len);\n};\nexport var isTypedArray = function isTypedArray(obj) {\n  return ArrayBuffer.isView(obj);\n};\nexport var toUint8 = function toUint8(bytes) {\n  if (bytes instanceof Uint8Array) {\n    return bytes;\n  }\n\n  if (!Array.isArray(bytes) && !isTypedArray(bytes) && !(bytes instanceof ArrayBuffer)) {\n    // any non-number or NaN leads to empty uint8array\n    // eslint-disable-next-line\n    if (typeof bytes !== 'number' || typeof bytes === 'number' && bytes !== bytes) {\n      bytes = 0;\n    } else {\n      bytes = [bytes];\n    }\n  }\n\n  return new Uint8Array(bytes && bytes.buffer || bytes, bytes && bytes.byteOffset || 0, bytes && bytes.byteLength || 0);\n};\nexport var toHexString = function toHexString(bytes) {\n  bytes = toUint8(bytes);\n  var str = '';\n\n  for (var i = 0; i < bytes.length; i++) {\n    str += padStart(bytes[i].toString(16), 2, '0');\n  }\n\n  return str;\n};\nexport var toBinaryString = function toBinaryString(bytes) {\n  bytes = toUint8(bytes);\n  var str = '';\n\n  for (var i = 0; i < bytes.length; i++) {\n    str += padStart(bytes[i].toString(2), 8, '0');\n  }\n\n  return str;\n};\nvar BigInt = window.BigInt || Number;\nvar BYTE_TABLE = [BigInt('0x1'), BigInt('0x100'), BigInt('0x10000'), BigInt('0x1000000'), BigInt('0x100000000'), BigInt('0x10000000000'), BigInt('0x1000000000000'), BigInt('0x100000000000000'), BigInt('0x10000000000000000')];\nexport var ENDIANNESS = function () {\n  var a = new Uint16Array([0xFFCC]);\n  var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\n\n  if (b[0] === 0xFF) {\n    return 'big';\n  }\n\n  if (b[0] === 0xCC) {\n    return 'little';\n  }\n\n  return 'unknown';\n}();\nexport var IS_BIG_ENDIAN = ENDIANNESS === 'big';\nexport var IS_LITTLE_ENDIAN = ENDIANNESS === 'little';\nexport var bytesToNumber = function bytesToNumber(bytes, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$signed = _ref.signed,\n      signed = _ref$signed === void 0 ? false : _ref$signed,\n      _ref$le = _ref.le,\n      le = _ref$le === void 0 ? false : _ref$le;\n\n  bytes = toUint8(bytes);\n  var fn = le ? 'reduce' : 'reduceRight';\n  var obj = bytes[fn] ? bytes[fn] : Array.prototype[fn];\n  var number = obj.call(bytes, function (total, byte, i) {\n    var exponent = le ? i : Math.abs(i + 1 - bytes.length);\n    return total + BigInt(byte) * BYTE_TABLE[exponent];\n  }, BigInt(0));\n\n  if (signed) {\n    var max = BYTE_TABLE[bytes.length] / BigInt(2) - BigInt(1);\n    number = BigInt(number);\n\n    if (number > max) {\n      number -= max;\n      number -= max;\n      number -= BigInt(2);\n    }\n  }\n\n  return Number(number);\n};\nexport var numberToBytes = function numberToBytes(number, _temp2) {\n  var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      _ref2$le = _ref2.le,\n      le = _ref2$le === void 0 ? false : _ref2$le; // eslint-disable-next-line\n\n\n  if (typeof number !== 'bigint' && typeof number !== 'number' || typeof number === 'number' && number !== number) {\n    number = 0;\n  }\n\n  number = BigInt(number);\n  var byteCount = countBytes(number);\n  var bytes = new Uint8Array(new ArrayBuffer(byteCount));\n\n  for (var i = 0; i < byteCount; i++) {\n    var byteIndex = le ? i : Math.abs(i + 1 - bytes.length);\n    bytes[byteIndex] = Number(number / BYTE_TABLE[i] & BigInt(0xFF));\n\n    if (number < 0) {\n      bytes[byteIndex] = Math.abs(~bytes[byteIndex]);\n      bytes[byteIndex] -= i === 0 ? 1 : 2;\n    }\n  }\n\n  return bytes;\n};\nexport var bytesToString = function bytesToString(bytes) {\n  if (!bytes) {\n    return '';\n  } // TODO: should toUint8 handle cases where we only have 8 bytes\n  // but report more since this is a Uint16+ Array?\n\n\n  bytes = Array.prototype.slice.call(bytes);\n  var string = String.fromCharCode.apply(null, toUint8(bytes));\n\n  try {\n    return decodeURIComponent(escape(string));\n  } catch (e) {// if decodeURIComponent/escape fails, we are dealing with partial\n    // or full non string data. Just return the potentially garbled string.\n  }\n\n  return string;\n};\nexport var stringToBytes = function stringToBytes(string, stringIsBytes) {\n  if (typeof string !== 'string' && string && typeof string.toString === 'function') {\n    string = string.toString();\n  }\n\n  if (typeof string !== 'string') {\n    return new Uint8Array();\n  } // If the string already is bytes, we don't have to do this\n  // otherwise we do this so that we split multi length characters\n  // into individual bytes\n\n\n  if (!stringIsBytes) {\n    string = unescape(encodeURIComponent(string));\n  }\n\n  var view = new Uint8Array(string.length);\n\n  for (var i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n\n  return view;\n};\nexport var concatTypedArrays = function concatTypedArrays() {\n  for (var _len = arguments.length, buffers = new Array(_len), _key = 0; _key < _len; _key++) {\n    buffers[_key] = arguments[_key];\n  }\n\n  buffers = buffers.filter(function (b) {\n    return b && (b.byteLength || b.length) && typeof b !== 'string';\n  });\n\n  if (buffers.length <= 1) {\n    // for 0 length we will return empty uint8\n    // for 1 length we return the first uint8\n    return toUint8(buffers[0]);\n  }\n\n  var totalLen = buffers.reduce(function (total, buf, i) {\n    return total + (buf.byteLength || buf.length);\n  }, 0);\n  var tempBuffer = new Uint8Array(totalLen);\n  var offset = 0;\n  buffers.forEach(function (buf) {\n    buf = toUint8(buf);\n    tempBuffer.set(buf, offset);\n    offset += buf.byteLength;\n  });\n  return tempBuffer;\n};\n/**\n * Check if the bytes \"b\" are contained within bytes \"a\".\n *\n * @param {Uint8Array|Array} a\n *        Bytes to check in\n *\n * @param {Uint8Array|Array} b\n *        Bytes to check for\n *\n * @param {Object} options\n *        options\n *\n * @param {Array|Uint8Array} [offset=0]\n *        offset to use when looking at bytes in a\n *\n * @param {Array|Uint8Array} [mask=[]]\n *        mask to use on bytes before comparison.\n *\n * @return {boolean}\n *         If all bytes in b are inside of a, taking into account\n *         bit masks.\n */\n\nexport var bytesMatch = function bytesMatch(a, b, _temp3) {\n  var _ref3 = _temp3 === void 0 ? {} : _temp3,\n      _ref3$offset = _ref3.offset,\n      offset = _ref3$offset === void 0 ? 0 : _ref3$offset,\n      _ref3$mask = _ref3.mask,\n      mask = _ref3$mask === void 0 ? [] : _ref3$mask;\n\n  a = toUint8(a);\n  b = toUint8(b); // ie 11 does not support uint8 every\n\n  var fn = b.every ? b.every : Array.prototype.every;\n  return b.length && a.length - offset >= b.length && // ie 11 doesn't support every on uin8\n  fn.call(b, function (bByte, i) {\n    var aByte = mask[i] ? mask[i] & a[offset + i] : a[offset + i];\n    return bByte === aByte;\n  });\n};\nexport var sliceBytes = function sliceBytes(src, start, end) {\n  if (Uint8Array.prototype.slice) {\n    return Uint8Array.prototype.slice.call(src, start, end);\n  }\n\n  return new Uint8Array(Array.prototype.slice.call(src, start, end));\n};\nexport var reverseBytes = function reverseBytes(src) {\n  if (src.reverse) {\n    return src.reverse();\n  }\n\n  return Array.prototype.reverse.call(src);\n};","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/node_modules/@videojs/vhs-utils/es/byte-helpers.js"],"names":["window","repeat","str","len","acc","countBits","x","toString","length","countBytes","Math","ceil","padStart","b","slice","isTypedArray","obj","ArrayBuffer","isView","toUint8","bytes","Uint8Array","Array","isArray","buffer","byteOffset","byteLength","toHexString","i","toBinaryString","BigInt","Number","BYTE_TABLE","ENDIANNESS","a","Uint16Array","IS_BIG_ENDIAN","IS_LITTLE_ENDIAN","bytesToNumber","_temp","_ref","_ref$signed","signed","_ref$le","le","fn","prototype","number","call","total","byte","exponent","abs","max","numberToBytes","_temp2","_ref2","_ref2$le","byteCount","byteIndex","bytesToString","string","String","fromCharCode","apply","decodeURIComponent","escape","e","stringToBytes","stringIsBytes","unescape","encodeURIComponent","view","charCodeAt","concatTypedArrays","_len","arguments","buffers","_key","filter","totalLen","reduce","buf","tempBuffer","offset","forEach","set","bytesMatch","_temp3","_ref3","_ref3$offset","_ref3$mask","mask","every","bByte","aByte","sliceBytes","src","start","end","reverseBytes","reverse"],"mappings":"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","sourcesContent":["import window from 'global/window'; // const log2 = Math.log2 ? Math.log2 : (x) => (Math.log(x) / Math.log(2));\n\nvar repeat = function repeat(str, len) {\n  var acc = '';\n\n  while (len--) {\n    acc += str;\n  }\n\n  return acc;\n}; // count the number of bits it would take to represent a number\n// we used to do this with log2 but BigInt does not support builtin math\n// Math.ceil(log2(x));\n\n\nexport var countBits = function countBits(x) {\n  return x.toString(2).length;\n}; // count the number of whole bytes it would take to represent a number\n\nexport var countBytes = function countBytes(x) {\n  return Math.ceil(countBits(x) / 8);\n};\nexport var padStart = function padStart(b, len, str) {\n  if (str === void 0) {\n    str = ' ';\n  }\n\n  return (repeat(str, len) + b.toString()).slice(-len);\n};\nexport var isTypedArray = function isTypedArray(obj) {\n  return ArrayBuffer.isView(obj);\n};\nexport var toUint8 = function toUint8(bytes) {\n  if (bytes instanceof Uint8Array) {\n    return bytes;\n  }\n\n  if (!Array.isArray(bytes) && !isTypedArray(bytes) && !(bytes instanceof ArrayBuffer)) {\n    // any non-number or NaN leads to empty uint8array\n    // eslint-disable-next-line\n    if (typeof bytes !== 'number' || typeof bytes === 'number' && bytes !== bytes) {\n      bytes = 0;\n    } else {\n      bytes = [bytes];\n    }\n  }\n\n  return new Uint8Array(bytes && bytes.buffer || bytes, bytes && bytes.byteOffset || 0, bytes && bytes.byteLength || 0);\n};\nexport var toHexString = function toHexString(bytes) {\n  bytes = toUint8(bytes);\n  var str = '';\n\n  for (var i = 0; i < bytes.length; i++) {\n    str += padStart(bytes[i].toString(16), 2, '0');\n  }\n\n  return str;\n};\nexport var toBinaryString = function toBinaryString(bytes) {\n  bytes = toUint8(bytes);\n  var str = '';\n\n  for (var i = 0; i < bytes.length; i++) {\n    str += padStart(bytes[i].toString(2), 8, '0');\n  }\n\n  return str;\n};\nvar BigInt = window.BigInt || Number;\nvar BYTE_TABLE = [BigInt('0x1'), BigInt('0x100'), BigInt('0x10000'), BigInt('0x1000000'), BigInt('0x100000000'), BigInt('0x10000000000'), BigInt('0x1000000000000'), BigInt('0x100000000000000'), BigInt('0x10000000000000000')];\nexport var ENDIANNESS = function () {\n  var a = new Uint16Array([0xFFCC]);\n  var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\n\n  if (b[0] === 0xFF) {\n    return 'big';\n  }\n\n  if (b[0] === 0xCC) {\n    return 'little';\n  }\n\n  return 'unknown';\n}();\nexport var IS_BIG_ENDIAN = ENDIANNESS === 'big';\nexport var IS_LITTLE_ENDIAN = ENDIANNESS === 'little';\nexport var bytesToNumber = function bytesToNumber(bytes, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$signed = _ref.signed,\n      signed = _ref$signed === void 0 ? false : _ref$signed,\n      _ref$le = _ref.le,\n      le = _ref$le === void 0 ? false : _ref$le;\n\n  bytes = toUint8(bytes);\n  var fn = le ? 'reduce' : 'reduceRight';\n  var obj = bytes[fn] ? bytes[fn] : Array.prototype[fn];\n  var number = obj.call(bytes, function (total, byte, i) {\n    var exponent = le ? i : Math.abs(i + 1 - bytes.length);\n    return total + BigInt(byte) * BYTE_TABLE[exponent];\n  }, BigInt(0));\n\n  if (signed) {\n    var max = BYTE_TABLE[bytes.length] / BigInt(2) - BigInt(1);\n    number = BigInt(number);\n\n    if (number > max) {\n      number -= max;\n      number -= max;\n      number -= BigInt(2);\n    }\n  }\n\n  return Number(number);\n};\nexport var numberToBytes = function numberToBytes(number, _temp2) {\n  var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      _ref2$le = _ref2.le,\n      le = _ref2$le === void 0 ? false : _ref2$le;\n\n  // eslint-disable-next-line\n  if (typeof number !== 'bigint' && typeof number !== 'number' || typeof number === 'number' && number !== number) {\n    number = 0;\n  }\n\n  number = BigInt(number);\n  var byteCount = countBytes(number);\n  var bytes = new Uint8Array(new ArrayBuffer(byteCount));\n\n  for (var i = 0; i < byteCount; i++) {\n    var byteIndex = le ? i : Math.abs(i + 1 - bytes.length);\n    bytes[byteIndex] = Number(number / BYTE_TABLE[i] & BigInt(0xFF));\n\n    if (number < 0) {\n      bytes[byteIndex] = Math.abs(~bytes[byteIndex]);\n      bytes[byteIndex] -= i === 0 ? 1 : 2;\n    }\n  }\n\n  return bytes;\n};\nexport var bytesToString = function bytesToString(bytes) {\n  if (!bytes) {\n    return '';\n  } // TODO: should toUint8 handle cases where we only have 8 bytes\n  // but report more since this is a Uint16+ Array?\n\n\n  bytes = Array.prototype.slice.call(bytes);\n  var string = String.fromCharCode.apply(null, toUint8(bytes));\n\n  try {\n    return decodeURIComponent(escape(string));\n  } catch (e) {// if decodeURIComponent/escape fails, we are dealing with partial\n    // or full non string data. Just return the potentially garbled string.\n  }\n\n  return string;\n};\nexport var stringToBytes = function stringToBytes(string, stringIsBytes) {\n  if (typeof string !== 'string' && string && typeof string.toString === 'function') {\n    string = string.toString();\n  }\n\n  if (typeof string !== 'string') {\n    return new Uint8Array();\n  } // If the string already is bytes, we don't have to do this\n  // otherwise we do this so that we split multi length characters\n  // into individual bytes\n\n\n  if (!stringIsBytes) {\n    string = unescape(encodeURIComponent(string));\n  }\n\n  var view = new Uint8Array(string.length);\n\n  for (var i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n\n  return view;\n};\nexport var concatTypedArrays = function concatTypedArrays() {\n  for (var _len = arguments.length, buffers = new Array(_len), _key = 0; _key < _len; _key++) {\n    buffers[_key] = arguments[_key];\n  }\n\n  buffers = buffers.filter(function (b) {\n    return b && (b.byteLength || b.length) && typeof b !== 'string';\n  });\n\n  if (buffers.length <= 1) {\n    // for 0 length we will return empty uint8\n    // for 1 length we return the first uint8\n    return toUint8(buffers[0]);\n  }\n\n  var totalLen = buffers.reduce(function (total, buf, i) {\n    return total + (buf.byteLength || buf.length);\n  }, 0);\n  var tempBuffer = new Uint8Array(totalLen);\n  var offset = 0;\n  buffers.forEach(function (buf) {\n    buf = toUint8(buf);\n    tempBuffer.set(buf, offset);\n    offset += buf.byteLength;\n  });\n  return tempBuffer;\n};\n/**\n * Check if the bytes \"b\" are contained within bytes \"a\".\n *\n * @param {Uint8Array|Array} a\n *        Bytes to check in\n *\n * @param {Uint8Array|Array} b\n *        Bytes to check for\n *\n * @param {Object} options\n *        options\n *\n * @param {Array|Uint8Array} [offset=0]\n *        offset to use when looking at bytes in a\n *\n * @param {Array|Uint8Array} [mask=[]]\n *        mask to use on bytes before comparison.\n *\n * @return {boolean}\n *         If all bytes in b are inside of a, taking into account\n *         bit masks.\n */\n\nexport var bytesMatch = function bytesMatch(a, b, _temp3) {\n  var _ref3 = _temp3 === void 0 ? {} : _temp3,\n      _ref3$offset = _ref3.offset,\n      offset = _ref3$offset === void 0 ? 0 : _ref3$offset,\n      _ref3$mask = _ref3.mask,\n      mask = _ref3$mask === void 0 ? [] : _ref3$mask;\n\n  a = toUint8(a);\n  b = toUint8(b); // ie 11 does not support uint8 every\n\n  var fn = b.every ? b.every : Array.prototype.every;\n  return b.length && a.length - offset >= b.length && // ie 11 doesn't support every on uin8\n  fn.call(b, function (bByte, i) {\n    var aByte = mask[i] ? mask[i] & a[offset + i] : a[offset + i];\n    return bByte === aByte;\n  });\n};\nexport var sliceBytes = function sliceBytes(src, start, end) {\n  if (Uint8Array.prototype.slice) {\n    return Uint8Array.prototype.slice.call(src, start, end);\n  }\n\n  return new Uint8Array(Array.prototype.slice.call(src, start, end));\n};\nexport var reverseBytes = function reverseBytes(src) {\n  if (src.reverse) {\n    return src.reverse();\n  }\n\n  return Array.prototype.reverse.call(src);\n};"]},"metadata":{},"sourceType":"module"}