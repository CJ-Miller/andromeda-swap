{"ast":null,"code":"var MAX_UINT32 = Math.pow(2, 32);\n\nvar parseSidx = function (data) {\n  var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n      result = {\n    version: data[0],\n    flags: new Uint8Array(data.subarray(1, 4)),\n    references: [],\n    referenceId: view.getUint32(4),\n    timescale: view.getUint32(8)\n  },\n      i = 12;\n\n  if (result.version === 0) {\n    result.earliestPresentationTime = view.getUint32(i);\n    result.firstOffset = view.getUint32(i + 4);\n    i += 8;\n  } else {\n    // read 64 bits\n    result.earliestPresentationTime = view.getUint32(i) * MAX_UINT32 + view.getUint32(i + 4);\n    result.firstOffset = view.getUint32(i + 8) * MAX_UINT32 + view.getUint32(i + 12);\n    i += 16;\n  }\n\n  i += 2; // reserved\n\n  var referenceCount = view.getUint16(i);\n  i += 2; // start of references\n\n  for (; referenceCount > 0; i += 12, referenceCount--) {\n    result.references.push({\n      referenceType: (data[i] & 0x80) >>> 7,\n      referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n      subsegmentDuration: view.getUint32(i + 4),\n      startsWithSap: !!(data[i + 8] & 0x80),\n      sapType: (data[i + 8] & 0x70) >>> 4,\n      sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n    });\n  }\n\n  return result;\n};\n\nmodule.exports = parseSidx;","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/node_modules/mux.js/lib/tools/parse-sidx.js"],"names":["MAX_UINT32","Math","pow","parseSidx","data","view","DataView","buffer","byteOffset","byteLength","result","version","flags","Uint8Array","subarray","references","referenceId","getUint32","timescale","i","earliestPresentationTime","firstOffset","referenceCount","getUint16","push","referenceType","referencedSize","subsegmentDuration","startsWithSap","sapType","sapDeltaTime","module","exports"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAjB;;AAEA,IAAIC,SAAS,GAAG,UAASC,IAAT,EAAe;AAC7B,MAAIC,IAAI,GAAG,IAAIC,QAAJ,CAAaF,IAAI,CAACG,MAAlB,EAA0BH,IAAI,CAACI,UAA/B,EAA2CJ,IAAI,CAACK,UAAhD,CAAX;AAAA,MACIC,MAAM,GAAG;AACPC,IAAAA,OAAO,EAAEP,IAAI,CAAC,CAAD,CADN;AAEPQ,IAAAA,KAAK,EAAE,IAAIC,UAAJ,CAAeT,IAAI,CAACU,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAf,CAFA;AAGPC,IAAAA,UAAU,EAAE,EAHL;AAIPC,IAAAA,WAAW,EAAEX,IAAI,CAACY,SAAL,CAAe,CAAf,CAJN;AAKPC,IAAAA,SAAS,EAAEb,IAAI,CAACY,SAAL,CAAe,CAAf;AALJ,GADb;AAAA,MAQEE,CAAC,GAAG,EARN;;AAUA,MAAIT,MAAM,CAACC,OAAP,KAAmB,CAAvB,EAA0B;AACxBD,IAAAA,MAAM,CAACU,wBAAP,GAAkCf,IAAI,CAACY,SAAL,CAAeE,CAAf,CAAlC;AACAT,IAAAA,MAAM,CAACW,WAAP,GAAqBhB,IAAI,CAACY,SAAL,CAAeE,CAAC,GAAG,CAAnB,CAArB;AACAA,IAAAA,CAAC,IAAI,CAAL;AACD,GAJD,MAIO;AACL;AACAT,IAAAA,MAAM,CAACU,wBAAP,GAAmCf,IAAI,CAACY,SAAL,CAAeE,CAAf,IAAoBnB,UAArB,GAAmCK,IAAI,CAACY,SAAL,CAAeE,CAAC,GAAG,CAAnB,CAArE;AACAT,IAAAA,MAAM,CAACW,WAAP,GAAsBhB,IAAI,CAACY,SAAL,CAAeE,CAAC,GAAG,CAAnB,IAAwBnB,UAAzB,GAAuCK,IAAI,CAACY,SAAL,CAAeE,CAAC,GAAG,EAAnB,CAA5D;AACAA,IAAAA,CAAC,IAAI,EAAL;AACD;;AAEDA,EAAAA,CAAC,IAAI,CAAL,CAtB6B,CAsBrB;;AAER,MAAIG,cAAc,GAAGjB,IAAI,CAACkB,SAAL,CAAeJ,CAAf,CAArB;AAEAA,EAAAA,CAAC,IAAI,CAAL,CA1B6B,CA0BrB;;AAER,SAAOG,cAAc,GAAG,CAAxB,EAA2BH,CAAC,IAAI,EAAL,EAASG,cAAc,EAAlD,EAAsD;AACpDZ,IAAAA,MAAM,CAACK,UAAP,CAAkBS,IAAlB,CAAuB;AACrBC,MAAAA,aAAa,EAAE,CAACrB,IAAI,CAACe,CAAD,CAAJ,GAAU,IAAX,MAAqB,CADf;AAErBO,MAAAA,cAAc,EAAErB,IAAI,CAACY,SAAL,CAAeE,CAAf,IAAoB,UAFf;AAGrBQ,MAAAA,kBAAkB,EAAEtB,IAAI,CAACY,SAAL,CAAeE,CAAC,GAAG,CAAnB,CAHC;AAIrBS,MAAAA,aAAa,EAAE,CAAC,EAAExB,IAAI,CAACe,CAAC,GAAG,CAAL,CAAJ,GAAc,IAAhB,CAJK;AAKrBU,MAAAA,OAAO,EAAE,CAACzB,IAAI,CAACe,CAAC,GAAG,CAAL,CAAJ,GAAc,IAAf,MAAyB,CALb;AAMrBW,MAAAA,YAAY,EAAEzB,IAAI,CAACY,SAAL,CAAeE,CAAC,GAAG,CAAnB,IAAwB;AANjB,KAAvB;AAQD;;AAED,SAAOT,MAAP;AACD,CAxCD;;AA2CAqB,MAAM,CAACC,OAAP,GAAiB7B,SAAjB","sourcesContent":["var MAX_UINT32 = Math.pow(2, 32);\n\nvar parseSidx = function(data) {\n  var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n      result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        references: [],\n        referenceId: view.getUint32(4),\n        timescale: view.getUint32(8)\n      },\n    i = 12;\n\n  if (result.version === 0) {\n    result.earliestPresentationTime = view.getUint32(i);\n    result.firstOffset = view.getUint32(i + 4);\n    i += 8;\n  } else {\n    // read 64 bits\n    result.earliestPresentationTime = (view.getUint32(i) * MAX_UINT32) + view.getUint32(i + 4);\n    result.firstOffset = (view.getUint32(i + 8) * MAX_UINT32) + view.getUint32(i + 12);\n    i += 16;\n  }\n\n  i += 2; // reserved\n\n  var referenceCount = view.getUint16(i);\n\n  i += 2; // start of references\n\n  for (; referenceCount > 0; i += 12, referenceCount--) {\n    result.references.push({\n      referenceType: (data[i] & 0x80) >>> 7,\n      referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n      subsegmentDuration: view.getUint32(i + 4),\n      startsWithSap: !!(data[i + 8] & 0x80),\n      sapType: (data[i + 8] & 0x70) >>> 4,\n      sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n    });\n  }\n\n  return result;\n};\n\n\nmodule.exports = parseSidx;\n"]},"metadata":{},"sourceType":"script"}