{"ast":null,"code":"var _jsxFileName = \"/Users/cj/Desktop/swap-attempts/swap2/src/pages/AddLiquidity/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { currencyEquals, ETHER, WETH } from '@pancakeswap-libs/sdk';\nimport { Button, CardBody, AddIcon, Text as UIKitText } from '@pancakeswap-libs/uikit';\nimport { LightCard } from 'components/Card';\nimport { AutoColumn, ColumnCenter } from 'components/Column';\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/TransactionConfirmationModal';\nimport CardNav from 'components/CardNav';\nimport CurrencyInputPanel from 'components/CurrencyInputPanel';\nimport DoubleCurrencyLogo from 'components/DoubleLogo';\nimport { AddRemoveTabs } from 'components/NavigationTabs';\nimport { MinimalPositionCard } from 'components/PositionCard';\nimport Row, { RowBetween, RowFlat } from 'components/Row';\nimport { PairState } from 'data/Reserves';\nimport { useActiveWeb3React } from 'hooks';\nimport { useCurrency } from 'hooks/Tokens';\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback';\nimport { Field } from 'state/mint/actions';\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from 'state/mint/hooks';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport { useIsExpertMode, useUserDeadline, useUserSlippageTolerance } from 'state/user/hooks';\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from 'utils';\nimport { maxAmountSpend } from 'utils/maxAmountSpend';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { currencyId } from 'utils/currencyId';\nimport Pane from 'components/Pane';\nimport Container from 'components/Container';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport useI18n from 'hooks/useI18n';\nimport AppBody from '../AppBody';\nimport { Dots, Wrapper } from '../Pool/styleds';\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom';\nimport { PoolPriceBar } from './PoolPriceBar';\nimport { ROUTER_ADDRESS } from '../../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddLiquidity({\n  match: {\n    params: {\n      currencyIdA,\n      currencyIdB\n    }\n  },\n  history\n}) {\n  _s();\n\n  var _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$Field$3, _currencies$Field$CUR7, _parsedAmounts$Field$4, _currencies$Field$CUR8, _currencies$Field$CUR9, _currencies$Field$CUR10, _currencies$Field$CUR11, _currencies$Field$CUR12;\n\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const currencyA = useCurrency(currencyIdA);\n  const currencyB = useCurrency(currencyIdB);\n  const TranslateString = useI18n();\n  const oneCurrencyIsWBNB = Boolean(chainId && (currencyA && currencyEquals(currencyA, WETH[chainId]) || currencyB && currencyEquals(currencyB, WETH[chainId])));\n  const expertMode = useIsExpertMode(); // mint state\n\n  const {\n    independentField,\n    typedValue,\n    otherTypedValue\n  } = useMintState();\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  } = useDerivedMintInfo(currencyA !== null && currencyA !== void 0 ? currencyA : undefined, currencyB !== null && currencyB !== void 0 ? currencyB : undefined);\n  const {\n    onFieldAInput,\n    onFieldBInput\n  } = useMintActionHandlers(noLiquidity);\n  const isValid = !error; // modal and loading\n\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [attemptingTxn, setAttemptingTxn] = useState(false); // clicked confirm\n  // txn values\n\n  const [deadline] = useUserDeadline(); // custom from users settings\n\n  const [allowedSlippage] = useUserSlippageTolerance(); // custom from users\n\n  const [txHash, setTxHash] = useState(''); // get formatted amounts\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  }; // get the max amounts user can add\n\n  const maxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    return { ...accumulator,\n      [field]: maxAmountSpend(currencyBalances[field])\n    };\n  }, {});\n  const atMaxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    var _maxAmounts$field, _parsedAmounts$field;\n\n    return { ...accumulator,\n      [field]: (_maxAmounts$field = maxAmounts[field]) === null || _maxAmounts$field === void 0 ? void 0 : _maxAmounts$field.equalTo((_parsedAmounts$field = parsedAmounts[field]) !== null && _parsedAmounts$field !== void 0 ? _parsedAmounts$field : '0')\n    };\n  }, {}); // check whether the user has approved the router on the tokens\n\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS);\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS);\n  const addTransaction = useTransactionAdder();\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return;\n    const router = getRouterContract(chainId, library, account);\n    const {\n      [Field.CURRENCY_A]: parsedAmountA,\n      [Field.CURRENCY_B]: parsedAmountB\n    } = parsedAmounts;\n\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB) {\n      return;\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0]\n    };\n    const deadlineFromNow = Math.ceil(Date.now() / 1000) + deadline;\n    let estimate;\n    let method;\n    let args;\n    let value;\n\n    if (currencyA === ETHER || currencyB === ETHER) {\n      var _wrappedCurrency$addr, _wrappedCurrency;\n\n      const tokenBIsBNB = currencyB === ETHER;\n      estimate = router.estimateGas.addLiquidityETH;\n      method = router.addLiquidityETH;\n      args = [(_wrappedCurrency$addr = (_wrappedCurrency = wrappedCurrency(tokenBIsBNB ? currencyA : currencyB, chainId)) === null || _wrappedCurrency === void 0 ? void 0 : _wrappedCurrency.address) !== null && _wrappedCurrency$addr !== void 0 ? _wrappedCurrency$addr : '', // token\n      (tokenBIsBNB ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n      amountsMin[tokenBIsBNB ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n      amountsMin[tokenBIsBNB ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n      account, deadlineFromNow];\n      value = BigNumber.from((tokenBIsBNB ? parsedAmountB : parsedAmountA).raw.toString());\n    } else {\n      var _wrappedCurrency$addr2, _wrappedCurrency2, _wrappedCurrency$addr3, _wrappedCurrency3;\n\n      estimate = router.estimateGas.addLiquidity;\n      method = router.addLiquidity;\n      args = [(_wrappedCurrency$addr2 = (_wrappedCurrency2 = wrappedCurrency(currencyA, chainId)) === null || _wrappedCurrency2 === void 0 ? void 0 : _wrappedCurrency2.address) !== null && _wrappedCurrency$addr2 !== void 0 ? _wrappedCurrency$addr2 : '', (_wrappedCurrency$addr3 = (_wrappedCurrency3 = wrappedCurrency(currencyB, chainId)) === null || _wrappedCurrency3 === void 0 ? void 0 : _wrappedCurrency3.address) !== null && _wrappedCurrency$addr3 !== void 0 ? _wrappedCurrency$addr3 : '', parsedAmountA.raw.toString(), parsedAmountB.raw.toString(), amountsMin[Field.CURRENCY_A].toString(), amountsMin[Field.CURRENCY_B].toString(), account, deadlineFromNow];\n      value = null;\n    }\n\n    setAttemptingTxn(true); // const aa = await estimate(...args, value ? { value } : {})\n\n    await estimate(...args, value ? {\n      value\n    } : {}).then(estimatedGasLimit => method(...args, { ...(value ? {\n        value\n      } : {}),\n      gasLimit: calculateGasMargin(estimatedGasLimit)\n    }).then(response => {\n      var _parsedAmounts$Field$, _currencies$Field$CUR, _parsedAmounts$Field$2, _currencies$Field$CUR2;\n\n      setAttemptingTxn(false);\n      addTransaction(response, {\n        summary: `Add ${(_parsedAmounts$Field$ = parsedAmounts[Field.CURRENCY_A]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.toSignificant(3)} ${(_currencies$Field$CUR = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR === void 0 ? void 0 : _currencies$Field$CUR.symbol} and ${(_parsedAmounts$Field$2 = parsedAmounts[Field.CURRENCY_B]) === null || _parsedAmounts$Field$2 === void 0 ? void 0 : _parsedAmounts$Field$2.toSignificant(3)} ${(_currencies$Field$CUR2 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR2 === void 0 ? void 0 : _currencies$Field$CUR2.symbol}`\n      });\n      setTxHash(response.hash);\n    })).catch(e => {\n      setAttemptingTxn(false); // we only care if the error is something _other_ than the user rejected the tx\n\n      if ((e === null || e === void 0 ? void 0 : e.code) !== 4001) {\n        console.error(e);\n      }\n    });\n  }\n\n  const modalHeader = () => {\n    var _currencies$Field$CUR3, _currencies$Field$CUR4, _currencies$Field$CUR5, _currencies$Field$CUR6;\n\n    return noLiquidity ? /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"20px\",\n      children: /*#__PURE__*/_jsxDEV(LightCard, {\n        mt: \"20px\",\n        borderRadius: \"20px\",\n        children: /*#__PURE__*/_jsxDEV(RowFlat, {\n          children: [/*#__PURE__*/_jsxDEV(UIKitText, {\n            fontSize: \"48px\",\n            mr: \"8px\",\n            children: `${(_currencies$Field$CUR3 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR3 === void 0 ? void 0 : _currencies$Field$CUR3.symbol}/${(_currencies$Field$CUR4 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR4 === void 0 ? void 0 : _currencies$Field$CUR4.symbol}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DoubleCurrencyLogo, {\n            currency0: currencies[Field.CURRENCY_A],\n            currency1: currencies[Field.CURRENCY_B],\n            size: 30\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"20px\",\n      children: [/*#__PURE__*/_jsxDEV(RowFlat, {\n        style: {\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(UIKitText, {\n          fontSize: \"48px\",\n          mr: \"8px\",\n          children: liquidityMinted === null || liquidityMinted === void 0 ? void 0 : liquidityMinted.toSignificant(6)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DoubleCurrencyLogo, {\n          currency0: currencies[Field.CURRENCY_A],\n          currency1: currencies[Field.CURRENCY_B],\n          size: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(UIKitText, {\n          fontSize: \"24px\",\n          children: `${(_currencies$Field$CUR5 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR5 === void 0 ? void 0 : _currencies$Field$CUR5.symbol}/${(_currencies$Field$CUR6 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR6 === void 0 ? void 0 : _currencies$Field$CUR6.symbol} Pool Tokens`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UIKitText, {\n        small: true,\n        textAlign: \"left\",\n        padding: \"8px 0 0 0 \",\n        style: {\n          fontStyle: 'italic'\n        },\n        children: `Output is estimated. If the price changes by more than ${allowedSlippage / 100}% your transaction will revert.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this);\n  };\n\n  const modalBottom = () => {\n    return /*#__PURE__*/_jsxDEV(ConfirmAddModalBottom, {\n      price: price,\n      currencies: currencies,\n      parsedAmounts: parsedAmounts,\n      noLiquidity: noLiquidity,\n      onAdd: onAdd,\n      poolTokenPercentage: poolTokenPercentage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this);\n  };\n\n  const pendingText = `Supplying ${(_parsedAmounts$Field$3 = parsedAmounts[Field.CURRENCY_A]) === null || _parsedAmounts$Field$3 === void 0 ? void 0 : _parsedAmounts$Field$3.toSignificant(6)} ${(_currencies$Field$CUR7 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR7 === void 0 ? void 0 : _currencies$Field$CUR7.symbol} and ${(_parsedAmounts$Field$4 = parsedAmounts[Field.CURRENCY_B]) === null || _parsedAmounts$Field$4 === void 0 ? void 0 : _parsedAmounts$Field$4.toSignificant(6)} ${(_currencies$Field$CUR8 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR8 === void 0 ? void 0 : _currencies$Field$CUR8.symbol}`;\n  const handleCurrencyASelect = useCallback(currA => {\n    const newCurrencyIdA = currencyId(currA);\n\n    if (newCurrencyIdA === currencyIdB) {\n      history.push(`/add/${currencyIdB}/${currencyIdA}`);\n    } else {\n      history.push(`/add/${newCurrencyIdA}/${currencyIdB}`);\n    }\n  }, [currencyIdB, history, currencyIdA]);\n  const handleCurrencyBSelect = useCallback(currB => {\n    const newCurrencyIdB = currencyId(currB);\n\n    if (currencyIdA === newCurrencyIdB) {\n      if (currencyIdB) {\n        history.push(`/add/${currencyIdB}/${newCurrencyIdB}`);\n      } else {\n        history.push(`/add/${newCurrencyIdB}`);\n      }\n    } else {\n      history.push(`/add/${currencyIdA || 'BNB'}/${newCurrencyIdB}`);\n    }\n  }, [currencyIdA, history, currencyIdB]);\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onFieldAInput('');\n    }\n\n    setTxHash('');\n  }, [onFieldAInput, txHash]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(CardNav, {\n      activeIndex: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppBody, {\n      children: [/*#__PURE__*/_jsxDEV(AddRemoveTabs, {\n        adding: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        children: [/*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n          isOpen: showConfirm,\n          onDismiss: handleDismissConfirmation,\n          attemptingTxn: attemptingTxn,\n          hash: txHash,\n          content: () => /*#__PURE__*/_jsxDEV(ConfirmationModalContent, {\n            title: noLiquidity ? TranslateString(1154, 'You are creating a pool') : TranslateString(1156, 'You will receive'),\n            onDismiss: handleDismissConfirmation,\n            topContent: modalHeader,\n            bottomContent: modalBottom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this),\n          pendingText: pendingText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n            gap: \"20px\",\n            children: [noLiquidity && /*#__PURE__*/_jsxDEV(ColumnCenter, {\n              children: /*#__PURE__*/_jsxDEV(Pane, {\n                children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n                  gap: \"12px\",\n                  children: [/*#__PURE__*/_jsxDEV(UIKitText, {\n                    children: TranslateString(1158, 'You are the first liquidity provider.')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 322,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(UIKitText, {\n                    children: TranslateString(1160, 'The ratio of tokens you add will set the price of this pool.')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(UIKitText, {\n                    children: TranslateString(1162, 'Once you are happy with the rate click supply to review.')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n              value: formattedAmounts[Field.CURRENCY_A],\n              onUserInput: onFieldAInput,\n              onMax: () => {\n                var _maxAmounts$Field$CUR, _maxAmounts$Field$CUR2;\n\n                onFieldAInput((_maxAmounts$Field$CUR = (_maxAmounts$Field$CUR2 = maxAmounts[Field.CURRENCY_A]) === null || _maxAmounts$Field$CUR2 === void 0 ? void 0 : _maxAmounts$Field$CUR2.toExact()) !== null && _maxAmounts$Field$CUR !== void 0 ? _maxAmounts$Field$CUR : '');\n              },\n              onCurrencySelect: handleCurrencyASelect,\n              showMaxButton: !atMaxAmounts[Field.CURRENCY_A],\n              currency: currencies[Field.CURRENCY_A],\n              id: \"add-liquidity-input-tokena\",\n              showCommonBases: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnCenter, {\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                color: \"textSubtle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n              value: formattedAmounts[Field.CURRENCY_B],\n              onUserInput: onFieldBInput,\n              onCurrencySelect: handleCurrencyBSelect,\n              onMax: () => {\n                var _maxAmounts$Field$CUR3, _maxAmounts$Field$CUR4;\n\n                onFieldBInput((_maxAmounts$Field$CUR3 = (_maxAmounts$Field$CUR4 = maxAmounts[Field.CURRENCY_B]) === null || _maxAmounts$Field$CUR4 === void 0 ? void 0 : _maxAmounts$Field$CUR4.toExact()) !== null && _maxAmounts$Field$CUR3 !== void 0 ? _maxAmounts$Field$CUR3 : '');\n              },\n              showMaxButton: !atMaxAmounts[Field.CURRENCY_B],\n              currency: currencies[Field.CURRENCY_B],\n              id: \"add-liquidity-input-tokenb\",\n              showCommonBases: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 15\n            }, this), currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(UIKitText, {\n                style: {\n                  textTransform: 'uppercase',\n                  fontWeight: 600\n                },\n                color: \"textSubtle\",\n                fontSize: \"12px\",\n                mb: \"2px\",\n                children: noLiquidity ? TranslateString(1164, 'Initial prices and pool share') : TranslateString(1166, 'Prices and pool share')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Pane, {\n                children: /*#__PURE__*/_jsxDEV(PoolPriceBar, {\n                  currencies: currencies,\n                  poolTokenPercentage: poolTokenPercentage,\n                  noLiquidity: noLiquidity,\n                  price: price\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 17\n            }, this), !account ? /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n              width: \"100%\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(AutoColumn, {\n              gap: \"md\",\n              children: [(approvalA === ApprovalState.NOT_APPROVED || approvalA === ApprovalState.PENDING || approvalB === ApprovalState.NOT_APPROVED || approvalB === ApprovalState.PENDING) && isValid && /*#__PURE__*/_jsxDEV(RowBetween, {\n                children: [approvalA !== ApprovalState.APPROVED && /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: approveACallback,\n                  disabled: approvalA === ApprovalState.PENDING,\n                  style: {\n                    width: approvalB !== ApprovalState.APPROVED ? '48%' : '100%'\n                  },\n                  children: approvalA === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(Dots, {\n                    children: [\"Approving \", (_currencies$Field$CUR9 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR9 === void 0 ? void 0 : _currencies$Field$CUR9.symbol]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 400,\n                    columnNumber: 31\n                  }, this) : `Approve ${(_currencies$Field$CUR10 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR10 === void 0 ? void 0 : _currencies$Field$CUR10.symbol}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 27\n                }, this), approvalB !== ApprovalState.APPROVED && /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: approveBCallback,\n                  disabled: approvalB === ApprovalState.PENDING,\n                  style: {\n                    width: approvalA !== ApprovalState.APPROVED ? '48%' : '100%'\n                  },\n                  children: approvalB === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(Dots, {\n                    children: [\"Approving \", (_currencies$Field$CUR11 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR11 === void 0 ? void 0 : _currencies$Field$CUR11.symbol]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 413,\n                    columnNumber: 31\n                  }, this) : `Approve ${(_currencies$Field$CUR12 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR12 === void 0 ? void 0 : _currencies$Field$CUR12.symbol}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  if (expertMode) {\n                    onAdd();\n                  } else {\n                    setShowConfirm(true);\n                  }\n                },\n                disabled: true,\n                variant: !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B] ? 'danger' : 'primary',\n                width: \"100%\",\n                children: error !== null && error !== void 0 ? error : \"You can't add liquidity on V1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), pair && !noLiquidity && pairState !== PairState.INVALID ? /*#__PURE__*/_jsxDEV(AutoColumn, {\n      style: {\n        minWidth: '20rem',\n        marginTop: '1rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(MinimalPositionCard, {\n        showUnwrapped: oneCurrencyIsWBNB,\n        pair: pair\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddLiquidity, \"GfMI8dKuIuixD0agZCrrOI5Kuao=\", false, function () {\n  return [useActiveWeb3React, useCurrency, useCurrency, useI18n, useIsExpertMode, useMintState, useDerivedMintInfo, useMintActionHandlers, useUserDeadline, useUserSlippageTolerance, useApproveCallback, useApproveCallback, useTransactionAdder];\n});\n\n_c = AddLiquidity;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLiquidity\");","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/src/pages/AddLiquidity/index.tsx"],"names":["React","useCallback","useState","BigNumber","currencyEquals","ETHER","WETH","Button","CardBody","AddIcon","Text","UIKitText","LightCard","AutoColumn","ColumnCenter","TransactionConfirmationModal","ConfirmationModalContent","CardNav","CurrencyInputPanel","DoubleCurrencyLogo","AddRemoveTabs","MinimalPositionCard","Row","RowBetween","RowFlat","PairState","useActiveWeb3React","useCurrency","ApprovalState","useApproveCallback","Field","useDerivedMintInfo","useMintActionHandlers","useMintState","useTransactionAdder","useIsExpertMode","useUserDeadline","useUserSlippageTolerance","calculateGasMargin","calculateSlippageAmount","getRouterContract","maxAmountSpend","wrappedCurrency","currencyId","Pane","Container","ConnectWalletButton","useI18n","AppBody","Dots","Wrapper","ConfirmAddModalBottom","PoolPriceBar","ROUTER_ADDRESS","AddLiquidity","match","params","currencyIdA","currencyIdB","history","account","chainId","library","currencyA","currencyB","TranslateString","oneCurrencyIsWBNB","Boolean","expertMode","independentField","typedValue","otherTypedValue","dependentField","currencies","pair","pairState","currencyBalances","parsedAmounts","price","noLiquidity","liquidityMinted","poolTokenPercentage","error","undefined","onFieldAInput","onFieldBInput","isValid","showConfirm","setShowConfirm","attemptingTxn","setAttemptingTxn","deadline","allowedSlippage","txHash","setTxHash","formattedAmounts","toSignificant","maxAmounts","CURRENCY_A","CURRENCY_B","reduce","accumulator","field","atMaxAmounts","equalTo","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","onAdd","router","parsedAmountA","parsedAmountB","amountsMin","deadlineFromNow","Math","ceil","Date","now","estimate","method","args","value","tokenBIsBNB","estimateGas","addLiquidityETH","address","raw","toString","from","addLiquidity","then","estimatedGasLimit","gasLimit","response","summary","symbol","hash","catch","e","code","console","modalHeader","marginTop","fontStyle","modalBottom","pendingText","handleCurrencyASelect","currA","newCurrencyIdA","push","handleCurrencyBSelect","currB","newCurrencyIdB","handleDismissConfirmation","toExact","INVALID","textTransform","fontWeight","NOT_APPROVED","PENDING","APPROVED","width","minWidth"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Currency, currencyEquals, ETHER, TokenAmount, WETH } from '@pancakeswap-libs/sdk'\nimport { Button, CardBody, AddIcon, Text as UIKitText } from '@pancakeswap-libs/uikit'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { LightCard } from 'components/Card'\nimport { AutoColumn, ColumnCenter } from 'components/Column'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/TransactionConfirmationModal'\nimport CardNav from 'components/CardNav'\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\nimport { AddRemoveTabs } from 'components/NavigationTabs'\nimport { MinimalPositionCard } from 'components/PositionCard'\nimport Row, { RowBetween, RowFlat } from 'components/Row'\n\nimport { PairState } from 'data/Reserves'\nimport { useActiveWeb3React } from 'hooks'\nimport { useCurrency } from 'hooks/Tokens'\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\nimport { Field } from 'state/mint/actions'\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from 'state/mint/hooks'\n\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { useIsExpertMode, useUserDeadline, useUserSlippageTolerance } from 'state/user/hooks'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from 'utils'\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { currencyId } from 'utils/currencyId'\nimport Pane from 'components/Pane'\nimport Container from 'components/Container'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport useI18n from 'hooks/useI18n'\nimport AppBody from '../AppBody'\nimport { Dots, Wrapper } from '../Pool/styleds'\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom'\nimport { PoolPriceBar } from './PoolPriceBar'\nimport { ROUTER_ADDRESS } from '../../constants'\n\nexport default function AddLiquidity({\n  match: {\n    params: { currencyIdA, currencyIdB },\n  },\n  history,\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\n  const { account, chainId, library } = useActiveWeb3React()\n  const currencyA = useCurrency(currencyIdA)\n  const currencyB = useCurrency(currencyIdB)\n  const TranslateString = useI18n()\n\n  const oneCurrencyIsWBNB = Boolean(\n    chainId &&\n      ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\n        (currencyB && currencyEquals(currencyB, WETH[chainId])))\n  )\n  const expertMode = useIsExpertMode()\n\n  // mint state\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\n\n  const isValid = !error\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\n\n  // txn values\n  const [deadline] = useUserDeadline() // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\n  const [txHash, setTxHash] = useState<string>('')\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  // get the max amounts user can add\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmountSpend(currencyBalances[field]),\n      }\n    },\n    {}\n  )\n\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\n    (accumulator, field) => {\n      return {\n        ...accumulator,\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\n      }\n    },\n    {}\n  )\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS)\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS)\n\n  const addTransaction = useTransactionAdder()\n\n  async function onAdd() {\n    if (!chainId || !library || !account) return\n    const router = getRouterContract(chainId, library, account)\n\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB) {\n      return\n    }\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\n    }\n\n    const deadlineFromNow = Math.ceil(Date.now() / 1000) + deadline\n\n    let estimate\n    let method: (...args: any) => Promise<TransactionResponse>\n    let args: Array<string | string[] | number>\n    let value: BigNumber | null\n    if (currencyA === ETHER || currencyB === ETHER) {\n      const tokenBIsBNB = currencyB === ETHER\n      estimate = router.estimateGas.addLiquidityETH\n      method = router.addLiquidityETH\n      args = [\n        wrappedCurrency(tokenBIsBNB ? currencyA : currencyB, chainId)?.address ?? '', // token\n        (tokenBIsBNB ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\n        amountsMin[tokenBIsBNB ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\n        amountsMin[tokenBIsBNB ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\n        account,\n        deadlineFromNow,\n      ]\n      value = BigNumber.from((tokenBIsBNB ? parsedAmountB : parsedAmountA).raw.toString())\n    } else {\n      estimate = router.estimateGas.addLiquidity\n      method = router.addLiquidity\n      args = [\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\n        parsedAmountA.raw.toString(),\n        parsedAmountB.raw.toString(),\n        amountsMin[Field.CURRENCY_A].toString(),\n        amountsMin[Field.CURRENCY_B].toString(),\n        account,\n        deadlineFromNow,\n      ]\n      value = null\n    }\n\n    setAttemptingTxn(true)\n    // const aa = await estimate(...args, value ? { value } : {})\n    await estimate(...args, value ? { value } : {})\n      .then((estimatedGasLimit) =>\n        method(...args, {\n          ...(value ? { value } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit),\n        }).then((response) => {\n          setAttemptingTxn(false)\n\n          addTransaction(response, {\n            summary: `Add ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\n              currencies[Field.CURRENCY_A]?.symbol\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencies[Field.CURRENCY_B]?.symbol}`,\n          })\n\n          setTxHash(response.hash)\n        })\n      )\n      .catch((e) => {\n        setAttemptingTxn(false)\n        // we only care if the error is something _other_ than the user rejected the tx\n        if (e?.code !== 4001) {\n          console.error(e)\n        }\n      })\n  }\n\n  const modalHeader = () => {\n    return noLiquidity ? (\n      <AutoColumn gap=\"20px\">\n        <LightCard mt=\"20px\" borderRadius=\"20px\">\n          <RowFlat>\n            <UIKitText fontSize=\"48px\" mr=\"8px\">\n              {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol}`}\n            </UIKitText>\n            <DoubleCurrencyLogo\n              currency0={currencies[Field.CURRENCY_A]}\n              currency1={currencies[Field.CURRENCY_B]}\n              size={30}\n            />\n          </RowFlat>\n        </LightCard>\n      </AutoColumn>\n    ) : (\n      <AutoColumn gap=\"20px\">\n        <RowFlat style={{ marginTop: '20px' }}>\n          <UIKitText fontSize=\"48px\" mr=\"8px\">\n            {liquidityMinted?.toSignificant(6)}\n          </UIKitText>\n          <DoubleCurrencyLogo\n            currency0={currencies[Field.CURRENCY_A]}\n            currency1={currencies[Field.CURRENCY_B]}\n            size={30}\n          />\n        </RowFlat>\n        <Row>\n          <UIKitText fontSize=\"24px\">\n            {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol} Pool Tokens`}\n          </UIKitText>\n        </Row>\n        <UIKitText small textAlign=\"left\" padding=\"8px 0 0 0 \" style={{ fontStyle: 'italic' }}>\n          {`Output is estimated. If the price changes by more than ${\n            allowedSlippage / 100\n          }% your transaction will revert.`}\n        </UIKitText>\n      </AutoColumn>\n    )\n  }\n\n  const modalBottom = () => {\n    return (\n      <ConfirmAddModalBottom\n        price={price}\n        currencies={currencies}\n        parsedAmounts={parsedAmounts}\n        noLiquidity={noLiquidity}\n        onAdd={onAdd}\n        poolTokenPercentage={poolTokenPercentage}\n      />\n    )\n  }\n\n  const pendingText = `Supplying ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} ${\n    currencies[Field.CURRENCY_A]?.symbol\n  } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} ${currencies[Field.CURRENCY_B]?.symbol}`\n\n  const handleCurrencyASelect = useCallback(\n    (currA: Currency) => {\n      const newCurrencyIdA = currencyId(currA)\n      if (newCurrencyIdA === currencyIdB) {\n        history.push(`/add/${currencyIdB}/${currencyIdA}`)\n      } else {\n        history.push(`/add/${newCurrencyIdA}/${currencyIdB}`)\n      }\n    },\n    [currencyIdB, history, currencyIdA]\n  )\n  const handleCurrencyBSelect = useCallback(\n    (currB: Currency) => {\n      const newCurrencyIdB = currencyId(currB)\n      if (currencyIdA === newCurrencyIdB) {\n        if (currencyIdB) {\n          history.push(`/add/${currencyIdB}/${newCurrencyIdB}`)\n        } else {\n          history.push(`/add/${newCurrencyIdB}`)\n        }\n      } else {\n        history.push(`/add/${currencyIdA || 'BNB'}/${newCurrencyIdB}`)\n      }\n    },\n    [currencyIdA, history, currencyIdB]\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false)\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('')\n    }\n    setTxHash('')\n  }, [onFieldAInput, txHash])\n\n  return (\n    <Container>\n      <CardNav activeIndex={1} />\n      <AppBody>\n        <AddRemoveTabs adding />\n        <Wrapper>\n          <TransactionConfirmationModal\n            isOpen={showConfirm}\n            onDismiss={handleDismissConfirmation}\n            attemptingTxn={attemptingTxn}\n            hash={txHash}\n            content={() => (\n              <ConfirmationModalContent\n                title={\n                  noLiquidity\n                    ? TranslateString(1154, 'You are creating a pool')\n                    : TranslateString(1156, 'You will receive')\n                }\n                onDismiss={handleDismissConfirmation}\n                topContent={modalHeader}\n                bottomContent={modalBottom}\n              />\n            )}\n            pendingText={pendingText}\n          />\n          <CardBody>\n            <AutoColumn gap=\"20px\">\n              {noLiquidity && (\n                <ColumnCenter>\n                  <Pane>\n                    <AutoColumn gap=\"12px\">\n                      <UIKitText>{TranslateString(1158, 'You are the first liquidity provider.')}</UIKitText>\n                      <UIKitText>\n                        {TranslateString(1160, 'The ratio of tokens you add will set the price of this pool.')}\n                      </UIKitText>\n                      <UIKitText>\n                        {TranslateString(1162, 'Once you are happy with the rate click supply to review.')}\n                      </UIKitText>\n                    </AutoColumn>\n                  </Pane>\n                </ColumnCenter>\n              )}\n              <CurrencyInputPanel\n                value={formattedAmounts[Field.CURRENCY_A]}\n                onUserInput={onFieldAInput}\n                onMax={() => {\n                  onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\n                }}\n                onCurrencySelect={handleCurrencyASelect}\n                showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\n                currency={currencies[Field.CURRENCY_A]}\n                id=\"add-liquidity-input-tokena\"\n                showCommonBases={false}\n              />\n              <ColumnCenter>\n                <AddIcon color=\"textSubtle\" />\n              </ColumnCenter>\n              <CurrencyInputPanel\n                value={formattedAmounts[Field.CURRENCY_B]}\n                onUserInput={onFieldBInput}\n                onCurrencySelect={handleCurrencyBSelect}\n                onMax={() => {\n                  onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\n                }}\n                showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\n                currency={currencies[Field.CURRENCY_B]}\n                id=\"add-liquidity-input-tokenb\"\n                showCommonBases={false}\n              />\n              {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\n                <div>\n                  <UIKitText\n                    style={{ textTransform: 'uppercase', fontWeight: 600 }}\n                    color=\"textSubtle\"\n                    fontSize=\"12px\"\n                    mb=\"2px\"\n                  >\n                    {noLiquidity\n                      ? TranslateString(1164, 'Initial prices and pool share')\n                      : TranslateString(1166, 'Prices and pool share')}\n                  </UIKitText>\n                  <Pane>\n                    <PoolPriceBar\n                      currencies={currencies}\n                      poolTokenPercentage={poolTokenPercentage}\n                      noLiquidity={noLiquidity}\n                      price={price}\n                    />\n                  </Pane>\n                </div>\n              )}\n\n              {!account ? (\n                <ConnectWalletButton width=\"100%\" />\n              ) : (\n                <AutoColumn gap=\"md\">\n                  {(approvalA === ApprovalState.NOT_APPROVED ||\n                    approvalA === ApprovalState.PENDING ||\n                    approvalB === ApprovalState.NOT_APPROVED ||\n                    approvalB === ApprovalState.PENDING) &&\n                    isValid && (\n                      <RowBetween>\n                        {approvalA !== ApprovalState.APPROVED && (\n                          <Button\n                            onClick={approveACallback}\n                            disabled={approvalA === ApprovalState.PENDING}\n                            style={{ width: approvalB !== ApprovalState.APPROVED ? '48%' : '100%' }}\n                          >\n                            {approvalA === ApprovalState.PENDING ? (\n                              <Dots>Approving {currencies[Field.CURRENCY_A]?.symbol}</Dots>\n                            ) : (\n                              `Approve ${currencies[Field.CURRENCY_A]?.symbol}`\n                            )}\n                          </Button>\n                        )}\n                        {approvalB !== ApprovalState.APPROVED && (\n                          <Button\n                            onClick={approveBCallback}\n                            disabled={approvalB === ApprovalState.PENDING}\n                            style={{ width: approvalA !== ApprovalState.APPROVED ? '48%' : '100%' }}\n                          >\n                            {approvalB === ApprovalState.PENDING ? (\n                              <Dots>Approving {currencies[Field.CURRENCY_B]?.symbol}</Dots>\n                            ) : (\n                              `Approve ${currencies[Field.CURRENCY_B]?.symbol}`\n                            )}\n                          </Button>\n                        )}\n                      </RowBetween>\n                    )}\n                  <Button\n                    onClick={() => {\n                      if (expertMode) {\n                        onAdd()\n                      } else {\n                        setShowConfirm(true)\n                      }\n                    }}\n                    disabled\n                    variant={\n                      !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n                        ? 'danger'\n                        : 'primary'\n                    }\n                    width=\"100%\"\n                  >\n                    {error ?? \"You can't add liquidity on V1\"}\n                  </Button>\n                </AutoColumn>\n              )}\n            </AutoColumn>\n          </CardBody>\n        </Wrapper>\n      </AppBody>\n      {pair && !noLiquidity && pairState !== PairState.INVALID ? (\n        <AutoColumn style={{ minWidth: '20rem', marginTop: '1rem' }}>\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWBNB} pair={pair} />\n        </AutoColumn>\n      ) : null}\n    </Container>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}