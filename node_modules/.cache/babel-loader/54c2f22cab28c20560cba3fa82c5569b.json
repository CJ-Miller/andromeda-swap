{"ast":null,"code":"var _jsxFileName = \"/Users/cj/Desktop/swap-attempts/swap2/src/ThemeContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ThemeProvider as SCThemeProvider } from 'styled-components';\nimport { light as lightBase, dark as darkBase } from '@pancakeswap-libs/uikit'; // customize light theme\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst light = lightBase;\nlight.card.background = '#f4f4f4'; // customize dark theme\n\nconst dark = darkBase;\ndark.card.background = '#111';\ndark.card.cardHeaderBackground = {\n  default: '#000000',\n  blue: '#000000',\n  violet: '#000000'\n};\ndark.nav.hover = '#131313';\nconst CACHE_KEY = 'IS_DARK';\nconst ThemeContext = /*#__PURE__*/React.createContext({\n  isDark: false,\n  toggleTheme: () => null\n});\n\nconst ThemeContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY);\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false;\n  });\n\n  const toggleTheme = () => {\n    setIsDark(prevState => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState));\n      return !prevState;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDark,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(SCThemeProvider, {\n      theme: isDark ? dark : light,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemeContextProvider, \"pAsbKUsFomXXiy7DBgXOCWI8VwY=\");\n\n_c = ThemeContextProvider;\nexport { ThemeContext, ThemeContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/src/ThemeContext.tsx"],"names":["React","useState","ThemeProvider","SCThemeProvider","light","lightBase","dark","darkBase","card","background","cardHeaderBackground","default","blue","violet","nav","hover","CACHE_KEY","ThemeContext","createContext","isDark","toggleTheme","ThemeContextProvider","children","setIsDark","isDarkUserSetting","localStorage","getItem","JSON","parse","prevState","setItem","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAa,IAAIC,eAA1B,QAAiD,mBAAjD;AACA,SAASC,KAAK,IAAIC,SAAlB,EAA6BC,IAAI,IAAIC,QAArC,QAAmE,yBAAnE,C,CAEA;;;AACA,MAAMH,KAAmB,GAAGC,SAA5B;AACAD,KAAK,CAACI,IAAN,CAAWC,UAAX,GAAwB,SAAxB,C,CAEA;;AACA,MAAMH,IAAkB,GAAGC,QAA3B;AACAD,IAAI,CAACE,IAAL,CAAUC,UAAV,GAAuB,MAAvB;AACAH,IAAI,CAACE,IAAL,CAAUE,oBAAV,GAAiC;AAC/BC,EAAAA,OAAO,EAAE,SADsB;AAE/BC,EAAAA,IAAI,EAAE,SAFyB;AAG/BC,EAAAA,MAAM,EAAE;AAHuB,CAAjC;AAKAP,IAAI,CAACQ,GAAL,CAASC,KAAT,GAAiB,SAAjB;AAEA,MAAMC,SAAS,GAAG,SAAlB;AAOA,MAAMC,YAAY,gBAAGjB,KAAK,CAACkB,aAAN,CAAsC;AAAEC,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,WAAW,EAAE,MAAM;AAApC,CAAtC,CAArB;;AAEA,MAAMC,oBAA8B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACvD,QAAM,CAACH,MAAD,EAASI,SAAT,IAAsBtB,QAAQ,CAAC,MAAM;AACzC,UAAMuB,iBAAiB,GAAGC,YAAY,CAACC,OAAb,CAAqBV,SAArB,CAA1B;AACA,WAAOQ,iBAAiB,GAAGG,IAAI,CAACC,KAAL,CAAWJ,iBAAX,CAAH,GAAmC,KAA3D;AACD,GAHmC,CAApC;;AAKA,QAAMJ,WAAW,GAAG,MAAM;AACxBG,IAAAA,SAAS,CAAEM,SAAD,IAAoB;AAC5BJ,MAAAA,YAAY,CAACK,OAAb,CAAqBd,SAArB,EAAgCW,IAAI,CAACI,SAAL,CAAe,CAACF,SAAhB,CAAhC;AACA,aAAO,CAACA,SAAR;AACD,KAHQ,CAAT;AAID,GALD;;AAOA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEV,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAA9B;AAAA,2BACE,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAED,MAAM,GAAGb,IAAH,GAAUF,KAAxC;AAAA,gBAAgDkB;AAAhD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAlBD;;GAAMD,oB;;KAAAA,oB;AAoBN,SAASJ,YAAT,EAAuBI,oBAAvB","sourcesContent":["import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light as lightBase, dark as darkBase, PancakeTheme } from '@pancakeswap-libs/uikit'\n\n// customize light theme\nconst light: PancakeTheme = lightBase\nlight.card.background = '#f4f4f4'\n\n// customize dark theme\nconst dark: PancakeTheme = darkBase\ndark.card.background = '#111'\ndark.card.cardHeaderBackground = {\n  default: '#000000',\n  blue: '#000000',\n  violet: '#000000',\n}\ndark.nav.hover = '#131313'\n\nconst CACHE_KEY = 'IS_DARK'\n\nexport interface ThemeContextType {\n  isDark: boolean\n  toggleTheme: () => void\n}\n\nconst ThemeContext = React.createContext<ThemeContextType>({ isDark: false, toggleTheme: () => null })\n\nconst ThemeContextProvider: React.FC = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState: any) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n"]},"metadata":{},"sourceType":"module"}