{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nimport { namehash } from 'ethers/lib/utils';\nconst REGISTRAR_ABI = [{\n  constant: true,\n  inputs: [{\n    name: 'node',\n    type: 'bytes32'\n  }],\n  name: 'resolver',\n  outputs: [{\n    name: 'resolverAddress',\n    type: 'address'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}];\nconst REGISTRAR_ADDRESS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e';\nconst RESOLVER_ABI = [{\n  constant: true,\n  inputs: [{\n    internalType: 'bytes32',\n    name: 'node',\n    type: 'bytes32'\n  }],\n  name: 'contenthash',\n  outputs: [{\n    internalType: 'bytes',\n    name: '',\n    type: 'bytes'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}]; // cache the resolver contracts since most of them are the public resolver\n\nfunction resolverContract(resolverAddress, provider) {\n  return new Contract(resolverAddress, RESOLVER_ABI, provider);\n}\n/**\n * Fetches and decodes the result of an ENS contenthash lookup on mainnet to a URI\n * @param ensName to resolve\n * @param provider provider to use to fetch the data\n */\n\n\nexport default async function resolveENSContentHash(ensName, provider) {\n  const ensRegistrarContract = new Contract(REGISTRAR_ADDRESS, REGISTRAR_ABI, provider);\n  const hash = namehash(ensName);\n  const resolverAddress = await ensRegistrarContract.resolver(hash);\n  return resolverContract(resolverAddress, provider).contenthash(hash);\n}","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/utils/resolveENSContentHash.ts"],"names":["Contract","namehash","REGISTRAR_ABI","constant","inputs","name","type","outputs","payable","stateMutability","REGISTRAR_ADDRESS","RESOLVER_ABI","internalType","resolverContract","resolverAddress","provider","resolveENSContentHash","ensName","ensRegistrarContract","hash","resolver","contenthash"],"mappings":"AAAA,SAASA,QAAT,QAAyB,0BAAzB;AAEA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,MAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,QAAQ,EAAE,IADZ;AAEEC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADM,CAFV;AAQED,EAAAA,IAAI,EAAE,UARR;AASEE,EAAAA,OAAO,EAAE,CACP;AACEF,IAAAA,IAAI,EAAE,iBADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADO,CATX;AAeEE,EAAAA,OAAO,EAAE,KAfX;AAgBEC,EAAAA,eAAe,EAAE,MAhBnB;AAiBEH,EAAAA,IAAI,EAAE;AAjBR,CADoB,CAAtB;AAqBA,MAAMI,iBAAiB,GAAG,4CAA1B;AAEA,MAAMC,YAAY,GAAG,CACnB;AACER,EAAAA,QAAQ,EAAE,IADZ;AAEEC,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,YAAY,EAAE,SADhB;AAEEP,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,aATR;AAUEE,EAAAA,OAAO,EAAE,CACP;AACEK,IAAAA,YAAY,EAAE,OADhB;AAEEP,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAVX;AAiBEE,EAAAA,OAAO,EAAE,KAjBX;AAkBEC,EAAAA,eAAe,EAAE,MAlBnB;AAmBEH,EAAAA,IAAI,EAAE;AAnBR,CADmB,CAArB,C,CAwBA;;AACA,SAASO,gBAAT,CAA0BC,eAA1B,EAAmDC,QAAnD,EAAiF;AAC/E,SAAO,IAAIf,QAAJ,CAAac,eAAb,EAA8BH,YAA9B,EAA4CI,QAA5C,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,eAAe,eAAeC,qBAAf,CAAqCC,OAArC,EAAsDF,QAAtD,EAA2F;AACxG,QAAMG,oBAAoB,GAAG,IAAIlB,QAAJ,CAAaU,iBAAb,EAAgCR,aAAhC,EAA+Ca,QAA/C,CAA7B;AACA,QAAMI,IAAI,GAAGlB,QAAQ,CAACgB,OAAD,CAArB;AACA,QAAMH,eAAe,GAAG,MAAMI,oBAAoB,CAACE,QAArB,CAA8BD,IAA9B,CAA9B;AACA,SAAON,gBAAgB,CAACC,eAAD,EAAkBC,QAAlB,CAAhB,CAA4CM,WAA5C,CAAwDF,IAAxD,CAAP;AACD","sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { Provider } from '@ethersproject/abstract-provider'\nimport { namehash } from 'ethers/lib/utils'\n\nconst REGISTRAR_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: 'node',\n        type: 'bytes32'\n      }\n    ],\n    name: 'resolver',\n    outputs: [\n      {\n        name: 'resolverAddress',\n        type: 'address'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  }\n]\nconst REGISTRAR_ADDRESS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n\nconst RESOLVER_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32'\n      }\n    ],\n    name: 'contenthash',\n    outputs: [\n      {\n        internalType: 'bytes',\n        name: '',\n        type: 'bytes'\n      }\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  }\n]\n\n// cache the resolver contracts since most of them are the public resolver\nfunction resolverContract(resolverAddress: string, provider: Provider): Contract {\n  return new Contract(resolverAddress, RESOLVER_ABI, provider)\n}\n\n/**\n * Fetches and decodes the result of an ENS contenthash lookup on mainnet to a URI\n * @param ensName to resolve\n * @param provider provider to use to fetch the data\n */\nexport default async function resolveENSContentHash(ensName: string, provider: Provider): Promise<string> {\n  const ensRegistrarContract = new Contract(REGISTRAR_ADDRESS, REGISTRAR_ABI, provider)\n  const hash = namehash(ensName)\n  const resolverAddress = await ensRegistrarContract.resolver(hash)\n  return resolverContract(resolverAddress, provider).contenthash(hash)\n}\n"]},"metadata":{},"sourceType":"module"}