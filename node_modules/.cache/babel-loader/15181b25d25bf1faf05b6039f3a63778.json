{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { connectorLocalStorageKey } from '@blzd-dev/uikitikit';\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core'; // eslint-disable-next-line import/no-unresolved\n\nimport { useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { injected } from '../connectors';\nimport { NetworkContextName } from '../constants';\nexport function useActiveWeb3React() {\n  _s();\n\n  const context = useWeb3ReactCore();\n  const contextNetwork = useWeb3ReactCore(NetworkContextName);\n  return context.active ? context : contextNetwork;\n}\n\n_s(useActiveWeb3React, \"WFPFKE/y5H/nwl1Zbqr6M/3MM8c=\", false, function () {\n  return [useWeb3ReactCore, useWeb3ReactCore];\n});\n\nexport function useEagerConnect() {\n  _s2();\n\n  const {\n    activate,\n    active\n  } = useWeb3ReactCore(); // specifically using useWeb3ReactCore because of what this hook does\n\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      const hasSignedIn = window.localStorage.getItem(connectorLocalStorageKey);\n\n      if (isAuthorized && hasSignedIn) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else if (isMobile && window.ethereum && hasSignedIn) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\n\n_s2(useEagerConnect, \"Bhmb87TsYv+f2WbPhdXmj7sGsFM=\", false, function () {\n  return [useWeb3ReactCore];\n});\n\nexport function useInactiveListener(suppress = false) {\n  _s3();\n\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3ReactCore(); // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch(e => {\n          console.error('Failed to activate after chain changed', e);\n        });\n      };\n\n      const handleAccountsChanged = accounts => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(e => {\n            console.error('Failed to activate after accounts changed', e);\n          });\n        }\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        }\n      };\n    }\n\n    return undefined;\n  }, [active, error, suppress, activate]);\n}\n\n_s3(useInactiveListener, \"jN4RZ0OvqgaQw3T0lu1/qJ1z0K8=\", false, function () {\n  return [useWeb3ReactCore];\n});","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/hooks/index.ts"],"names":["connectorLocalStorageKey","useWeb3React","useWeb3ReactCore","useEffect","useState","isMobile","injected","NetworkContextName","useActiveWeb3React","context","contextNetwork","active","useEagerConnect","activate","tried","setTried","isAuthorized","then","hasSignedIn","window","localStorage","getItem","undefined","catch","ethereum","useInactiveListener","suppress","error","on","handleChainChanged","e","console","handleAccountsChanged","accounts","length","removeListener"],"mappings":";;;;AAEA,SAASA,wBAAT,QAAyC,qBAAzC;AACA,SAASC,YAAY,IAAIC,gBAAzB,QAAiD,kBAAjD,C,CACA;;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,kBAAT,QAAmC,cAAnC;AAEA,OAAO,SAASC,kBAAT,GAA+F;AAAA;;AACpG,QAAMC,OAAO,GAAGP,gBAAgB,EAAhC;AACA,QAAMQ,cAAc,GAAGR,gBAAgB,CAAeK,kBAAf,CAAvC;AACA,SAAOE,OAAO,CAACE,MAAR,GAAiBF,OAAjB,GAA2BC,cAAlC;AACD;;GAJeF,kB;UACEN,gB,EACOA,gB;;;AAIzB,OAAO,SAASU,eAAT,GAA2B;AAAA;;AAChC,QAAM;AAAEC,IAAAA,QAAF;AAAYF,IAAAA;AAAZ,MAAuBT,gBAAgB,EAA7C,CADgC,CACgB;;AAChD,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,QAAQ,CAACU,YAAT,GAAwBC,IAAxB,CAA8BD,YAAD,IAAkB;AAC7C,YAAME,WAAW,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BrB,wBAA5B,CAApB;;AACA,UAAIgB,YAAY,IAAIE,WAApB,EAAiC;AAC/BL,QAAAA,QAAQ,CAACP,QAAD,EAAWgB,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0C,MAAM;AAC9CR,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,SAFD;AAGD,OAJD,MAIO,IAAIV,QAAQ,IAAIc,MAAM,CAACK,QAAnB,IAA+BN,WAAnC,EAAgD;AACrDL,QAAAA,QAAQ,CAACP,QAAD,EAAWgB,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0C,MAAM;AAC9CR,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,SAFD;AAGD,OAJM,MAIA;AACLA,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KAbD;AAcD,GAfQ,EAeN,CAACF,QAAD,CAfM,CAAT,CAJgC,CAmBjB;AAEf;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,MAAJ,EAAY;AACVI,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACJ,MAAD,CAJM,CAAT;AAMA,SAAOG,KAAP;AACD;AAED;AACA;AACA;AACA;;IAlCgBF,e;UACeV,gB;;;AAkC/B,OAAO,SAASuB,mBAAT,CAA6BC,QAAQ,GAAG,KAAxC,EAA+C;AAAA;;AACpD,QAAM;AAAEf,IAAAA,MAAF;AAAUgB,IAAAA,KAAV;AAAiBd,IAAAA;AAAjB,MAA8BX,gBAAgB,EAApD,CADoD,CACG;;AAEvDC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEqB,MAAAA;AAAF,QAAeL,MAArB;;AAEA,QAAIK,QAAQ,IAAIA,QAAQ,CAACI,EAArB,IAA2B,CAACjB,MAA5B,IAAsC,CAACgB,KAAvC,IAAgD,CAACD,QAArD,EAA+D;AAC7D,YAAMG,kBAAkB,GAAG,MAAM;AAC/B;AACAhB,QAAAA,QAAQ,CAACP,QAAD,EAAWgB,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA2CO,CAAD,IAAO;AAC/CC,UAAAA,OAAO,CAACJ,KAAR,CAAc,wCAAd,EAAwDG,CAAxD;AACD,SAFD;AAGD,OALD;;AAOA,YAAME,qBAAqB,GAAIC,QAAD,IAAwB;AACpD,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvB;AACArB,UAAAA,QAAQ,CAACP,QAAD,EAAWgB,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA2CO,CAAD,IAAO;AAC/CC,YAAAA,OAAO,CAACJ,KAAR,CAAc,2CAAd,EAA2DG,CAA3D;AACD,WAFD;AAGD;AACF,OAPD;;AASAN,MAAAA,QAAQ,CAACI,EAAT,CAAY,cAAZ,EAA4BC,kBAA5B;AACAL,MAAAA,QAAQ,CAACI,EAAT,CAAY,iBAAZ,EAA+BI,qBAA/B;AAEA,aAAO,MAAM;AACX,YAAIR,QAAQ,CAACW,cAAb,EAA6B;AAC3BX,UAAAA,QAAQ,CAACW,cAAT,CAAwB,cAAxB,EAAwCN,kBAAxC;AACAL,UAAAA,QAAQ,CAACW,cAAT,CAAwB,iBAAxB,EAA2CH,qBAA3C;AACD;AACF,OALD;AAMD;;AACD,WAAOV,SAAP;AACD,GA/BQ,EA+BN,CAACX,MAAD,EAASgB,KAAT,EAAgBD,QAAhB,EAA0Bb,QAA1B,CA/BM,CAAT;AAgCD;;IAnCeY,mB;UACsBvB,gB","sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { ChainId } from '@pancakeswap-libs/sdk'\nimport { connectorLocalStorageKey } from '@blzd-dev/uikitikit'\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core'\n// eslint-disable-next-line import/no-unresolved\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\nimport { useEffect, useState } from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { injected } from '../connectors'\nimport { NetworkContextName } from '../constants'\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3ReactCore<Web3Provider>()\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3ReactCore() // specifically using useWeb3ReactCore because of what this hook does\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized) => {\n      const hasSignedIn = window.localStorage.getItem(connectorLocalStorageKey)\n      if (isAuthorized && hasSignedIn) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else if (isMobile && window.ethereum && hasSignedIn) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true)\n    }\n  }, [active])\n\n  return tried\n}\n\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3ReactCore() // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const { ethereum } = window\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch((e) => {\n          console.error('Failed to activate after chain changed', e)\n        })\n      }\n\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch((e) => {\n            console.error('Failed to activate after accounts changed', e)\n          })\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n    return undefined\n  }, [active, error, suppress, activate])\n}\n"]},"metadata":{},"sourceType":"module"}