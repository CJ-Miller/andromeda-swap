{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport useGetPriceData from './useGetPriceData';\nimport { CAKE } from '../constants';\n\nconst useGetDocumentTitlePrice = () => {\n  _s();\n\n  const priceData = useGetPriceData();\n  const cakePriceUsd = priceData ? parseFloat(priceData.data[CAKE.address].price) : 0;\n  const cakePriceUsdString = Number.isNaN(cakePriceUsd) || cakePriceUsd === 0 ? '' : ` - $${cakePriceUsd.toLocaleString(undefined, {\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 3\n  })}`;\n  useEffect(() => {\n    document.title = `PancakeSwap${cakePriceUsdString}`;\n  }, [cakePriceUsdString]);\n};\n\n_s(useGetDocumentTitlePrice, \"RKxTg47fbxWr8YqZdhpZxHrLMxs=\", false, function () {\n  return [useGetPriceData];\n});\n\nexport default useGetDocumentTitlePrice;","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/src/hooks/useGetDocumentTitlePrice.ts"],"names":["useEffect","useGetPriceData","CAKE","useGetDocumentTitlePrice","priceData","cakePriceUsd","parseFloat","data","address","price","cakePriceUsdString","Number","isNaN","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","document","title"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,IAAT,QAAqB,cAArB;;AAEA,MAAMC,wBAAwB,GAAG,MAAM;AAAA;;AACrC,QAAMC,SAAS,GAAGH,eAAe,EAAjC;AAEA,QAAMI,YAAY,GAAGD,SAAS,GAAGE,UAAU,CAACF,SAAS,CAACG,IAAV,CAAeL,IAAI,CAACM,OAApB,EAA6BC,KAA9B,CAAb,GAAoD,CAAlF;AAEA,QAAMC,kBAAkB,GACtBC,MAAM,CAACC,KAAP,CAAaP,YAAb,KAA8BA,YAAY,KAAK,CAA/C,GACI,EADJ,GAEK,OAAMA,YAAY,CAACQ,cAAb,CAA4BC,SAA5B,EAAuC;AAC5CC,IAAAA,qBAAqB,EAAE,CADqB;AAE5CC,IAAAA,qBAAqB,EAAE;AAFqB,GAAvC,CAGJ,EANT;AAQAhB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,QAAQ,CAACC,KAAT,GAAkB,cAAaR,kBAAmB,EAAlD;AACD,GAFQ,EAEN,CAACA,kBAAD,CAFM,CAAT;AAGD,CAhBD;;GAAMP,wB;UACcF,e;;;AAgBpB,eAAeE,wBAAf","sourcesContent":["import { useEffect } from 'react'\nimport useGetPriceData from './useGetPriceData'\nimport { CAKE } from '../constants'\n\nconst useGetDocumentTitlePrice = () => {\n  const priceData = useGetPriceData()\n\n  const cakePriceUsd = priceData ? parseFloat(priceData.data[CAKE.address].price) : 0\n\n  const cakePriceUsdString =\n    Number.isNaN(cakePriceUsd) || cakePriceUsd === 0\n      ? ''\n      : ` - $${cakePriceUsd.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })}`\n\n  useEffect(() => {\n    document.title = `PancakeSwap${cakePriceUsdString}`\n  }, [cakePriceUsdString])\n}\nexport default useGetDocumentTitlePrice\n"]},"metadata":{},"sourceType":"module"}