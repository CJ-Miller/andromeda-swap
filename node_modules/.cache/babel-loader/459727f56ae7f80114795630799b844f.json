{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { CurrencyAmount, ETHER, JSBI, Percent, Price } from '@pancakeswap-libs/sdk';\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PairState, usePair } from '../../data/Reserves';\nimport { useTotalSupply } from '../../data/TotalSupply';\nimport { useActiveWeb3React } from '../../hooks';\nimport { TranslateString } from '../../utils/translateTextHelpers';\nimport { wrappedCurrency, wrappedCurrencyAmount } from '../../utils/wrappedCurrency';\nimport { tryParseAmount } from '../swap/hooks';\nimport { useCurrencyBalances } from '../wallet/hooks';\nimport { Field, typeInput } from './actions';\nconst ZERO = JSBI.BigInt(0);\nexport function useMintState() {\n  _s();\n\n  return useSelector(state => state.mint);\n}\n\n_s(useMintState, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useDerivedMintInfo(currencyA, currencyB) {\n  _s2();\n\n  var _currencyBalances$Fie, _currencyBalances$Fie2;\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const {\n    independentField,\n    typedValue,\n    otherTypedValue\n  } = useMintState();\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A; // tokens\n\n  const currencies = useMemo(() => ({\n    [Field.CURRENCY_A]: currencyA !== null && currencyA !== void 0 ? currencyA : undefined,\n    [Field.CURRENCY_B]: currencyB !== null && currencyB !== void 0 ? currencyB : undefined\n  }), [currencyA, currencyB]); // pair\n\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]);\n  const totalSupply = useTotalSupply(pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  const noLiquidity = pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO)); // balances\n\n  const balances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, [currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]]);\n  const currencyBalances = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1]\n  }; // amounts\n\n  const independentAmount = tryParseAmount(typedValue, currencies[independentField]);\n  const dependentAmount = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField]);\n      }\n\n      return undefined;\n    }\n\n    if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId);\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)];\n\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA;\n        const dependentTokenAmount = dependentField === Field.CURRENCY_B ? pair.priceOf(tokenA).quote(wrappedIndependentAmount) : pair.priceOf(tokenB).quote(wrappedIndependentAmount);\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount;\n      }\n\n      return undefined;\n    }\n\n    return undefined;\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const parsedAmounts = {\n    [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n    [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount\n  };\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const {\n        [Field.CURRENCY_A]: currencyAAmount,\n        [Field.CURRENCY_B]: currencyBAmount\n      } = parsedAmounts;\n\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw);\n      }\n\n      return undefined;\n    }\n\n    const wrappedCurrencyA = wrappedCurrency(currencyA, chainId);\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined;\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts]); // liquidity minted\n\n  const liquidityMinted = useMemo(() => {\n    const {\n      [Field.CURRENCY_A]: currencyAAmount,\n      [Field.CURRENCY_B]: currencyBAmount\n    } = parsedAmounts;\n    const [tokenAmountA, tokenAmountB] = [wrappedCurrencyAmount(currencyAAmount, chainId), wrappedCurrencyAmount(currencyBAmount, chainId)];\n\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB);\n    }\n\n    return undefined;\n  }, [parsedAmounts, chainId, pair, totalSupply]);\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw);\n    }\n\n    return undefined;\n  }, [liquidityMinted, totalSupply]);\n  let error;\n\n  if (!account) {\n    error = 'Connect Wallet';\n  }\n\n  if (pairState === PairState.INVALID) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : TranslateString(136, 'Invalid pair');\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    var _error2;\n\n    error = (_error2 = error) !== null && _error2 !== void 0 ? _error2 : TranslateString(84, 'Enter an amount');\n  }\n\n  const {\n    [Field.CURRENCY_A]: currencyAAmount,\n    [Field.CURRENCY_B]: currencyBAmount\n  } = parsedAmounts;\n\n  if (currencyAAmount && (currencyBalances === null || currencyBalances === void 0 ? void 0 : (_currencyBalances$Fie = currencyBalances[Field.CURRENCY_A]) === null || _currencyBalances$Fie === void 0 ? void 0 : _currencyBalances$Fie.lessThan(currencyAAmount))) {\n    var _currencies$Field$CUR;\n\n    error = `Insufficient ${(_currencies$Field$CUR = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR === void 0 ? void 0 : _currencies$Field$CUR.symbol} balance`;\n  }\n\n  if (currencyBAmount && (currencyBalances === null || currencyBalances === void 0 ? void 0 : (_currencyBalances$Fie2 = currencyBalances[Field.CURRENCY_B]) === null || _currencyBalances$Fie2 === void 0 ? void 0 : _currencyBalances$Fie2.lessThan(currencyBAmount))) {\n    var _currencies$Field$CUR2;\n\n    error = `Insufficient ${(_currencies$Field$CUR2 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR2 === void 0 ? void 0 : _currencies$Field$CUR2.symbol} balance`;\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  };\n}\n\n_s2(useDerivedMintInfo, \"6d+04DJuG6/sZ0FrWwfhaQF3Dc4=\", false, function () {\n  return [useActiveWeb3React, useMintState, usePair, useTotalSupply, useCurrencyBalances];\n});\n\nexport function useMintActionHandlers(noLiquidity) {\n  _s3();\n\n  const dispatch = useDispatch();\n  const onFieldAInput = useCallback(typedValue => {\n    dispatch(typeInput({\n      field: Field.CURRENCY_A,\n      typedValue,\n      noLiquidity: noLiquidity === true\n    }));\n  }, [dispatch, noLiquidity]);\n  const onFieldBInput = useCallback(typedValue => {\n    dispatch(typeInput({\n      field: Field.CURRENCY_B,\n      typedValue,\n      noLiquidity: noLiquidity === true\n    }));\n  }, [dispatch, noLiquidity]);\n  return {\n    onFieldAInput,\n    onFieldBInput\n  };\n}\n\n_s3(useMintActionHandlers, \"WFlKWyC0ve3B69CG338SnuQ6XIY=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/state/mint/hooks.ts"],"names":["CurrencyAmount","ETHER","JSBI","Percent","Price","useCallback","useMemo","useDispatch","useSelector","PairState","usePair","useTotalSupply","useActiveWeb3React","TranslateString","wrappedCurrency","wrappedCurrencyAmount","tryParseAmount","useCurrencyBalances","Field","typeInput","ZERO","BigInt","useMintState","state","mint","useDerivedMintInfo","currencyA","currencyB","account","chainId","independentField","typedValue","otherTypedValue","dependentField","CURRENCY_A","CURRENCY_B","currencies","undefined","pairState","pair","totalSupply","liquidityToken","noLiquidity","NOT_EXISTS","Boolean","equal","raw","balances","currencyBalances","independentAmount","dependentAmount","wrappedIndependentAmount","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","ether","parsedAmounts","price","currencyAAmount","currencyBAmount","currency","wrappedCurrencyA","liquidityMinted","tokenAmountA","tokenAmountB","getLiquidityMinted","poolTokenPercentage","add","error","INVALID","lessThan","symbol","useMintActionHandlers","dispatch","onFieldAInput","field","onFieldBInput"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, ETHER, JSBI, Pair, Percent, Price, TokenAmount } from '@pancakeswap-libs/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { PairState, usePair } from '../../data/Reserves'\nimport { useTotalSupply } from '../../data/TotalSupply'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { TranslateString } from '../../utils/translateTextHelpers'\nimport { wrappedCurrency, wrappedCurrencyAmount } from '../../utils/wrappedCurrency'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nconst ZERO = JSBI.BigInt(0)\n\nexport function useMintState(): AppState['mint'] {\n  return useSelector<AppState, AppState['mint']>((state) => state.mint)\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  price?: Price\n  noLiquidity?: boolean\n  liquidityMinted?: TokenAmount\n  poolTokenPercentage?: Percent\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined,\n    }),\n    [currencyA, currencyB]\n  )\n\n  // pair\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO))\n\n  // balances\n  const balances = useCurrencyBalances(account ?? undefined, [\n    currencies[Field.CURRENCY_A],\n    currencies[Field.CURRENCY_B],\n  ])\n  const currencyBalances: { [field in Field]?: CurrencyAmount } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1],\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount | undefined = tryParseAmount(typedValue, currencies[independentField])\n  const dependentAmount: CurrencyAmount | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\n      }\n      return undefined\n    }\n    if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId)\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount\n      }\n      return undefined\n    }\n    return undefined\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair])\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const parsedAmounts: { [field in Field]: CurrencyAmount | undefined } = {\n    [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n    [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\n  }\n\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw)\n      }\n      return undefined\n    }\n    const wrappedCurrencyA = wrappedCurrency(currencyA, chainId)\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [\n      wrappedCurrencyAmount(currencyAAmount, chainId),\n      wrappedCurrencyAmount(currencyBAmount, chainId),\n    ]\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n    }\n    return undefined\n  }, [parsedAmounts, chainId, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\n    }\n    return undefined\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  if (!account) {\n    error = 'Connect Wallet'\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? TranslateString(136, 'Invalid pair')\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? TranslateString(84, 'Enter an amount')\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    error = `Insufficient ${currencies[Field.CURRENCY_A]?.symbol} balance`\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    error = `Insufficient ${currencies[Field.CURRENCY_B]?.symbol} balance`\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error,\n  }\n}\n\nexport function useMintActionHandlers(\n  noLiquidity: boolean | undefined\n): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}