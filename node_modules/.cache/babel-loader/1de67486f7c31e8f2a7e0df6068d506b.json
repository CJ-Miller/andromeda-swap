{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPlainObject = exports.clone = exports.recursive = exports.merge = exports.main = void 0;\nmodule.exports = exports = main;\nexports.default = main;\n\nfunction main() {\n  var items = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    items[_i] = arguments[_i];\n  }\n\n  return merge.apply(void 0, items);\n}\n\nexports.main = main;\nmain.clone = clone;\nmain.isPlainObject = isPlainObject;\nmain.recursive = recursive;\n\nfunction merge() {\n  var items = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    items[_i] = arguments[_i];\n  }\n\n  return _merge(items[0] === true, false, items);\n}\n\nexports.merge = merge;\n\nfunction recursive() {\n  var items = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    items[_i] = arguments[_i];\n  }\n\n  return _merge(items[0] === true, true, items);\n}\n\nexports.recursive = recursive;\n\nfunction clone(input) {\n  if (Array.isArray(input)) {\n    var output = [];\n\n    for (var index = 0; index < input.length; ++index) output.push(clone(input[index]));\n\n    return output;\n  } else if (isPlainObject(input)) {\n    var output = {};\n\n    for (var index in input) output[index] = clone(input[index]);\n\n    return output;\n  } else {\n    return input;\n  }\n}\n\nexports.clone = clone;\n\nfunction isPlainObject(input) {\n  return input && typeof input === 'object' && !Array.isArray(input);\n}\n\nexports.isPlainObject = isPlainObject;\n\nfunction _recursiveMerge(base, extend) {\n  if (!isPlainObject(base)) return extend;\n\n  for (var key in extend) {\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') continue;\n    base[key] = isPlainObject(base[key]) && isPlainObject(extend[key]) ? _recursiveMerge(base[key], extend[key]) : extend[key];\n  }\n\n  return base;\n}\n\nfunction _merge(isClone, isRecursive, items) {\n  var result;\n  if (isClone || !isPlainObject(result = items.shift())) result = {};\n\n  for (var index = 0; index < items.length; ++index) {\n    var item = items[index];\n    if (!isPlainObject(item)) continue;\n\n    for (var key in item) {\n      if (key === '__proto__' || key === 'constructor' || key === 'prototype') continue;\n      var value = isClone ? clone(item[key]) : item[key];\n      result[key] = isRecursive ? _recursiveMerge(result[key], value) : value;\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/node_modules/merge/lib/src/index.js"],"names":["Object","defineProperty","exports","value","isPlainObject","clone","recursive","merge","main","module","default","items","_i","arguments","length","apply","_merge","input","Array","isArray","output","index","push","_recursiveMerge","base","extend","key","isClone","isRecursive","result","shift","item"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isPlainObject = exports.clone = exports.recursive = exports.merge = exports.main = void 0;\r\nmodule.exports = exports = main;\r\nexports.default = main;\r\nfunction main() {\r\n    var items = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        items[_i] = arguments[_i];\r\n    }\r\n    return merge.apply(void 0, items);\r\n}\r\nexports.main = main;\r\nmain.clone = clone;\r\nmain.isPlainObject = isPlainObject;\r\nmain.recursive = recursive;\r\nfunction merge() {\r\n    var items = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        items[_i] = arguments[_i];\r\n    }\r\n    return _merge(items[0] === true, false, items);\r\n}\r\nexports.merge = merge;\r\nfunction recursive() {\r\n    var items = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        items[_i] = arguments[_i];\r\n    }\r\n    return _merge(items[0] === true, true, items);\r\n}\r\nexports.recursive = recursive;\r\nfunction clone(input) {\r\n    if (Array.isArray(input)) {\r\n        var output = [];\r\n        for (var index = 0; index < input.length; ++index)\r\n            output.push(clone(input[index]));\r\n        return output;\r\n    }\r\n    else if (isPlainObject(input)) {\r\n        var output = {};\r\n        for (var index in input)\r\n            output[index] = clone(input[index]);\r\n        return output;\r\n    }\r\n    else {\r\n        return input;\r\n    }\r\n}\r\nexports.clone = clone;\r\nfunction isPlainObject(input) {\r\n    return input && typeof input === 'object' && !Array.isArray(input);\r\n}\r\nexports.isPlainObject = isPlainObject;\r\nfunction _recursiveMerge(base, extend) {\r\n    if (!isPlainObject(base))\r\n        return extend;\r\n    for (var key in extend) {\r\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype')\r\n            continue;\r\n        base[key] = (isPlainObject(base[key]) && isPlainObject(extend[key])) ?\r\n            _recursiveMerge(base[key], extend[key]) :\r\n            extend[key];\r\n    }\r\n    return base;\r\n}\r\nfunction _merge(isClone, isRecursive, items) {\r\n    var result;\r\n    if (isClone || !isPlainObject(result = items.shift()))\r\n        result = {};\r\n    for (var index = 0; index < items.length; ++index) {\r\n        var item = items[index];\r\n        if (!isPlainObject(item))\r\n            continue;\r\n        for (var key in item) {\r\n            if (key === '__proto__' || key === 'constructor' || key === 'prototype')\r\n                continue;\r\n            var value = isClone ? clone(item[key]) : item[key];\r\n            result[key] = isRecursive ? _recursiveMerge(result[key], value) : value;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}