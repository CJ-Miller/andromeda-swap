{"ast":null,"code":"var _jsxFileName = \"/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/pages/Swap/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { JSBI, Token } from '@pancakeswap-libs/sdk';\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { ArrowDown } from 'react-feather';\nimport { CardBody, ArrowDownIcon, Button, IconButton, Text, Link, Flex } from '@pancakeswap-libs/uikit';\nimport styled, { ThemeContext } from 'styled-components';\nimport AddressInputPanel from 'components/AddressInputPanel';\nimport Card, { GreyCard } from 'components/Card';\nimport { AutoColumn } from 'components/Column';\nimport ConfirmSwapModal from 'components/swap/ConfirmSwapModal';\nimport CurrencyInputPanel from 'components/CurrencyInputPanel';\nimport CardNav from 'components/CardNav';\nimport { AutoRow, RowBetween } from 'components/Row';\nimport AdvancedSwapDetailsDropdown from 'components/swap/AdvancedSwapDetailsDropdown';\nimport confirmPriceImpactWithoutFee from 'components/swap/confirmPriceImpactWithoutFee';\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from 'components/swap/styleds';\nimport TradePrice from 'components/swap/TradePrice';\nimport TokenWarningModal from 'components/TokenWarningModal';\nimport SyrupWarningModal from 'components/SyrupWarningModal';\nimport SafeMoonWarningModal from 'components/SafeMoonWarningModal';\nimport ProgressSteps from 'components/ProgressSteps';\nimport Container from 'components/Container';\nimport { INITIAL_ALLOWED_SLIPPAGE } from 'constants/index';\nimport { useActiveWeb3React } from 'hooks';\nimport { useCurrency } from 'hooks/Tokens';\nimport { ApprovalState, useApproveCallbackFromTrade } from 'hooks/useApproveCallback';\nimport { useSwapCallback } from 'hooks/useSwapCallback';\nimport useWrapCallback, { WrapType } from 'hooks/useWrapCallback';\nimport { Field } from 'state/swap/actions';\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from 'state/swap/hooks';\nimport { useExpertModeManager, useUserDeadline, useUserSlippageTolerance } from 'state/user/hooks';\nimport { LinkStyledButton } from 'components/Shared';\nimport { maxAmountSpend } from 'utils/maxAmountSpend';\nimport { computeTradePriceBreakdown, warningSeverity } from 'utils/prices';\nimport Loader from 'components/Loader';\nimport useI18n from 'hooks/useI18n';\nimport PageHeader from 'components/PageHeader';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport AppBody from '../AppBody';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledLink = styled(Link)`\n  display: inline;\n  color: ${({\n  theme\n}) => theme.colors.failure};\n`;\n_c = StyledLink;\n\nconst Swap = () => {\n  _s();\n\n  var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe3, _parsedAmounts$Field$, _currencies$Field$INP2;\n\n  const loadedUrlParams = useDefaultsFromURLSearch();\n  const TranslateString = useI18n();\n  const [modalCountdownSecondsRemaining, setModalCountdownSecondsRemaining] = useState(5);\n  const [disableSwap, setDisableSwap] = useState(false);\n  const [hasPoppedModal, setHasPoppedModal] = useState(false);\n  const [interruptRedirectCountdown, setInterruptRedirectCountdown] = useState(false); // const [onPresentV2ExchangeRedirectModal] = useModal(\n  //   <V2ExchangeRedirectModal handleCloseModal={() => setInterruptRedirectCountdown(true)} />\n  // )\n  // const onPresentV2ExchangeRedirectModalRef = useRef(onPresentV2ExchangeRedirectModal)\n  // token warning stuff\n\n  const [loadedInputCurrency, loadedOutputCurrency] = [useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.inputCurrencyId), useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.outputCurrencyId)];\n  const [dismissTokenWarning, setDismissTokenWarning] = useState(false);\n  const [transactionWarning, setTransactionWarning] = useState({\n    selectedToken: null,\n    purchaseType: null\n  });\n  const urlLoadedTokens = useMemo(() => {\n    var _filter, _ref;\n\n    return (_filter = (_ref = [loadedInputCurrency, loadedOutputCurrency]) === null || _ref === void 0 ? void 0 : _ref.filter(c => c instanceof Token)) !== null && _filter !== void 0 ? _filter : [];\n  }, [loadedInputCurrency, loadedOutputCurrency]);\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true);\n  }, []);\n\n  const handleConfirmWarning = () => {\n    setTransactionWarning({\n      selectedToken: null,\n      purchaseType: null\n    });\n  };\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const theme = useContext(ThemeContext);\n  const [isExpertMode] = useExpertModeManager(); // get custom setting values for user\n\n  const [deadline] = useUserDeadline();\n  const [allowedSlippage] = useUserSlippageTolerance(); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const trade = showWrap ? undefined : v2Trade; // Manage disabled trading pairs that should redirect users to V2\n\n  useEffect(() => {\n    var _currencies$Field$INP, _currencies$Field$OUT;\n\n    const disabledSwaps = ['BNB', 'BUSD', 'USDT', 'USDC', 'CAKE', 'BUNNY', 'ETH', 'BTCB', 'AUTO', 'XVS'];\n    const inputCurrencySymbol = ((_currencies$Field$INP = currencies[Field.INPUT]) === null || _currencies$Field$INP === void 0 ? void 0 : _currencies$Field$INP.symbol) || '';\n    const outputCurrencySymbol = ((_currencies$Field$OUT = currencies[Field.OUTPUT]) === null || _currencies$Field$OUT === void 0 ? void 0 : _currencies$Field$OUT.symbol) || '';\n    const doesInputMatch = disabledSwaps.includes(inputCurrencySymbol);\n    const doesOutputMatch = disabledSwaps.includes(outputCurrencySymbol);\n\n    if (doesInputMatch && doesOutputMatch) {\n      // Prevent infinite re-render of modal with this condition\n      if (!hasPoppedModal) {\n        setHasPoppedModal(true); // onPresentV2ExchangeRedirectModalRef.current()\n      } // Controls the swap buttons being disabled & renders a message\n\n\n      setDisableSwap(true);\n\n      const tick = () => {\n        setModalCountdownSecondsRemaining(prevSeconds => prevSeconds - 1);\n      };\n\n      const timerInterval = setInterval(() => tick(), 1000);\n\n      if (interruptRedirectCountdown) {\n        // Reset timer if countdown is interrupted\n        clearInterval(timerInterval);\n        setModalCountdownSecondsRemaining(5);\n      }\n\n      if (modalCountdownSecondsRemaining <= 0) {\n        window.location.href = 'https://exchange.pancakeswap.finance/#/swap';\n      }\n\n      return () => {\n        clearInterval(timerInterval);\n      };\n    } // Unset disableSwap state if the swap inputs & outputs dont match disabledSwaps\n\n\n    setDisableSwap(false);\n    return undefined;\n  }, [currencies, hasPoppedModal, modalCountdownSecondsRemaining, // onPresentV2ExchangeRedirectModalRef,\n  interruptRedirectCountdown]);\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]); // modal and loading\n\n  const [{\n    showConfirm,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : '' : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const noRoute = !route; // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput))); // the callback to execute the swap\n\n  const {\n    callback: swapCallback,\n    error: swapCallbackError\n  } = useSwapCallback(trade, allowedSlippage, deadline, recipient);\n  const {\n    priceImpactWithoutFee\n  } = computeTradePriceBreakdown(trade);\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n\n    if (!swapCallback) {\n      return;\n    }\n\n    setSwapState(prevState => ({ ...prevState,\n      attemptingTxn: true,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    }));\n    swapCallback().then(hash => {\n      setSwapState(prevState => ({ ...prevState,\n        attemptingTxn: false,\n        swapErrorMessage: undefined,\n        txHash: hash\n      }));\n    }).catch(error => {\n      setSwapState(prevState => ({ ...prevState,\n        attemptingTxn: false,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      }));\n    });\n  }, [priceImpactWithoutFee, swapCallback, setSwapState]); // errors\n\n  const [showInverted, setShowInverted] = useState(false); // warnings on slippage\n\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee); // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n\n  const showApproveFlow = !swapInputError && (approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING || approvalSubmitted && approval === ApprovalState.APPROVED) && !(priceImpactSeverity > 3 && !isExpertMode);\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState(prevState => ({ ...prevState,\n      showConfirm: false\n    })); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [onUserInput, txHash, setSwapState]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState(prevState => ({ ...prevState,\n      tradeToConfirm: trade\n    }));\n  }, [trade]); // This will check to see if the user has selected Syrup or SafeMoon to either buy or sell.\n  // If so, they will be alerted with a warning message.\n\n  const checkForWarning = useCallback((selected, purchaseType) => {\n    if (['SYRUP', 'SAFEMOON'].includes(selected)) {\n      setTransactionWarning({\n        selectedToken: selected,\n        purchaseType\n      });\n    }\n  }, [setTransactionWarning]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setHasPoppedModal(false);\n    setInterruptRedirectCountdown(false);\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n\n    if (inputCurrency.symbol === 'SYRUP') {\n      checkForWarning(inputCurrency.symbol, 'Selling');\n    }\n\n    if (inputCurrency.symbol === 'SAFEMOON') {\n      checkForWarning(inputCurrency.symbol, 'Selling');\n    }\n  }, [onCurrencySelection, setApprovalSubmitted, checkForWarning]);\n  const handleMaxInput = useCallback(() => {\n    if (maxAmountInput) {\n      onUserInput(Field.INPUT, maxAmountInput.toExact());\n    }\n  }, [maxAmountInput, onUserInput]);\n  const handleOutputSelect = useCallback(outputCurrency => {\n    setHasPoppedModal(false);\n    setInterruptRedirectCountdown(false);\n    onCurrencySelection(Field.OUTPUT, outputCurrency);\n\n    if (outputCurrency.symbol === 'SYRUP') {\n      checkForWarning(outputCurrency.symbol, 'Buying');\n    }\n\n    if (outputCurrency.symbol === 'SAFEMOON') {\n      checkForWarning(outputCurrency.symbol, 'Buying');\n    }\n  }, [onCurrencySelection, checkForWarning]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(TokenWarningModal, {\n      isOpen: urlLoadedTokens.length > 0 && !dismissTokenWarning,\n      tokens: urlLoadedTokens,\n      onConfirm: handleConfirmTokenWarning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SyrupWarningModal, {\n      isOpen: transactionWarning.selectedToken === 'SYRUP',\n      transactionType: transactionWarning.purchaseType,\n      onConfirm: handleConfirmWarning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SafeMoonWarningModal, {\n      isOpen: transactionWarning.selectedToken === 'SAFEMOON',\n      onConfirm: handleConfirmWarning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppBody, {\n      children: /*#__PURE__*/_jsxDEV(Wrapper, {\n        id: \"swap-page\",\n        children: [/*#__PURE__*/_jsxDEV(ConfirmSwapModal, {\n          isOpen: showConfirm,\n          trade: trade,\n          originalTrade: tradeToConfirm,\n          onAcceptChanges: handleAcceptChanges,\n          attemptingTxn: attemptingTxn,\n          txHash: txHash,\n          recipient: recipient,\n          allowedSlippage: allowedSlippage,\n          onConfirm: handleSwap,\n          swapErrorMessage: swapErrorMessage,\n          onDismiss: handleConfirmDismiss\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PageHeader, {\n          title: TranslateString(8, 'Exchange'),\n          description: TranslateString(1192, 'Trade tokens in an instant')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: [/*#__PURE__*/_jsxDEV(AutoColumn, {\n            gap: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n              label: independentField === Field.OUTPUT && !showWrap && trade ? TranslateString(194, 'From (estimated)') : TranslateString(76, 'From'),\n              value: formattedAmounts[Field.INPUT],\n              showMaxButton: !atMaxAmountInput,\n              currency: currencies[Field.INPUT],\n              onUserInput: handleTypeInput,\n              onMax: handleMaxInput,\n              onCurrencySelect: handleInputSelect,\n              otherCurrency: currencies[Field.OUTPUT],\n              id: \"swap-currency-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n              justify: \"space-between\",\n              children: /*#__PURE__*/_jsxDEV(AutoRow, {\n                justify: isExpertMode ? 'space-between' : 'center',\n                style: {\n                  padding: '0 1rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                  clickable: true,\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    variant: \"tertiary\",\n                    onClick: () => {\n                      setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n                      onSwitchTokens();\n                    },\n                    style: {\n                      borderRadius: '50%'\n                    },\n                    scale: \"sm\",\n                    children: /*#__PURE__*/_jsxDEV(ArrowDownIcon, {\n                      color: \"primary\",\n                      width: \"24px\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 404,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 395,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 19\n                }, this), recipient === null && !showWrap && isExpertMode ? /*#__PURE__*/_jsxDEV(LinkStyledButton, {\n                  id: \"add-recipient-button\",\n                  onClick: () => onChangeRecipient(''),\n                  children: \"+ Add a send (optional)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 21\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n              value: formattedAmounts[Field.OUTPUT],\n              onUserInput: handleTypeOutput,\n              label: independentField === Field.INPUT && !showWrap && trade ? TranslateString(196, 'To (estimated)') : TranslateString(80, 'To'),\n              showMaxButton: false,\n              currency: currencies[Field.OUTPUT],\n              onCurrencySelect: handleOutputSelect,\n              otherCurrency: currencies[Field.INPUT],\n              id: \"swap-currency-output\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 15\n            }, this), recipient !== null && !showWrap ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(AutoRow, {\n                justify: \"space-between\",\n                style: {\n                  padding: '0 1rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                  clickable: false,\n                  children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n                    size: \"16\",\n                    color: theme.colors.textSubtle\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 433,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(LinkStyledButton, {\n                  id: \"remove-recipient-button\",\n                  onClick: () => onChangeRecipient(null),\n                  children: \"- Remove send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(AddressInputPanel, {\n                id: \"recipient\",\n                value: recipient,\n                onChange: onChangeRecipient\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true) : null, showWrap ? null : /*#__PURE__*/_jsxDEV(Card, {\n              padding: \".25rem .75rem 0 .75rem\",\n              borderRadius: \"20px\",\n              children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n                gap: \"4px\",\n                children: [Boolean(trade) && /*#__PURE__*/_jsxDEV(RowBetween, {\n                  align: \"center\",\n                  children: [/*#__PURE__*/_jsxDEV(Text, {\n                    fontSize: \"14px\",\n                    children: TranslateString(1182, 'Price')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 448,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TradePrice, {\n                    price: trade === null || trade === void 0 ? void 0 : trade.executionPrice,\n                    showInverted: showInverted,\n                    setShowInverted: setShowInverted\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 23\n                }, this), allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && /*#__PURE__*/_jsxDEV(RowBetween, {\n                  align: \"center\",\n                  children: [/*#__PURE__*/_jsxDEV(Text, {\n                    fontSize: \"14px\",\n                    children: TranslateString(88, 'Slippage Tolerance')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 458,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Text, {\n                    fontSize: \"14px\",\n                    children: [allowedSlippage / 100, \"%\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 459,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BottomGrouping, {\n            children: [disableSwap && /*#__PURE__*/_jsxDEV(Flex, {\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              mb: \"1rem\",\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                color: \"failure\",\n                children: [\"Please use\", ' ', /*#__PURE__*/_jsxDEV(StyledLink, {\n                  external: true,\n                  href: \"https://exchange.pancakeswap.finance\",\n                  children: \"PancakeSwap V2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 471,\n                  columnNumber: 21\n                }, this), ' ', \"to make this trade\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 17\n            }, this), !account ? /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n              width: \"100%\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 17\n            }, this) : showWrap ? /*#__PURE__*/_jsxDEV(Button, {\n              disabled: Boolean(wrapInputError),\n              onClick: onWrap,\n              width: \"100%\",\n              children: wrapInputError !== null && wrapInputError !== void 0 ? wrapInputError : wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 17\n            }, this) : noRoute && userHasSpecifiedInputOutput ? /*#__PURE__*/_jsxDEV(GreyCard, {\n              style: {\n                textAlign: 'center'\n              },\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                mb: \"4px\",\n                children: TranslateString(1194, 'Insufficient liquidity for this trade.')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 17\n            }, this) : showApproveFlow ? /*#__PURE__*/_jsxDEV(RowBetween, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: approveCallback,\n                disabled: disableSwap || approval !== ApprovalState.NOT_APPROVED || approvalSubmitted,\n                style: {\n                  width: '48%'\n                },\n                variant: approval === ApprovalState.APPROVED ? 'success' : 'primary',\n                children: approval === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(AutoRow, {\n                  gap: \"6px\",\n                  justify: \"center\",\n                  children: [\"Approving \", /*#__PURE__*/_jsxDEV(Loader, {\n                    stroke: \"white\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 499,\n                    columnNumber: 35\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 498,\n                  columnNumber: 23\n                }, this) : approvalSubmitted && approval === ApprovalState.APPROVED ? 'Approved' : `Approve ${(_currencies$Field$INP2 = currencies[Field.INPUT]) === null || _currencies$Field$INP2 === void 0 ? void 0 : _currencies$Field$INP2.symbol}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  if (isExpertMode) {\n                    handleSwap();\n                  } else {\n                    setSwapState({\n                      tradeToConfirm: trade,\n                      attemptingTxn: false,\n                      swapErrorMessage: undefined,\n                      showConfirm: true,\n                      txHash: undefined\n                    });\n                  }\n                },\n                style: {\n                  width: '48%'\n                },\n                id: \"swap-button\",\n                disabled: disableSwap || !isValid || approval !== ApprovalState.APPROVED || priceImpactSeverity > 3 && !isExpertMode,\n                variant: isValid && priceImpactSeverity > 2 ? 'danger' : 'primary',\n                children: priceImpactSeverity > 3 && !isExpertMode ? `Price Impact High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                if (isExpertMode) {\n                  handleSwap();\n                } else {\n                  setSwapState({\n                    tradeToConfirm: trade,\n                    attemptingTxn: false,\n                    swapErrorMessage: undefined,\n                    showConfirm: true,\n                    txHash: undefined\n                  });\n                }\n              },\n              id: \"swap-button\",\n              disabled: disableSwap || !isValid || priceImpactSeverity > 3 && !isExpertMode || !!swapCallbackError,\n              variant: isValid && priceImpactSeverity > 2 && !swapCallbackError ? 'danger' : 'primary',\n              width: \"100%\",\n              children: swapInputError || (priceImpactSeverity > 3 && !isExpertMode ? `Price Impact Too High` : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 17\n            }, this), showApproveFlow && /*#__PURE__*/_jsxDEV(ProgressSteps, {\n              steps: [approval === ApprovalState.APPROVED]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 35\n            }, this), isExpertMode && swapErrorMessage ? /*#__PURE__*/_jsxDEV(SwapCallbackError, {\n              error: swapErrorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 51\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AdvancedSwapDetailsDropdown, {\n      trade: trade\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Swap, \"a4SeVPxtftPI4FOq3KaBWU1DJbk=\", false, function () {\n  return [useDefaultsFromURLSearch, useI18n, useCurrency, useCurrency, useActiveWeb3React, useExpertModeManager, useUserDeadline, useUserSlippageTolerance, useSwapState, useDerivedSwapInfo, useWrapCallback, useSwapActionHandlers, useApproveCallbackFromTrade, useSwapCallback];\n});\n\n_c2 = Swap;\nexport default Swap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledLink\");\n$RefreshReg$(_c2, \"Swap\");","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/pages/Swap/index.tsx"],"names":["JSBI","Token","React","useCallback","useContext","useEffect","useMemo","useState","ArrowDown","CardBody","ArrowDownIcon","Button","IconButton","Text","Link","Flex","styled","ThemeContext","AddressInputPanel","Card","GreyCard","AutoColumn","ConfirmSwapModal","CurrencyInputPanel","CardNav","AutoRow","RowBetween","AdvancedSwapDetailsDropdown","confirmPriceImpactWithoutFee","ArrowWrapper","BottomGrouping","SwapCallbackError","Wrapper","TradePrice","TokenWarningModal","SyrupWarningModal","SafeMoonWarningModal","ProgressSteps","Container","INITIAL_ALLOWED_SLIPPAGE","useActiveWeb3React","useCurrency","ApprovalState","useApproveCallbackFromTrade","useSwapCallback","useWrapCallback","WrapType","Field","useDefaultsFromURLSearch","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useExpertModeManager","useUserDeadline","useUserSlippageTolerance","LinkStyledButton","maxAmountSpend","computeTradePriceBreakdown","warningSeverity","Loader","useI18n","PageHeader","ConnectWalletButton","AppBody","StyledLink","theme","colors","failure","Swap","loadedUrlParams","TranslateString","modalCountdownSecondsRemaining","setModalCountdownSecondsRemaining","disableSwap","setDisableSwap","hasPoppedModal","setHasPoppedModal","interruptRedirectCountdown","setInterruptRedirectCountdown","loadedInputCurrency","loadedOutputCurrency","inputCurrencyId","outputCurrencyId","dismissTokenWarning","setDismissTokenWarning","transactionWarning","setTransactionWarning","selectedToken","purchaseType","urlLoadedTokens","filter","c","handleConfirmTokenWarning","handleConfirmWarning","account","isExpertMode","deadline","allowedSlippage","independentField","typedValue","recipient","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","showWrap","NOT_APPLICABLE","trade","undefined","disabledSwaps","inputCurrencySymbol","symbol","outputCurrencySymbol","doesInputMatch","includes","doesOutputMatch","tick","prevSeconds","timerInterval","setInterval","clearInterval","window","location","href","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","showConfirm","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","formattedAmounts","toExact","toSignificant","route","userHasSpecifiedInputOutput","Boolean","greaterThan","BigInt","noRoute","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","maxAmountInput","atMaxAmountInput","equalTo","callback","swapCallback","error","swapCallbackError","priceImpactWithoutFee","handleSwap","prevState","then","hash","catch","message","showInverted","setShowInverted","priceImpactSeverity","showApproveFlow","NOT_APPROVED","APPROVED","handleConfirmDismiss","handleAcceptChanges","checkForWarning","selected","handleInputSelect","inputCurrency","handleMaxInput","handleOutputSelect","outputCurrency","length","padding","borderRadius","textSubtle","executionPrice","WRAP","UNWRAP","textAlign","width"],"mappings":"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","sourcesContent":["import { CurrencyAmount, JSBI, Token, Trade } from '@pancakeswap-libs/sdk'\nimport React, { useCallback, useContext, useEffect, useMemo, useState, useRef } from 'react'\nimport { ArrowDown } from 'react-feather'\nimport { CardBody, ArrowDownIcon, Button, IconButton, Text, useModal, Link, Flex } from '@pancakeswap-libs/uikit'\nimport styled, { ThemeContext } from 'styled-components'\nimport AddressInputPanel from 'components/AddressInputPanel'\nimport Card, { GreyCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport ConfirmSwapModal from 'components/swap/ConfirmSwapModal'\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\nimport CardNav from 'components/CardNav'\nimport { AutoRow, RowBetween } from 'components/Row'\nimport AdvancedSwapDetailsDropdown from 'components/swap/AdvancedSwapDetailsDropdown'\nimport confirmPriceImpactWithoutFee from 'components/swap/confirmPriceImpactWithoutFee'\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from 'components/swap/styleds'\nimport TradePrice from 'components/swap/TradePrice'\nimport TokenWarningModal from 'components/TokenWarningModal'\nimport SyrupWarningModal from 'components/SyrupWarningModal'\nimport SafeMoonWarningModal from 'components/SafeMoonWarningModal'\nimport ProgressSteps from 'components/ProgressSteps'\nimport Container from 'components/Container'\n\nimport { INITIAL_ALLOWED_SLIPPAGE } from 'constants/index'\nimport { useActiveWeb3React } from 'hooks'\nimport { useCurrency } from 'hooks/Tokens'\nimport { ApprovalState, useApproveCallbackFromTrade } from 'hooks/useApproveCallback'\nimport { useSwapCallback } from 'hooks/useSwapCallback'\nimport useWrapCallback, { WrapType } from 'hooks/useWrapCallback'\nimport { Field } from 'state/swap/actions'\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from 'state/swap/hooks'\nimport { useExpertModeManager, useUserDeadline, useUserSlippageTolerance } from 'state/user/hooks'\nimport { LinkStyledButton } from 'components/Shared'\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\nimport { computeTradePriceBreakdown, warningSeverity } from 'utils/prices'\nimport Loader from 'components/Loader'\nimport useI18n from 'hooks/useI18n'\nimport PageHeader from 'components/PageHeader'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport V2ExchangeRedirectModal from 'components/V2ExchangeRedirectModal'\nimport AppBody from '../AppBody'\n\nconst StyledLink = styled(Link)`\n  display: inline;\n  color: ${({ theme }) => theme.colors.failure};\n`\n\nconst Swap = () => {\n  const loadedUrlParams = useDefaultsFromURLSearch()\n  const TranslateString = useI18n()\n  const [modalCountdownSecondsRemaining, setModalCountdownSecondsRemaining] = useState(5)\n  const [disableSwap, setDisableSwap] = useState(false)\n  const [hasPoppedModal, setHasPoppedModal] = useState(false)\n  const [interruptRedirectCountdown, setInterruptRedirectCountdown] = useState(false)\n  // const [onPresentV2ExchangeRedirectModal] = useModal(\n  //   <V2ExchangeRedirectModal handleCloseModal={() => setInterruptRedirectCountdown(true)} />\n  // )\n  // const onPresentV2ExchangeRedirectModalRef = useRef(onPresentV2ExchangeRedirectModal)\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId),\n  ]\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\n  const [transactionWarning, setTransactionWarning] = useState<{\n    selectedToken: string | null\n    purchaseType: string | null\n  }>({\n    selectedToken: null,\n    purchaseType: null,\n  })\n  const urlLoadedTokens: Token[] = useMemo(\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency]\n  )\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true)\n  }, [])\n\n  const handleConfirmWarning = () => {\n    setTransactionWarning({\n      selectedToken: null,\n      purchaseType: null,\n    })\n  }\n\n  const { account } = useActiveWeb3React()\n  const theme = useContext(ThemeContext)\n\n  const [isExpertMode] = useExpertModeManager()\n\n  // get custom setting values for user\n  const [deadline] = useUserDeadline()\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState()\n  const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\n  const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\n    currencies[Field.INPUT],\n    currencies[Field.OUTPUT],\n    typedValue\n  )\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n  const trade = showWrap ? undefined : v2Trade\n\n  // Manage disabled trading pairs that should redirect users to V2\n  useEffect(() => {\n    const disabledSwaps = ['BNB', 'BUSD', 'USDT', 'USDC', 'CAKE', 'BUNNY', 'ETH', 'BTCB', 'AUTO', 'XVS']\n    const inputCurrencySymbol = currencies[Field.INPUT]?.symbol || ''\n    const outputCurrencySymbol = currencies[Field.OUTPUT]?.symbol || ''\n    const doesInputMatch = disabledSwaps.includes(inputCurrencySymbol)\n    const doesOutputMatch = disabledSwaps.includes(outputCurrencySymbol)\n\n    if (doesInputMatch && doesOutputMatch) {\n      // Prevent infinite re-render of modal with this condition\n      if (!hasPoppedModal) {\n        setHasPoppedModal(true)\n        // onPresentV2ExchangeRedirectModalRef.current()\n      }\n\n      // Controls the swap buttons being disabled & renders a message\n      setDisableSwap(true)\n\n      const tick = () => {\n        setModalCountdownSecondsRemaining((prevSeconds) => prevSeconds - 1)\n      }\n      const timerInterval = setInterval(() => tick(), 1000)\n\n      if (interruptRedirectCountdown) {\n        // Reset timer if countdown is interrupted\n        clearInterval(timerInterval)\n        setModalCountdownSecondsRemaining(5)\n      }\n\n      if (modalCountdownSecondsRemaining <= 0) {\n        window.location.href = 'https://exchange.pancakeswap.finance/#/swap'\n      }\n\n      return () => {\n        clearInterval(timerInterval)\n      }\n    }\n\n    // Unset disableSwap state if the swap inputs & outputs dont match disabledSwaps\n    setDisableSwap(false)\n    return undefined\n  }, [\n    currencies,\n    hasPoppedModal,\n    modalCountdownSecondsRemaining,\n    // onPresentV2ExchangeRedirectModalRef,\n    interruptRedirectCountdown,\n  ])\n\n  const parsedAmounts = showWrap\n    ? {\n        [Field.INPUT]: parsedAmount,\n        [Field.OUTPUT]: parsedAmount,\n      }\n    : {\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\n      }\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  const isValid = !swapInputError\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput]\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput]\n  )\n\n  // modal and loading\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    showConfirm: boolean\n    tradeToConfirm: Trade | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap\n      ? parsedAmounts[independentField]?.toExact() ?? ''\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  const route = trade?.route\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  )\n  const noRoute = !route\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approval, approvalSubmitted])\n\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n\n  // the callback to execute the swap\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\n    trade,\n    allowedSlippage,\n    deadline,\n    recipient\n  )\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return\n    }\n    if (!swapCallback) {\n      return\n    }\n    setSwapState((prevState) => ({ ...prevState, attemptingTxn: true, swapErrorMessage: undefined, txHash: undefined }))\n    swapCallback()\n      .then((hash) => {\n        setSwapState((prevState) => ({\n          ...prevState,\n          attemptingTxn: false,\n          swapErrorMessage: undefined,\n          txHash: hash,\n        }))\n      })\n      .catch((error) => {\n        setSwapState((prevState) => ({\n          ...prevState,\n          attemptingTxn: false,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        }))\n      })\n  }, [priceImpactWithoutFee, swapCallback, setSwapState])\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode)\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState((prevState) => ({ ...prevState, showConfirm: false }))\n\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [onUserInput, txHash, setSwapState])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState((prevState) => ({ ...prevState, tradeToConfirm: trade }))\n  }, [trade])\n\n  // This will check to see if the user has selected Syrup or SafeMoon to either buy or sell.\n  // If so, they will be alerted with a warning message.\n  const checkForWarning = useCallback(\n    (selected: string, purchaseType: string) => {\n      if (['SYRUP', 'SAFEMOON'].includes(selected)) {\n        setTransactionWarning({\n          selectedToken: selected,\n          purchaseType,\n        })\n      }\n    },\n    [setTransactionWarning]\n  )\n\n  const handleInputSelect = useCallback(\n    (inputCurrency) => {\n      setHasPoppedModal(false)\n      setInterruptRedirectCountdown(false)\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency)\n      if (inputCurrency.symbol === 'SYRUP') {\n        checkForWarning(inputCurrency.symbol, 'Selling')\n      }\n      if (inputCurrency.symbol === 'SAFEMOON') {\n        checkForWarning(inputCurrency.symbol, 'Selling')\n      }\n    },\n    [onCurrencySelection, setApprovalSubmitted, checkForWarning]\n  )\n\n  const handleMaxInput = useCallback(() => {\n    if (maxAmountInput) {\n      onUserInput(Field.INPUT, maxAmountInput.toExact())\n    }\n  }, [maxAmountInput, onUserInput])\n\n  const handleOutputSelect = useCallback(\n    (outputCurrency) => {\n      setHasPoppedModal(false)\n      setInterruptRedirectCountdown(false)\n      onCurrencySelection(Field.OUTPUT, outputCurrency)\n      if (outputCurrency.symbol === 'SYRUP') {\n        checkForWarning(outputCurrency.symbol, 'Buying')\n      }\n      if (outputCurrency.symbol === 'SAFEMOON') {\n        checkForWarning(outputCurrency.symbol, 'Buying')\n      }\n    },\n    [onCurrencySelection, checkForWarning]\n  )\n\n  return (\n    <Container>\n      <TokenWarningModal\n        isOpen={urlLoadedTokens.length > 0 && !dismissTokenWarning}\n        tokens={urlLoadedTokens}\n        onConfirm={handleConfirmTokenWarning}\n      />\n      <SyrupWarningModal\n        isOpen={transactionWarning.selectedToken === 'SYRUP'}\n        transactionType={transactionWarning.purchaseType}\n        onConfirm={handleConfirmWarning}\n      />\n      <SafeMoonWarningModal isOpen={transactionWarning.selectedToken === 'SAFEMOON'} onConfirm={handleConfirmWarning} />\n      <CardNav />\n      <AppBody>\n        <Wrapper id=\"swap-page\">\n          <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n          />\n          <PageHeader\n            title={TranslateString(8, 'Exchange')}\n            description={TranslateString(1192, 'Trade tokens in an instant')}\n          />\n          <CardBody>\n            <AutoColumn gap=\"md\">\n              <CurrencyInputPanel\n                label={\n                  independentField === Field.OUTPUT && !showWrap && trade\n                    ? TranslateString(194, 'From (estimated)')\n                    : TranslateString(76, 'From')\n                }\n                value={formattedAmounts[Field.INPUT]}\n                showMaxButton={!atMaxAmountInput}\n                currency={currencies[Field.INPUT]}\n                onUserInput={handleTypeInput}\n                onMax={handleMaxInput}\n                onCurrencySelect={handleInputSelect}\n                otherCurrency={currencies[Field.OUTPUT]}\n                id=\"swap-currency-input\"\n              />\n              <AutoColumn justify=\"space-between\">\n                <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\n                  <ArrowWrapper clickable>\n                    <IconButton\n                      variant=\"tertiary\"\n                      onClick={() => {\n                        setApprovalSubmitted(false) // reset 2 step UI for approvals\n                        onSwitchTokens()\n                      }}\n                      style={{ borderRadius: '50%' }}\n                      scale=\"sm\"\n                    >\n                      <ArrowDownIcon color=\"primary\" width=\"24px\" />\n                    </IconButton>\n                  </ArrowWrapper>\n                  {recipient === null && !showWrap && isExpertMode ? (\n                    <LinkStyledButton id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\n                      + Add a send (optional)\n                    </LinkStyledButton>\n                  ) : null}\n                </AutoRow>\n              </AutoColumn>\n              <CurrencyInputPanel\n                value={formattedAmounts[Field.OUTPUT]}\n                onUserInput={handleTypeOutput}\n                label={\n                  independentField === Field.INPUT && !showWrap && trade\n                    ? TranslateString(196, 'To (estimated)')\n                    : TranslateString(80, 'To')\n                }\n                showMaxButton={false}\n                currency={currencies[Field.OUTPUT]}\n                onCurrencySelect={handleOutputSelect}\n                otherCurrency={currencies[Field.INPUT]}\n                id=\"swap-currency-output\"\n              />\n\n              {recipient !== null && !showWrap ? (\n                <>\n                  <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                    <ArrowWrapper clickable={false}>\n                      <ArrowDown size=\"16\" color={theme.colors.textSubtle} />\n                    </ArrowWrapper>\n                    <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                      - Remove send\n                    </LinkStyledButton>\n                  </AutoRow>\n                  <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n                </>\n              ) : null}\n\n              {showWrap ? null : (\n                <Card padding=\".25rem .75rem 0 .75rem\" borderRadius=\"20px\">\n                  <AutoColumn gap=\"4px\">\n                    {Boolean(trade) && (\n                      <RowBetween align=\"center\">\n                        <Text fontSize=\"14px\">{TranslateString(1182, 'Price')}</Text>\n                        <TradePrice\n                          price={trade?.executionPrice}\n                          showInverted={showInverted}\n                          setShowInverted={setShowInverted}\n                        />\n                      </RowBetween>\n                    )}\n                    {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\n                      <RowBetween align=\"center\">\n                        <Text fontSize=\"14px\">{TranslateString(88, 'Slippage Tolerance')}</Text>\n                        <Text fontSize=\"14px\">{allowedSlippage / 100}%</Text>\n                      </RowBetween>\n                    )}\n                  </AutoColumn>\n                </Card>\n              )}\n            </AutoColumn>\n            <BottomGrouping>\n              {disableSwap && (\n                <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"1rem\">\n                  <Text color=\"failure\">\n                    Please use{' '}\n                    <StyledLink external href=\"https://exchange.pancakeswap.finance\">\n                      PancakeSwap V2\n                    </StyledLink>{' '}\n                    to make this trade\n                  </Text>\n                </Flex>\n              )}\n              {!account ? (\n                <ConnectWalletButton width=\"100%\" />\n              ) : showWrap ? (\n                <Button disabled={Boolean(wrapInputError)} onClick={onWrap} width=\"100%\">\n                  {wrapInputError ??\n                    (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\n                </Button>\n              ) : noRoute && userHasSpecifiedInputOutput ? (\n                <GreyCard style={{ textAlign: 'center' }}>\n                  <Text mb=\"4px\">{TranslateString(1194, 'Insufficient liquidity for this trade.')}</Text>\n                </GreyCard>\n              ) : showApproveFlow ? (\n                <RowBetween>\n                  <Button\n                    onClick={approveCallback}\n                    disabled={disableSwap || approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n                    style={{ width: '48%' }}\n                    variant={approval === ApprovalState.APPROVED ? 'success' : 'primary'}\n                  >\n                    {approval === ApprovalState.PENDING ? (\n                      <AutoRow gap=\"6px\" justify=\"center\">\n                        Approving <Loader stroke=\"white\" />\n                      </AutoRow>\n                    ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\n                      'Approved'\n                    ) : (\n                      `Approve ${currencies[Field.INPUT]?.symbol}`\n                    )}\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      if (isExpertMode) {\n                        handleSwap()\n                      } else {\n                        setSwapState({\n                          tradeToConfirm: trade,\n                          attemptingTxn: false,\n                          swapErrorMessage: undefined,\n                          showConfirm: true,\n                          txHash: undefined,\n                        })\n                      }\n                    }}\n                    style={{ width: '48%' }}\n                    id=\"swap-button\"\n                    disabled={\n                      disableSwap ||\n                      !isValid ||\n                      approval !== ApprovalState.APPROVED ||\n                      (priceImpactSeverity > 3 && !isExpertMode)\n                    }\n                    variant={isValid && priceImpactSeverity > 2 ? 'danger' : 'primary'}\n                  >\n                    {priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact High`\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`}\n                  </Button>\n                </RowBetween>\n              ) : (\n                <Button\n                  onClick={() => {\n                    if (isExpertMode) {\n                      handleSwap()\n                    } else {\n                      setSwapState({\n                        tradeToConfirm: trade,\n                        attemptingTxn: false,\n                        swapErrorMessage: undefined,\n                        showConfirm: true,\n                        txHash: undefined,\n                      })\n                    }\n                  }}\n                  id=\"swap-button\"\n                  disabled={\n                    disableSwap || !isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError\n                  }\n                  variant={isValid && priceImpactSeverity > 2 && !swapCallbackError ? 'danger' : 'primary'}\n                  width=\"100%\"\n                >\n                  {swapInputError ||\n                    (priceImpactSeverity > 3 && !isExpertMode\n                      ? `Price Impact Too High`\n                      : `Swap${priceImpactSeverity > 2 ? ' Anyway' : ''}`)}\n                </Button>\n              )}\n              {showApproveFlow && <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />}\n              {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n            </BottomGrouping>\n          </CardBody>\n        </Wrapper>\n      </AppBody>\n      <AdvancedSwapDetailsDropdown trade={trade} />\n    </Container>\n  )\n}\n\nexport default Swap\n"]},"metadata":{},"sourceType":"module"}