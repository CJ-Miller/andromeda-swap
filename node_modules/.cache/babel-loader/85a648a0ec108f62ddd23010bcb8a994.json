{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nconst api = 'https://api.pancakeswap.info/api/tokens';\n\nconst useGetPriceData = () => {\n  _s();\n\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(api);\n        const res = await response.json();\n        setData(res);\n      } catch (error) {\n        console.error('Unable to fetch price data:', error);\n      }\n    };\n\n    fetchData();\n  }, [setData]);\n  return data;\n};\n\n_s(useGetPriceData, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\nexport default useGetPriceData;","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/hooks/useGetPriceData.ts"],"names":["useEffect","useState","api","useGetPriceData","data","setData","fetchData","response","fetch","res","json","error","console"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAcA,MAAMC,GAAG,GAAG,yCAAZ;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAqB,IAArB,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAD,CAA5B;AACA,cAAMO,GAAgB,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA/B;AAEAL,QAAAA,OAAO,CAACI,GAAD,CAAP;AACD,OALD,CAKE,OAAOE,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;AACD;AACF,KATD;;AAWAL,IAAAA,SAAS;AACV,GAbQ,EAaN,CAACD,OAAD,CAbM,CAAT;AAeA,SAAOD,IAAP;AACD,CAnBD;;GAAMD,e;;AAqBN,eAAeA,eAAf","sourcesContent":["import { useEffect, useState } from 'react'\n\ntype ApiResponse = {\n  updated_at: string\n  data: {\n    [key: string]: {\n      name: string\n      symbol: string\n      price: string\n      price_BNB: string\n    }\n  }\n}\n\nconst api = 'https://api.pancakeswap.info/api/tokens'\n\nconst useGetPriceData = () => {\n  const [data, setData] = useState<ApiResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(api)\n        const res: ApiResponse = await response.json()\n\n        setData(res)\n      } catch (error) {\n        console.error('Unable to fetch price data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n\nexport default useGetPriceData\n"]},"metadata":{},"sourceType":"module"}