{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { TranslationsContext } from '../hooks/TranslationsContext';\nconst variableRegex = /%(.*?)%/;\n\nconst replaceDynamicString = (foundTranslation, fallback) => {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const stringToReplace = variableRegex.exec(foundTranslation)[0];\n  const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace);\n  const fallbackValueAtIndex = fallback.split(' ')[indexToReplace];\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex);\n};\n\nexport const getTranslation = (translations, translationId, fallback) => {\n  const foundTranslation = translations.find(translation => {\n    return translation.data.stringId === translationId;\n  });\n\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text;\n    const includesVariable = translatedString.includes('%');\n\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback);\n    }\n\n    return translatedString;\n  }\n\n  return fallback;\n};\nexport const TranslateString = (translationId, fallback) => {\n  _s();\n\n  const {\n    translations\n  } = useContext(TranslationsContext);\n\n  if (translations[0] === 'error') {\n    return fallback;\n  }\n\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback);\n  }\n\n  return null;\n};\n\n_s(TranslateString, \"hOCbFljQBxvGM0d3yrZWVY+RT6k=\");\n\n_c = TranslateString;\n\nvar _c;\n\n$RefreshReg$(_c, \"TranslateString\");","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/utils/translateTextHelpers.ts"],"names":["useContext","TranslationsContext","variableRegex","replaceDynamicString","foundTranslation","fallback","stringToReplace","exec","indexToReplace","split","indexOf","fallbackValueAtIndex","replace","getTranslation","translations","translationId","find","translation","data","stringId","translatedString","text","includesVariable","includes","TranslateString","length"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AAEA,MAAMC,aAAa,GAAG,SAAtB;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,gBAAD,EAA2BC,QAA3B,KAAgD;AAC3E;AACA,QAAMC,eAAe,GAAGJ,aAAa,CAACK,IAAd,CAAmBH,gBAAnB,EAAsC,CAAtC,CAAxB;AACA,QAAMI,cAAc,GAAGJ,gBAAgB,CAACK,KAAjB,CAAuB,GAAvB,EAA4BC,OAA5B,CAAoCJ,eAApC,CAAvB;AACA,QAAMK,oBAAoB,GAAGN,QAAQ,CAACI,KAAT,CAAe,GAAf,EAAoBD,cAApB,CAA7B;AACA,SAAOJ,gBAAgB,CAACQ,OAAjB,CAAyBN,eAAzB,EAA0CK,oBAA1C,CAAP;AACD,CAND;;AAQA,OAAO,MAAME,cAAc,GAAG,CAACC,YAAD,EAA2BC,aAA3B,EAAkDV,QAAlD,KAAuE;AACnG,QAAMD,gBAAgB,GAAGU,YAAY,CAACE,IAAb,CAAmBC,WAAD,IAAiB;AAC1D,WAAOA,WAAW,CAACC,IAAZ,CAAiBC,QAAjB,KAA8BJ,aAArC;AACD,GAFwB,CAAzB;;AAGA,MAAIX,gBAAJ,EAAsB;AACpB,UAAMgB,gBAAgB,GAAGhB,gBAAgB,CAACc,IAAjB,CAAsBG,IAA/C;AACA,UAAMC,gBAAgB,GAAGF,gBAAgB,CAACG,QAAjB,CAA0B,GAA1B,CAAzB;;AACA,QAAID,gBAAJ,EAAsB;AACpB,aAAOnB,oBAAoB,CAACiB,gBAAD,EAAmBf,QAAnB,CAA3B;AACD;;AACD,WAAOe,gBAAP;AACD;;AACD,SAAOf,QAAP;AACD,CAbM;AAeP,OAAO,MAAMmB,eAAe,GAAG,CAACT,aAAD,EAAwBV,QAAxB,KAA6C;AAAA;;AAC1E,QAAM;AAAES,IAAAA;AAAF,MAAmBd,UAAU,CAACC,mBAAD,CAAnC;;AACA,MAAIa,YAAY,CAAC,CAAD,CAAZ,KAAoB,OAAxB,EAAiC;AAC/B,WAAOT,QAAP;AACD;;AACD,MAAIS,YAAY,CAACW,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,WAAOZ,cAAc,CAACC,YAAD,EAAeC,aAAf,EAA8BV,QAA9B,CAArB;AACD;;AACD,SAAO,IAAP;AACD,CATM;;GAAMmB,e;;KAAAA,e","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../hooks/TranslationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const stringToReplace = variableRegex.exec(foundTranslation)![0]\n  const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[indexToReplace]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}