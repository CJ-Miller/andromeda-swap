{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n/** @typedef {import('./generated-types').CodecName} CodecName */\n\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\n\nconst varint = require('varint');\n\nconst uint8ArrayConcat = require('uint8arrays/concat');\n\nconst util = require('./util');\n\nconst {\n  nameToVarint,\n  constantToCode,\n  nameToCode,\n  codeToName\n} = require('./maps');\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\n\n\nfunction addPrefix(multicodecStrOrCode, data) {\n  let prefix;\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode);\n  } else {\n    if (nameToVarint[multicodecStrOrCode]) {\n      prefix = nameToVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length);\n}\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\n\n\nfunction rmPrefix(data) {\n  varint.decode(\n  /** @type {Buffer} */\n  data);\n  return data.slice(varint.decode.bytes);\n}\n/**\n * Get the codec name of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\n\n\nfunction getNameFromData(prefixedData) {\n  const code =\n  /** @type {CodecCode} */\n  varint.decode(\n  /** @type {Buffer} */\n  prefixedData);\n  const name = codeToName[code];\n\n  if (name === undefined) {\n    throw new Error(`Code \"${code}\" not found`);\n  }\n\n  return name;\n}\n/**\n * Get the codec name from a code.\n *\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\n\n\nfunction getNameFromCode(codec) {\n  return codeToName[codec];\n}\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecCode}\n */\n\n\nfunction getCodeFromName(name) {\n  const code = nameToCode[name];\n\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`);\n  }\n\n  return code;\n}\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\n\n\nfunction getCodeFromData(prefixedData) {\n  return (\n    /** @type {CodecCode} */\n    varint.decode(\n    /** @type {Buffer} */\n    prefixedData)\n  );\n}\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\n\n\nfunction getVarintFromName(name) {\n  const code = nameToVarint[name];\n\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`);\n  }\n\n  return code;\n}\n/**\n * Get the varint of a code.\n *\n * @param {CodecCode} code\n * @returns {Uint8Array}\n */\n\n\nfunction getVarintFromCode(code) {\n  return util.varintEncode(code);\n}\n/**\n * Get the codec name of the prefixed data.\n *\n * @deprecated use getNameFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\n\n\nfunction getCodec(prefixedData) {\n  return getNameFromData(prefixedData);\n}\n/**\n * Get the codec name from a code.\n *\n * @deprecated use getNameFromCode instead.\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\n\n\nfunction getName(codec) {\n  return getNameFromCode(codec);\n}\n/**\n * Get the code of the codec\n *\n * @deprecated use getCodeFromName instead.\n * @param {CodecName} name\n * @returns {CodecCode}\n */\n\n\nfunction getNumber(name) {\n  return getCodeFromName(name);\n}\n/**\n * Get the code of the prefixed data.\n *\n * @deprecated use getCodeFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\n\n\nfunction getCode(prefixedData) {\n  return getCodeFromData(prefixedData);\n}\n/**\n * Get the code as varint of a codec name.\n *\n * @deprecated use getVarintFromName instead.\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\n\n\nfunction getCodeVarint(name) {\n  return getVarintFromName(name);\n}\n/**\n * Get the varint of a code.\n *\n * @deprecated use getVarintFromCode instead.\n * @param {CodecCode} code\n * @returns {Array.<number>}\n */\n\n\nfunction getVarint(code) {\n  return Array.from(getVarintFromCode(code));\n}\n\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getNameFromData,\n  getNameFromCode,\n  getCodeFromName,\n  getCodeFromData,\n  getVarintFromName,\n  getVarintFromCode,\n  // Deprecated\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  // Make the constants top-level constants\n  ...constantToCode,\n  // Export the maps\n  nameToVarint,\n  nameToCode,\n  codeToName\n};","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/node_modules/cids/node_modules/multicodec/src/index.js"],"names":["varint","require","uint8ArrayConcat","util","nameToVarint","constantToCode","nameToCode","codeToName","addPrefix","multicodecStrOrCode","data","prefix","Uint8Array","varintUint8ArrayEncode","Error","length","rmPrefix","decode","slice","bytes","getNameFromData","prefixedData","code","name","undefined","getNameFromCode","codec","getCodeFromName","getCodeFromData","getVarintFromName","getVarintFromCode","varintEncode","getCodec","getName","getNumber","getCode","getCodeVarint","getVarint","Array","from","module","exports"],"mappings":"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","sourcesContent":["/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\n\nconst varint = require('varint')\nconst uint8ArrayConcat = require('uint8arrays/concat')\nconst util = require('./util')\nconst { nameToVarint, constantToCode, nameToCode, codeToName } = require('./maps')\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction addPrefix (multicodecStrOrCode, data) {\n  let prefix\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)\n  } else {\n    if (nameToVarint[multicodecStrOrCode]) {\n      prefix = nameToVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length)\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction rmPrefix (data) {\n  varint.decode(/** @type {Buffer} */(data))\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getNameFromData (prefixedData) {\n  const code = /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\n  const name = codeToName[code]\n  if (name === undefined) {\n    throw new Error(`Code \"${code}\" not found`)\n  }\n  return name\n}\n\n/**\n * Get the codec name from a code.\n *\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getNameFromCode (codec) {\n  return codeToName[codec]\n}\n\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getCodeFromName (name) {\n  const code = nameToCode[name]\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`)\n  }\n  return code\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCodeFromData (prefixedData) {\n  return /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getVarintFromName (name) {\n  const code = nameToVarint[name]\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`)\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n *\n * @param {CodecCode} code\n * @returns {Uint8Array}\n */\nfunction getVarintFromCode (code) {\n  return util.varintEncode(code)\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @deprecated use getNameFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getCodec (prefixedData) {\n  return getNameFromData(prefixedData)\n}\n\n/**\n * Get the codec name from a code.\n *\n * @deprecated use getNameFromCode instead.\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getName (codec) {\n  return getNameFromCode(codec)\n}\n\n/**\n * Get the code of the codec\n *\n * @deprecated use getCodeFromName instead.\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getNumber (name) {\n  return getCodeFromName(name)\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @deprecated use getCodeFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCode (prefixedData) {\n  return getCodeFromData(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @deprecated use getVarintFromName instead.\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getCodeVarint (name) {\n  return getVarintFromName(name)\n}\n\n/**\n * Get the varint of a code.\n *\n * @deprecated use getVarintFromCode instead.\n * @param {CodecCode} code\n * @returns {Array.<number>}\n */\nfunction getVarint (code) {\n  return Array.from(getVarintFromCode(code))\n}\n\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getNameFromData,\n  getNameFromCode,\n  getCodeFromName,\n  getCodeFromData,\n  getVarintFromName,\n  getVarintFromCode,\n  // Deprecated\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  // Make the constants top-level constants\n  ...constantToCode,\n  // Export the maps\n  nameToVarint,\n  nameToCode,\n  codeToName\n}\n"]},"metadata":{},"sourceType":"script"}