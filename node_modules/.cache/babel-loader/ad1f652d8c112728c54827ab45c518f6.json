{"ast":null,"code":"var _jsxFileName = \"/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/components/swap/AdvancedSwapDetails.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { TradeType } from '@pancakeswap-libs/sdk';\nimport { Card, CardBody, Text } from '@blzd-dev/uikit';\nimport useI18n from 'hooks/useI18n';\nimport { Field } from '../../state/swap/actions';\nimport { useUserSlippageTolerance } from '../../state/user/hooks';\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown } from '../../utils/prices';\nimport { AutoColumn } from '../Column';\nimport QuestionHelper from '../QuestionHelper';\nimport { RowBetween, RowFixed } from '../Row';\nimport FormattedPriceImpact from './FormattedPriceImpact';\nimport { SectionBreak } from './styleds';\nimport SwapRoute from './SwapRoute';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TradeSummary({\n  trade,\n  allowedSlippage\n}) {\n  _s();\n\n  var _ref, _slippageAdjustedAmou, _ref2, _slippageAdjustedAmou2;\n\n  const {\n    priceImpactWithoutFee,\n    realizedLPFee\n  } = computeTradePriceBreakdown(trade);\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT;\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage);\n  const TranslateString = useI18n();\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            children: isExactIn ? TranslateString(1210, 'Minimum received') : TranslateString(220, 'Maximum sold')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n            text: TranslateString(202, 'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RowFixed, {\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            children: isExactIn ? (_ref = `${(_slippageAdjustedAmou = slippageAdjustedAmounts[Field.OUTPUT]) === null || _slippageAdjustedAmou === void 0 ? void 0 : _slippageAdjustedAmou.toSignificant(4)} ${trade.outputAmount.currency.symbol}`) !== null && _ref !== void 0 ? _ref : '-' : (_ref2 = `${(_slippageAdjustedAmou2 = slippageAdjustedAmounts[Field.INPUT]) === null || _slippageAdjustedAmou2 === void 0 ? void 0 : _slippageAdjustedAmou2.toSignificant(4)} ${trade.inputAmount.currency.symbol}`) !== null && _ref2 !== void 0 ? _ref2 : '-'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            children: TranslateString(226, 'Price Impact')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n            text: TranslateString(224, 'The difference between the market price and estimated price due to trade size.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormattedPriceImpact, {\n          priceImpact: priceImpactWithoutFee\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            children: TranslateString(228, 'Liquidity Provider Fee')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n            text: TranslateString(230, 'For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the PancakeSwap treasury.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: realizedLPFee ? `${realizedLPFee.toSignificant(4)} ${trade.inputAmount.currency.symbol}` : '-'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TradeSummary, \"SC/Zc+rnUQSfBje7TuuyRy0lI/g=\", false, function () {\n  return [useI18n];\n});\n\n_c = TradeSummary;\nexport function AdvancedSwapDetails({\n  trade\n}) {\n  _s2();\n\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const TranslateString = useI18n();\n  const showRoute = Boolean(trade && trade.route.path.length > 2);\n  return /*#__PURE__*/_jsxDEV(AutoColumn, {\n    gap: \"md\",\n    children: trade && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TradeSummary, {\n        trade: trade,\n        allowedSlippage: allowedSlippage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), showRoute && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(SectionBreak, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n          style: {\n            padding: '0 24px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"14px\",\n              children: \"Route\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n              text: TranslateString(999, 'Routing through these tokens resulted in the best price for your trade.')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(SwapRoute, {\n            trade: trade\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(AdvancedSwapDetails, \"H53bllHHMzuvpC3Q/VxHa55VCa0=\", false, function () {\n  return [useUserSlippageTolerance, useI18n];\n});\n\n_c2 = AdvancedSwapDetails;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TradeSummary\");\n$RefreshReg$(_c2, \"AdvancedSwapDetails\");","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/components/swap/AdvancedSwapDetails.tsx"],"names":["React","TradeType","Card","CardBody","Text","useI18n","Field","useUserSlippageTolerance","computeSlippageAdjustedAmounts","computeTradePriceBreakdown","AutoColumn","QuestionHelper","RowBetween","RowFixed","FormattedPriceImpact","SectionBreak","SwapRoute","TradeSummary","trade","allowedSlippage","priceImpactWithoutFee","realizedLPFee","isExactIn","tradeType","EXACT_INPUT","slippageAdjustedAmounts","TranslateString","OUTPUT","toSignificant","outputAmount","currency","symbol","INPUT","inputAmount","AdvancedSwapDetails","showRoute","Boolean","route","path","length","padding"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Trade, TradeType } from '@pancakeswap-libs/sdk'\nimport { Card, CardBody, Text } from '@blzd-dev/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Field } from '../../state/swap/actions'\nimport { useUserSlippageTolerance } from '../../state/user/hooks'\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown } from '../../utils/prices'\nimport { AutoColumn } from '../Column'\nimport QuestionHelper from '../QuestionHelper'\nimport { RowBetween, RowFixed } from '../Row'\nimport FormattedPriceImpact from './FormattedPriceImpact'\nimport { SectionBreak } from './styleds'\nimport SwapRoute from './SwapRoute'\n\nfunction TradeSummary({ trade, allowedSlippage }: { trade: Trade; allowedSlippage: number }) {\n  const { priceImpactWithoutFee, realizedLPFee } = computeTradePriceBreakdown(trade)\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage)\n  const TranslateString = useI18n()\n\n  return (\n    <Card>\n      <CardBody>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {isExactIn ? TranslateString(1210, 'Minimum received') : TranslateString(220, 'Maximum sold')}\n            </Text>\n            <QuestionHelper\n              text={TranslateString(\n                202,\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.'\n              )}\n            />\n          </RowFixed>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {isExactIn\n                ? `${slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4)} ${trade.outputAmount.currency.symbol}` ??\n                  '-'\n                : `${slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4)} ${trade.inputAmount.currency.symbol}` ??\n                  '-'}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{TranslateString(226, 'Price Impact')}</Text>\n            <QuestionHelper\n              text={TranslateString(\n                224,\n                'The difference between the market price and estimated price due to trade size.'\n              )}\n            />\n          </RowFixed>\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n        </RowBetween>\n\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{TranslateString(228, 'Liquidity Provider Fee')}</Text>\n            <QuestionHelper\n              text={TranslateString(\n                230,\n                'For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the PancakeSwap treasury.'\n              )}\n            />\n          </RowFixed>\n          <Text fontSize=\"14px\">\n            {realizedLPFee ? `${realizedLPFee.toSignificant(4)} ${trade.inputAmount.currency.symbol}` : '-'}\n          </Text>\n        </RowBetween>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport interface AdvancedSwapDetailsProps {\n  trade?: Trade\n}\n\nexport function AdvancedSwapDetails({ trade }: AdvancedSwapDetailsProps) {\n  const [allowedSlippage] = useUserSlippageTolerance()\n  const TranslateString = useI18n()\n  const showRoute = Boolean(trade && trade.route.path.length > 2)\n\n  return (\n    <AutoColumn gap=\"md\">\n      {trade && (\n        <>\n          <TradeSummary trade={trade} allowedSlippage={allowedSlippage} />\n          {showRoute && (\n            <>\n              <SectionBreak />\n              <AutoColumn style={{ padding: '0 24px' }}>\n                <RowFixed>\n                  <Text fontSize=\"14px\">Route</Text>\n                  <QuestionHelper\n                    text={TranslateString(\n                      999,\n                      'Routing through these tokens resulted in the best price for your trade.'\n                    )}\n                  />\n                </RowFixed>\n                <SwapRoute trade={trade} />\n              </AutoColumn>\n            </>\n          )}\n        </>\n      )}\n    </AutoColumn>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}