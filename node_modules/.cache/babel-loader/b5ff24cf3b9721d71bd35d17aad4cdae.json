{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { JSBI, Percent, Router, TradeType } from '@pancakeswap-libs/sdk';\nimport { useMemo } from 'react';\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport { useActiveWeb3React } from './index';\nimport useENS from './useENS';\nvar SwapCallbackState;\n\n(function (SwapCallbackState) {\n  SwapCallbackState[SwapCallbackState[\"INVALID\"] = 0] = \"INVALID\";\n  SwapCallbackState[SwapCallbackState[\"LOADING\"] = 1] = \"LOADING\";\n  SwapCallbackState[SwapCallbackState[\"VALID\"] = 2] = \"VALID\";\n})(SwapCallbackState || (SwapCallbackState = {}));\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param deadline the deadline for the trade\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(trade, // trade to execute, required\nallowedSlippage = INITIAL_ALLOWED_SLIPPAGE, // in bips\ndeadline = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\nrecipientAddressOrName) {\n  _s();\n\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId) return [];\n    const contract = getRouterContract(chainId, library, account);\n\n    if (!contract) {\n      return [];\n    }\n\n    const swapMethods = [];\n    swapMethods.push( // @ts-ignore\n    Router.swapCallParameters(trade, {\n      feeOnTransfer: false,\n      allowedSlippage: new Percent(JSBI.BigInt(Math.floor(allowedSlippage)), BIPS_BASE),\n      recipient,\n      ttl: deadline\n    }));\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      swapMethods.push( // @ts-ignore\n      Router.swapCallParameters(trade, {\n        feeOnTransfer: true,\n        allowedSlippage: new Percent(JSBI.BigInt(Math.floor(allowedSlippage)), BIPS_BASE),\n        recipient,\n        ttl: deadline\n      }));\n    }\n\n    return swapMethods.map(parameters => ({\n      parameters,\n      contract\n    }));\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade]);\n} // returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\n\n\n_s(useSwapCallArguments, \"/vPK1Zgax8/DIHr5jZbv3FWm97w=\", false, function () {\n  return [useActiveWeb3React, useENS];\n});\n\nexport function useSwapCallback(trade, // trade to execute, required\nallowedSlippage = INITIAL_ALLOWED_SLIPPAGE, // in bips\ndeadline = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\nrecipientAddressOrName) {\n  _s2();\n\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName);\n  const addTransaction = useTransactionAdder();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies'\n      };\n    }\n\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: SwapCallbackState.INVALID,\n          callback: null,\n          error: 'Invalid recipient'\n        };\n      }\n\n      return {\n        state: SwapCallbackState.LOADING,\n        callback: null,\n        error: null\n      };\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap() {\n        const estimatedCalls = await Promise.all(swapCalls.map(call => {\n          const {\n            parameters: {\n              methodName,\n              args,\n              value\n            },\n            contract\n          } = call;\n          const options = !value || isZero(value) ? {} : {\n            value\n          };\n          return contract.estimateGas[methodName](...args, options).then(gasEstimate => {\n            return {\n              call,\n              gasEstimate\n            };\n          }).catch(gasError => {\n            console.info('Gas estimate failed, trying eth_call to extract error', call);\n            return contract.callStatic[methodName](...args, options).then(result => {\n              console.info('Unexpected successful call after failed estimate gas', call, gasError, result);\n              return {\n                call,\n                error: new Error('Unexpected issue with estimating the gas. Please try again.')\n              };\n            }).catch(callError => {\n              console.info('Call threw error', call, callError);\n              let errorMessage;\n\n              switch (callError.reason) {\n                case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                  errorMessage = 'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';\n                  break;\n\n                default:\n                  errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`;\n              }\n\n              return {\n                call,\n                error: new Error(errorMessage)\n              };\n            });\n          });\n        })); // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n\n        const successfulEstimation = estimatedCalls.find((el, ix, list) => 'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]));\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter(call => 'error' in call);\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error;\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error');\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: {\n              methodName,\n              args,\n              value\n            }\n          },\n          gasEstimate\n        } = successfulEstimation;\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? {\n            value,\n            from: account\n          } : {\n            from: account\n          })\n        }).then(response => {\n          const inputSymbol = trade.inputAmount.currency.symbol;\n          const outputSymbol = trade.outputAmount.currency.symbol;\n          const inputAmount = trade.inputAmount.toSignificant(3);\n          const outputAmount = trade.outputAmount.toSignificant(3);\n          const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`;\n          const withRecipient = recipient === account ? base : `${base} to ${recipientAddressOrName && isAddress(recipientAddressOrName) ? shortenAddress(recipientAddressOrName) : recipientAddressOrName}`;\n          addTransaction(response, {\n            summary: withRecipient\n          });\n          return response.hash;\n        }).catch(error => {\n          // if the user rejected the tx, pass this along\n          if ((error === null || error === void 0 ? void 0 : error.code) === 4001) {\n            throw new Error('Transaction rejected.');\n          } else {\n            // otherwise, the error was unexpected and we need to convey that\n            console.error(`Swap failed`, error, methodName, args, value);\n            throw new Error(`Swap failed: ${error.message}`);\n          }\n        });\n      },\n      error: null\n    };\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction]);\n}\n\n_s2(useSwapCallback, \"G8+T55P1ph4OGYQvDIdQ9DZmL+I=\", false, function () {\n  return [useActiveWeb3React, useSwapCallArguments, useTransactionAdder, useENS];\n});\n\nexport default useSwapCallback;","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/src/hooks/useSwapCallback.ts"],"names":["JSBI","Percent","Router","TradeType","useMemo","BIPS_BASE","DEFAULT_DEADLINE_FROM_NOW","INITIAL_ALLOWED_SLIPPAGE","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","shortenAddress","isZero","useActiveWeb3React","useENS","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","deadline","recipientAddressOrName","account","chainId","library","address","recipientAddress","recipient","contract","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","Math","floor","ttl","tradeType","EXACT_INPUT","map","parameters","useSwapCallback","swapCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","onSwap","estimatedCalls","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","console","info","callStatic","result","Error","callError","errorMessage","reason","successfulEstimation","find","el","ix","list","length","errorCalls","filter","gasLimit","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","summary","hash","code","message"],"mappings":"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","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from '@pancakeswap-libs/sdk'\nimport { useMemo } from 'react'\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport { useActiveWeb3React } from './index'\nimport useENS from './useENS'\n\n enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\ninterface SuccessfulCall {\n  call: SwapCall\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall {\n  call: SwapCall\n  error: Error\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param deadline the deadline for the trade\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId) return []\n\n    const contract: Contract | null = getRouterContract(chainId, library, account)\n    if (!contract) {\n      return []\n    }\n\n    const swapMethods = []\n\n    swapMethods.push(\n      // @ts-ignore\n      Router.swapCallParameters(trade, {\n        feeOnTransfer: false,\n        allowedSlippage: new Percent(JSBI.BigInt(Math.floor(allowedSlippage)), BIPS_BASE),\n        recipient,\n        ttl: deadline,\n      })\n    )\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      swapMethods.push(\n        // @ts-ignore\n        Router.swapCallParameters(trade, {\n          feeOnTransfer: true,\n          allowedSlippage: new Percent(JSBI.BigInt(Math.floor(allowedSlippage)), BIPS_BASE),\n          recipient,\n          ttl: deadline,\n        })\n      )\n    }\n\n    return swapMethods.map((parameters) => ({ parameters, contract }))\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade])\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName)\n\n  const addTransaction = useTransactionAdder()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      }\n      return { state: SwapCallbackState.LOADING, callback: null, error: null }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          swapCalls.map((call) => {\n            const {\n              parameters: { methodName, args, value },\n              contract,\n            } = call\n            const options = !value || isZero(value) ? {} : { value }\n\n            return contract.estimateGas[methodName](...args, options)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate,\n                }\n              })\n              .catch((gasError) => {\n                console.info('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then((result) => {\n                    console.info('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch((callError) => {\n                    console.info('Call threw error', call, callError)\n                    let errorMessage: string\n                    switch (callError.reason) {\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                        errorMessage =\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\n                        break\n                      default:\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`\n                    }\n                    return { call, error: new Error(errorMessage) }\n                  })\n              })\n          })\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value },\n          },\n          gasEstimate,\n        } = successfulEstimation\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? { value, from: account } : { from: account }),\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            const inputAmount = trade.inputAmount.toSignificant(3)\n            const outputAmount = trade.outputAmount.toSignificant(3)\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? shortenAddress(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`\n\n            addTransaction(response, {\n              summary: withRecipient,\n            })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(`Swap failed: ${error.message}`)\n            }\n          })\n      },\n      error: null,\n    }\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction])\n}\n\nexport default useSwapCallback"]},"metadata":{},"sourceType":"module"}