{"ast":null,"code":"/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\nvar ONE_SECOND_IN_TS = 90000,\n    // 90kHz clock\nsecondsToVideoTs,\n    secondsToAudioTs,\n    videoTsToSeconds,\n    audioTsToSeconds,\n    audioTsToVideoTs,\n    videoTsToAudioTs,\n    metadataTsToSeconds;\n\nsecondsToVideoTs = function (seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function (seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function (timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function (timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function (timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function (timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n/**\n * Adjust ID3 tag or caption timing information by the timeline pts values\n * (if keepOriginalTimestamps is false) and convert to seconds\n */\n\n\nmetadataTsToSeconds = function (timestamp, timelineStartPts, keepOriginalTimestamps) {\n  return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);\n};\n\nmodule.exports = {\n  ONE_SECOND_IN_TS: ONE_SECOND_IN_TS,\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs,\n  metadataTsToSeconds: metadataTsToSeconds\n};","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/node_modules/mux.js/lib/utils/clock.js"],"names":["ONE_SECOND_IN_TS","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","audioTsToVideoTs","videoTsToAudioTs","metadataTsToSeconds","seconds","sampleRate","timestamp","timelineStartPts","keepOriginalTimestamps","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IACEA,gBAAgB,GAAG,KADrB;AAAA,IAC4B;AAC1BC,gBAFF;AAAA,IAGEC,gBAHF;AAAA,IAIEC,gBAJF;AAAA,IAKEC,gBALF;AAAA,IAMEC,gBANF;AAAA,IAOEC,gBAPF;AAAA,IAQEC,mBARF;;AAUAN,gBAAgB,GAAG,UAASO,OAAT,EAAkB;AACnC,SAAOA,OAAO,GAAGR,gBAAjB;AACD,CAFD;;AAIAE,gBAAgB,GAAG,UAASM,OAAT,EAAkBC,UAAlB,EAA8B;AAC/C,SAAOD,OAAO,GAAGC,UAAjB;AACD,CAFD;;AAIAN,gBAAgB,GAAG,UAASO,SAAT,EAAoB;AACrC,SAAOA,SAAS,GAAGV,gBAAnB;AACD,CAFD;;AAIAI,gBAAgB,GAAG,UAASM,SAAT,EAAoBD,UAApB,EAAgC;AACjD,SAAOC,SAAS,GAAGD,UAAnB;AACD,CAFD;;AAIAJ,gBAAgB,GAAG,UAASK,SAAT,EAAoBD,UAApB,EAAgC;AACjD,SAAOR,gBAAgB,CAACG,gBAAgB,CAACM,SAAD,EAAYD,UAAZ,CAAjB,CAAvB;AACD,CAFD;;AAIAH,gBAAgB,GAAG,UAASI,SAAT,EAAoBD,UAApB,EAAgC;AACjD,SAAOP,gBAAgB,CAACC,gBAAgB,CAACO,SAAD,CAAjB,EAA8BD,UAA9B,CAAvB;AACD,CAFD;AAIA;AACA;AACA;AACA;;;AACAF,mBAAmB,GAAG,UAASG,SAAT,EAAoBC,gBAApB,EAAsCC,sBAAtC,EAA8D;AAClF,SAAOT,gBAAgB,CAACS,sBAAsB,GAAGF,SAAH,GAAeA,SAAS,GAAGC,gBAAlD,CAAvB;AACD,CAFD;;AAIAE,MAAM,CAACC,OAAP,GAAiB;AACfd,EAAAA,gBAAgB,EAAEA,gBADH;AAEfC,EAAAA,gBAAgB,EAAEA,gBAFH;AAGfC,EAAAA,gBAAgB,EAAEA,gBAHH;AAIfC,EAAAA,gBAAgB,EAAEA,gBAJH;AAKfC,EAAAA,gBAAgB,EAAEA,gBALH;AAMfC,EAAAA,gBAAgB,EAAEA,gBANH;AAOfC,EAAAA,gBAAgB,EAAEA,gBAPH;AAQfC,EAAAA,mBAAmB,EAAEA;AARN,CAAjB","sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\nvar\n  ONE_SECOND_IN_TS = 90000, // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs,\n  metadataTsToSeconds;\n\nsecondsToVideoTs = function(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\n/**\n * Adjust ID3 tag or caption timing information by the timeline pts values\n * (if keepOriginalTimestamps is false) and convert to seconds\n */\nmetadataTsToSeconds = function(timestamp, timelineStartPts, keepOriginalTimestamps) {\n  return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);\n};\n\nmodule.exports = {\n  ONE_SECOND_IN_TS: ONE_SECOND_IN_TS,\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs,\n  metadataTsToSeconds: metadataTsToSeconds\n};\n"]},"metadata":{},"sourceType":"script"}