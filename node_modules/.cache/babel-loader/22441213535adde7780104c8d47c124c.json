{"ast":null,"code":"var _jsxFileName = \"/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/components/Web3ReactManager/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { network } from '../../connectors';\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\nimport { NetworkContextName } from '../../constants';\nimport Loader from '../Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageWrapper = styled.div`\n  display: flex;\n  visibility: hidden;\n\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`;\n_c = MessageWrapper;\nconst Message = styled.h2`\n  color: ${({\n  theme\n}) => theme.colors.primaryDark};\n`;\n_c2 = Message;\nexport default function Web3ReactManager({\n  children\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    active\n  } = useWeb3React();\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React(NetworkContextName); // try to eagerly connect to an injected provider, if it exists and has granted access already\n\n  const triedEager = useEagerConnect(); // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]); // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n\n  useInactiveListener(!triedEager); // handle delayed loader state\n\n  const [showLoader, setShowLoader] = useState(false);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true);\n    }, 600);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []); // on page load, do nothing until we've tried to connect to the injected connector\n\n  if (!triedEager) {\n    return null;\n  } // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n\n\n  if (!active && networkError) {\n    return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Message, {\n        children: t('unknownError')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  } // if neither context is active, spin\n\n\n  if (!active && !networkActive) {\n    return showLoader ? /*#__PURE__*/_jsxDEV(MessageWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this) : null;\n  }\n\n  return children;\n}\n\n_s(Web3ReactManager, \"/OB5GxP5m4bdOx6OKHtbWLXcry0=\", false, function () {\n  return [useTranslation, useWeb3React, useWeb3React, useEagerConnect, useInactiveListener];\n});\n\n_c3 = Web3ReactManager;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MessageWrapper\");\n$RefreshReg$(_c2, \"Message\");\n$RefreshReg$(_c3, \"Web3ReactManager\");","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/components/Web3ReactManager/index.tsx"],"names":["React","useState","useEffect","useWeb3React","styled","useTranslation","network","useEagerConnect","useInactiveListener","NetworkContextName","Loader","MessageWrapper","div","Message","h2","theme","colors","primaryDark","Web3ReactManager","children","t","active","networkActive","error","networkError","activate","activateNetwork","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,aAArD;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,cAAc,GAAGP,MAAM,CAACQ,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;KAAMD,c;AASN,MAAME,OAAO,GAAGT,MAAM,CAACU,EAAG;AAC1B,WAAW,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAN,CAAaC,WAAY;AACnD,CAFA;MAAMJ,O;AAIN,eAAe,SAASK,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAmE;AAAA;;AAChF,QAAM;AAAEC,IAAAA;AAAF,MAAQf,cAAc,EAA5B;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAalB,YAAY,EAA/B;AACA,QAAM;AAAEkB,IAAAA,MAAM,EAAEC,aAAV;AAAyBC,IAAAA,KAAK,EAAEC,YAAhC;AAA8CC,IAAAA,QAAQ,EAAEC;AAAxD,MAA4EvB,YAAY,CAACM,kBAAD,CAA9F,CAHgF,CAKhF;;AACA,QAAMkB,UAAU,GAAGpB,eAAe,EAAlC,CANgF,CAQhF;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,UAAU,IAAI,CAACL,aAAf,IAAgC,CAACE,YAAjC,IAAiD,CAACH,MAAtD,EAA8D;AAC5DK,MAAAA,eAAe,CAACpB,OAAD,CAAf;AACD;AACF,GAJQ,EAIN,CAACqB,UAAD,EAAaL,aAAb,EAA4BE,YAA5B,EAA0CE,eAA1C,EAA2DL,MAA3D,CAJM,CAAT,CATgF,CAehF;;AACAb,EAAAA,mBAAmB,CAAC,CAACmB,UAAF,CAAnB,CAhBgF,CAkBhF;;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,CAAC,KAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM4B,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAFyB,EAEvB,GAFuB,CAA1B;AAIA,WAAO,MAAM;AACXG,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GARQ,EAQN,EARM,CAAT,CApBgF,CA8BhF;;AACA,MAAI,CAACH,UAAL,EAAiB;AACf,WAAO,IAAP;AACD,GAjC+E,CAmChF;;;AACA,MAAI,CAACN,MAAD,IAAWG,YAAf,EAA6B;AAC3B,wBACE,QAAC,cAAD;AAAA,6BACE,QAAC,OAAD;AAAA,kBAAUJ,CAAC,CAAC,cAAD;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GA1C+E,CA4ChF;;;AACA,MAAI,CAACC,MAAD,IAAW,CAACC,aAAhB,EAA+B;AAC7B,WAAOM,UAAU,gBACf,QAAC,cAAD;AAAA,6BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADe,GAIb,IAJJ;AAKD;;AAED,SAAOT,QAAP;AACD;;GAtDuBD,gB;UACRb,c,EACKF,Y,EAC+DA,Y,EAG/DI,e,EAUnBC,mB;;;MAhBsBU,gB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useTranslation } from 'react-i18next'\n\nimport { network } from '../../connectors'\nimport { useEagerConnect, useInactiveListener } from '../../hooks'\nimport { NetworkContextName } from '../../constants'\nimport Loader from '../Loader'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  visibility: hidden;\n\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.colors.primaryDark};\n`\n\nexport default function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        <Loader />\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n"]},"metadata":{},"sourceType":"module"}