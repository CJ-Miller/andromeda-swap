{"ast":null,"code":"'use strict';\n\nconst textDecoder = new TextDecoder();\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\n\nconst decodeText = bytes => textDecoder.decode(bytes);\n\nconst textEncoder = new TextEncoder();\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\n\nconst encodeText = text => textEncoder.encode(text);\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\n\n\nfunction concat(arrs, length) {\n  const output = new Uint8Array(length);\n  let offset = 0;\n\n  for (const arr of arrs) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n\n  return output;\n}\n\nmodule.exports = {\n  decodeText,\n  encodeText,\n  concat\n};","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/node_modules/multibase/src/util.js"],"names":["textDecoder","TextDecoder","decodeText","bytes","decode","textEncoder","TextEncoder","encodeText","text","encode","concat","arrs","length","output","Uint8Array","offset","arr","set","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG,IAAIC,WAAJ,EAApB;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAWH,WAAW,CAACI,MAAZ,CAAmBD,KAAnB,CAA9B;;AAEA,MAAME,WAAW,GAAG,IAAIC,WAAJ,EAApB;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAIC,IAAD,IAAUH,WAAW,CAACI,MAAZ,CAAmBD,IAAnB,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,MAAT,CAAiBC,IAAjB,EAAuBC,MAAvB,EAA+B;AAC7B,QAAMC,MAAM,GAAG,IAAIC,UAAJ,CAAeF,MAAf,CAAf;AACA,MAAIG,MAAM,GAAG,CAAb;;AAEA,OAAK,MAAMC,GAAX,IAAkBL,IAAlB,EAAwB;AACtBE,IAAAA,MAAM,CAACI,GAAP,CAAWD,GAAX,EAAgBD,MAAhB;AACAA,IAAAA,MAAM,IAAIC,GAAG,CAACJ,MAAd;AACD;;AAED,SAAOC,MAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AAAEjB,EAAAA,UAAF;AAAcK,EAAAA,UAAd;AAA0BG,EAAAA;AAA1B,CAAjB","sourcesContent":["'use strict'\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrs, length) {\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrs) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = { decodeText, encodeText, concat }\n"]},"metadata":{},"sourceType":"script"}