{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$();\n\nimport { useCallback, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addPopup, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions';\nexport function useBlockNumber() {\n  _s();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  return useSelector(state => state.application.blockNumber[chainId !== null && chainId !== void 0 ? chainId : -1]);\n}\n\n_s(useBlockNumber, \"C46/RZghgMHdh86Y84FTODgyC5k=\", false, function () {\n  return [useActiveWeb3React, useSelector];\n});\n\nexport function useWalletModalOpen() {\n  _s2();\n\n  return useSelector(state => state.application.walletModalOpen);\n}\n\n_s2(useWalletModalOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useWalletModalToggle() {\n  _s3();\n\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\n\n_s3(useWalletModalToggle, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function useSettingsMenuOpen() {\n  _s4();\n\n  return useSelector(state => state.application.settingsMenuOpen);\n}\n\n_s4(useSettingsMenuOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useToggleSettingsMenu() {\n  _s5();\n\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n} // returns a function that allows adding a popup\n\n_s5(useToggleSettingsMenu, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function useAddPopup() {\n  _s6();\n\n  const dispatch = useDispatch();\n  return useCallback((content, key) => {\n    dispatch(addPopup({\n      content,\n      key\n    }));\n  }, [dispatch]);\n} // returns a function that allows removing a popup via its key\n\n_s6(useAddPopup, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function useRemovePopup() {\n  _s7();\n\n  const dispatch = useDispatch();\n  return useCallback(key => {\n    dispatch(removePopup({\n      key\n    }));\n  }, [dispatch]);\n} // get the list of active popups\n\n_s7(useRemovePopup, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function useActivePopups() {\n  _s8();\n\n  const list = useSelector(state => state.application.popupList);\n  return useMemo(() => list.filter(item => item.show), [list]);\n}\n\n_s8(useActivePopups, \"t/LYxj5WXTmW6qHs0wQNFgTwv5Q=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/state/application/hooks.ts"],"names":["useCallback","useMemo","useSelector","useDispatch","useActiveWeb3React","addPopup","removePopup","toggleWalletModal","toggleSettingsMenu","useBlockNumber","chainId","state","application","blockNumber","useWalletModalOpen","walletModalOpen","useWalletModalToggle","dispatch","useSettingsMenuOpen","settingsMenuOpen","useToggleSettingsMenu","useAddPopup","content","key","useRemovePopup","useActivePopups","list","popupList","filter","item","show"],"mappings":";;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,QAAT,EAAiCC,WAAjC,EAA8CC,iBAA9C,EAAiEC,kBAAjE,QAA2F,WAA3F;AAGA,OAAO,SAASC,cAAT,GAA8C;AAAA;;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAcN,kBAAkB,EAAtC;AAEA,SAAOF,WAAW,CAAES,KAAD,IAAqBA,KAAK,CAACC,WAAN,CAAkBC,WAAlB,CAA8BH,OAA9B,aAA8BA,OAA9B,cAA8BA,OAA9B,GAAyC,CAAC,CAA1C,CAAtB,CAAlB;AACD;;GAJeD,c;UACML,kB,EAEbF,W;;;AAGT,OAAO,SAASY,kBAAT,GAAuC;AAAA;;AAC5C,SAAOZ,WAAW,CAAES,KAAD,IAAqBA,KAAK,CAACC,WAAN,CAAkBG,eAAxC,CAAlB;AACD;;IAFeD,kB;UACPZ,W;;;AAGT,OAAO,SAASc,oBAAT,GAA4C;AAAA;;AACjD,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AACA,SAAOH,WAAW,CAAC,MAAMiB,QAAQ,CAACV,iBAAiB,EAAlB,CAAf,EAAsC,CAACU,QAAD,CAAtC,CAAlB;AACD;;IAHeD,oB;UACGb,W;;;AAInB,OAAO,SAASe,mBAAT,GAAwC;AAAA;;AAC7C,SAAOhB,WAAW,CAAES,KAAD,IAAqBA,KAAK,CAACC,WAAN,CAAkBO,gBAAxC,CAAlB;AACD;;IAFeD,mB;UACPhB,W;;;AAGT,OAAO,SAASkB,qBAAT,GAA6C;AAAA;;AAClD,QAAMH,QAAQ,GAAGd,WAAW,EAA5B;AACA,SAAOH,WAAW,CAAC,MAAMiB,QAAQ,CAACT,kBAAkB,EAAnB,CAAf,EAAuC,CAACS,QAAD,CAAvC,CAAlB;AACD,C,CAED;;IALgBG,qB;UACGjB,W;;;AAKnB,OAAO,SAASkB,WAAT,GAAsE;AAAA;;AAC3E,QAAMJ,QAAQ,GAAGd,WAAW,EAA5B;AAEA,SAAOH,WAAW,CAChB,CAACsB,OAAD,EAAwBC,GAAxB,KAAyC;AACvCN,IAAAA,QAAQ,CAACZ,QAAQ,CAAC;AAAEiB,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAD,CAAT,CAAR;AACD,GAHe,EAIhB,CAACN,QAAD,CAJgB,CAAlB;AAMD,C,CAED;;IAXgBI,W;UACGlB,W;;;AAWnB,OAAO,SAASqB,cAAT,GAAiD;AAAA;;AACtD,QAAMP,QAAQ,GAAGd,WAAW,EAA5B;AACA,SAAOH,WAAW,CACfuB,GAAD,IAAiB;AACfN,IAAAA,QAAQ,CAACX,WAAW,CAAC;AAAEiB,MAAAA;AAAF,KAAD,CAAZ,CAAR;AACD,GAHe,EAIhB,CAACN,QAAD,CAJgB,CAAlB;AAMD,C,CAED;;IAVgBO,c;UACGrB,W;;;AAUnB,OAAO,SAASsB,eAAT,GAAiE;AAAA;;AACtE,QAAMC,IAAI,GAAGxB,WAAW,CAAES,KAAD,IAAqBA,KAAK,CAACC,WAAN,CAAkBe,SAAxC,CAAxB;AACA,SAAO1B,OAAO,CAAC,MAAMyB,IAAI,CAACE,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,IAAzB,CAAP,EAAuC,CAACJ,IAAD,CAAvC,CAAd;AACD;;IAHeD,e;UACDvB,W","sourcesContent":["import { useCallback, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions'\nimport { AppState } from '../index'\n\nexport function useBlockNumber(): number | undefined {\n  const { chainId } = useActiveWeb3React()\n\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1])\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen)\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch()\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch])\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen)\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch()\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch])\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch()\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({ content, key }))\n    },\n    [dispatch]\n  )\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch()\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }))\n    },\n    [dispatch]\n  )\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList)\n  return useMemo(() => list.filter(item => item.show), [list])\n}\n"]},"metadata":{},"sourceType":"module"}