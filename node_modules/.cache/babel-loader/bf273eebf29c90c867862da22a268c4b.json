{"ast":null,"code":"'use strict';\n\nconst {\n  encoding: getCodec\n} = require('multibase');\n\nconst utf8Encoder = new TextEncoder();\n/**\n * @typedef {import('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings\n */\n\n/**\n * Interprets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {string} string - The string to turn into an array\n */\n\nfunction asciiStringToUint8Array(string) {\n  const array = new Uint8Array(string.length);\n\n  for (let i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i);\n  }\n\n  return array;\n}\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\n\n\nfunction fromString(string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string);\n  }\n\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string);\n  }\n\n  return getCodec(encoding).decode(string);\n}\n\nmodule.exports = fromString;","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/node_modules/uint8arrays/from-string.js"],"names":["encoding","getCodec","require","utf8Encoder","TextEncoder","asciiStringToUint8Array","string","array","Uint8Array","length","i","charCodeAt","fromString","encode","decode","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,QAAQ,EAAEC;AAAZ,IAAyBC,OAAO,CAAC,WAAD,CAAtC;;AACA,MAAMC,WAAW,GAAG,IAAIC,WAAJ,EAApB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,uBAAT,CAAkCC,MAAlC,EAA0C;AACxC,QAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeF,MAAM,CAACG,MAAtB,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACG,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtCH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAWJ,MAAM,CAACK,UAAP,CAAkBD,CAAlB,CAAX;AACD;;AAED,SAAOH,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,UAAT,CAAqBN,MAArB,EAA6BN,QAAQ,GAAG,MAAxC,EAAgD;AAC9C,MAAIA,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAAxC,EAAiD;AAC/C,WAAOG,WAAW,CAACU,MAAZ,CAAmBP,MAAnB,CAAP;AACD;;AAED,MAAIN,QAAQ,KAAK,OAAjB,EAA0B;AACxB,WAAOK,uBAAuB,CAACC,MAAD,CAA9B;AACD;;AAED,SAAOL,QAAQ,CAACD,QAAD,CAAR,CAAmBc,MAAnB,CAA0BR,MAA1B,CAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBJ,UAAjB","sourcesContent":["'use strict'\n\nconst { encoding: getCodec } = require('multibase')\nconst utf8Encoder = new TextEncoder()\n\n/**\n * @typedef {import('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings\n */\n\n/**\n * Interprets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {string} string - The string to turn into an array\n */\nfunction asciiStringToUint8Array (string) {\n  const array = new Uint8Array(string.length)\n\n  for (let i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i)\n  }\n\n  return array\n}\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\nfunction fromString (string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string)\n  }\n\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string)\n  }\n\n  return getCodec(encoding).decode(string)\n}\n\nmodule.exports = fromString\n"]},"metadata":{},"sourceType":"script"}