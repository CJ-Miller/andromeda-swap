{"ast":null,"code":"// import React, { Suspense, useEffect, useState } from 'react'\n// import { HashRouter, Route, Switch } from 'react-router-dom'\n// import styled from 'styled-components'\n// import { Credentials, StringTranslations } from '@crowdin/crowdin-api-client'\n// import { LangType, useModal } from '@pancakeswap-libs/uikit'\n// import VersionBar from 'components/VersionBar'\n// import Popups from '../components/Popups'\n// import Web3ReactManager from '../components/Web3ReactManager'\n// import { RedirectDuplicateTokenIds, RedirectOldAddLiquidityPathStructure } from './AddLiquidity/redirects'\n// import { RedirectOldRemoveLiquidityPathStructure } from './RemoveLiquidity/redirects'\n// import AddLiquidity from './AddLiquidity'\n// import Pool from './Pool'\n// import PoolFinder from './PoolFinder'\n// import RemoveLiquidity from './RemoveLiquidity'\n// import Swap from './Swap'\n// import Migration from './Migration'\n// import { RedirectPathToSwapOnly } from './Swap/redirects'\n// import { EN, allLanguages } from '../constants/localisation/languageCodes'\n// import { LanguageContext } from '../hooks/LanguageContext'\n// import { TranslationsContext } from '../hooks/TranslationsContext'\n// import UseV2ExchangeModal from '../components/UseV2ExchangeModal'\n// import Menu from '../components/Menu'\n// import useGetDocumentTitlePrice from '../hooks/useGetDocumentTitlePrice'\n// const AppWrapper = styled.div`\n//   display: flex;\n//   flex-flow: column;\n//   align-items: flex-start;\n//   overflow-x: hidden;\n// `\n// const BodyWrapper = styled.div`\n//   overflow-y: auto;\n//   overflow-x: hidden;\n//   z-index: 1;\n//   margin-bottom: 64px;\n//   ${({ theme }) => theme.mediaQueries.lg} {\n//     margin-bottom: 0;\n//   }\n// `\n// const CACHE_KEY = 'pancakeSwapLanguage'\n// export default function App() {\n//   const [selectedLanguage, setSelectedLanguage] = useState<any>(undefined)\n//   const [translatedLanguage, setTranslatedLanguage] = useState<any>(undefined)\n//   const [translations, setTranslations] = useState<Array<any>>([])\n//   const apiKey = `${process.env.REACT_APP_CROWDIN_APIKEY}`\n//   const projectId = parseInt(`${process.env.REACT_APP_CROWDIN_PROJECTID}`)\n//   const fileId = 6\n//   const credentials: Credentials = {\n//     token: apiKey,\n//   }\n//   const stringTranslationsApi = new StringTranslations(credentials)\n//   const getStoredLang = (storedLangCode: string) => {\n//     return allLanguages.filter((language) => {\n//       return language.code === storedLangCode\n//     })[0]\n//   }\n//   useEffect(() => {\n//     const storedLangCode = localStorage.getItem(CACHE_KEY)\n//     if (storedLangCode) {\n//       const storedLang = getStoredLang(storedLangCode)\n//       setSelectedLanguage(storedLang)\n//     } else {\n//       setSelectedLanguage(EN)\n//     }\n//   }, [])\n//   const fetchTranslationsForSelectedLanguage = async () => {\n//     stringTranslationsApi\n//       .listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n//       .then((translationApiResponse) => {\n//         if (translationApiResponse.data.length < 1) {\n//           setTranslations(['error'])\n//         } else {\n//           setTranslations(translationApiResponse.data)\n//         }\n//       })\n//       .then(() => setTranslatedLanguage(selectedLanguage))\n//       .catch((error) => {\n//         setTranslations(['error'])\n//         console.error(error)\n//       })\n//   }\n//   useEffect(() => {\n//     if (selectedLanguage) {\n//       fetchTranslationsForSelectedLanguage()\n//     }\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [selectedLanguage])\n//   const handleLanguageSelect = (langObject: LangType) => {\n//     setSelectedLanguage(langObject)\n//     localStorage.setItem(CACHE_KEY, langObject.code)\n//   }\n//   useGetDocumentTitlePrice()\n//   return (\n//     <Suspense fallback={null}>\n//       <HashRouter>\n//         <AppWrapper>\n//           <LanguageContext.Provider\n//             value={{\n//               selectedLanguage,\n//               setSelectedLanguage: handleLanguageSelect,\n//               translatedLanguage,\n//               setTranslatedLanguage,\n//             }}\n//           >\n//             <TranslationsContext.Provider value={{ translations, setTranslations }}>\n//               <Menu>\n//                 <BodyWrapper>\n//                   <Popups />\n//                   <Web3ReactManager>\n//                     <Switch>\n//                       <Route exact strict path=\"/swap\" component={Swap} />\n//                       <Route exact strict path=\"/find\" component={PoolFinder} />\n//                       <Route exact strict path=\"/pool\" component={Pool} />\n//                       <Route exact path=\"/add\" component={AddLiquidity} />\n//                       <Route exact path=\"/migrate\" component={Migration} />\n//                       <Route exact strict path=\"/remove/:currencyIdA/:currencyIdB\" component={RemoveLiquidity} />\n//                       {/* Redirection: These old routes are still used in the code base */}\n//                       <Route exact path=\"/add/:currencyIdA\" component={RedirectOldAddLiquidityPathStructure} />\n//                       <Route exact path=\"/add/:currencyIdA/:currencyIdB\" component={RedirectDuplicateTokenIds} />\n//                       <Route exact strict path=\"/remove/:tokens\" component={RedirectOldRemoveLiquidityPathStructure} />\n//                       <Route component={RedirectPathToSwapOnly} />\n//                     </Switch>\n//                   </Web3ReactManager>\n//                 </BodyWrapper>\n//               </Menu>\n//               <VersionBar />\n//             </TranslationsContext.Provider>\n//           </LanguageContext.Provider>\n//         </AppWrapper>\n//       </HashRouter>\n//     </Suspense>\n//   )\n// }","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/pages/App.tsx"],"names":[],"mappingssourcesContent":["// import React, { Suspense, useEffect, useState } from 'react'\n// import { HashRouter, Route, Switch } from 'react-router-dom'\n// import styled from 'styled-components'\n// import { Credentials, StringTranslations } from '@crowdin/crowdin-api-client'\n// import { LangType, useModal } from '@pancakeswap-libs/uikit'\n// import VersionBar from 'components/VersionBar'\n// import Popups from '../components/Popups'\n// import Web3ReactManager from '../components/Web3ReactManager'\n// import { RedirectDuplicateTokenIds, RedirectOldAddLiquidityPathStructure } from './AddLiquidity/redirects'\n// import { RedirectOldRemoveLiquidityPathStructure } from './RemoveLiquidity/redirects'\n// import AddLiquidity from './AddLiquidity'\n// import Pool from './Pool'\n// import PoolFinder from './PoolFinder'\n// import RemoveLiquidity from './RemoveLiquidity'\n// import Swap from './Swap'\n// import Migration from './Migration'\n// import { RedirectPathToSwapOnly } from './Swap/redirects'\n// import { EN, allLanguages } from '../constants/localisation/languageCodes'\n// import { LanguageContext } from '../hooks/LanguageContext'\n// import { TranslationsContext } from '../hooks/TranslationsContext'\n// import UseV2ExchangeModal from '../components/UseV2ExchangeModal'\n\n// import Menu from '../components/Menu'\n// import useGetDocumentTitlePrice from '../hooks/useGetDocumentTitlePrice'\n\n// const AppWrapper = styled.div`\n//   display: flex;\n//   flex-flow: column;\n//   align-items: flex-start;\n//   overflow-x: hidden;\n// `\n\n// const BodyWrapper = styled.div`\n//   overflow-y: auto;\n//   overflow-x: hidden;\n//   z-index: 1;\n//   margin-bottom: 64px;\n//   ${({ theme }) => theme.mediaQueries.lg} {\n//     margin-bottom: 0;\n//   }\n// `\n\n// const CACHE_KEY = 'pancakeSwapLanguage'\n\n// export default function App() {\n//   const [selectedLanguage, setSelectedLanguage] = useState<any>(undefined)\n//   const [translatedLanguage, setTranslatedLanguage] = useState<any>(undefined)\n//   const [translations, setTranslations] = useState<Array<any>>([])\n//   const apiKey = `${process.env.REACT_APP_CROWDIN_APIKEY}`\n//   const projectId = parseInt(`${process.env.REACT_APP_CROWDIN_PROJECTID}`)\n//   const fileId = 6\n//   const credentials: Credentials = {\n//     token: apiKey,\n//   }\n\n//   const stringTranslationsApi = new StringTranslations(credentials)\n\n//   const getStoredLang = (storedLangCode: string) => {\n//     return allLanguages.filter((language) => {\n//       return language.code === storedLangCode\n//     })[0]\n//   }\n\n//   useEffect(() => {\n//     const storedLangCode = localStorage.getItem(CACHE_KEY)\n//     if (storedLangCode) {\n//       const storedLang = getStoredLang(storedLangCode)\n//       setSelectedLanguage(storedLang)\n//     } else {\n//       setSelectedLanguage(EN)\n//     }\n//   }, [])\n\n//   const fetchTranslationsForSelectedLanguage = async () => {\n//     stringTranslationsApi\n//       .listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n//       .then((translationApiResponse) => {\n//         if (translationApiResponse.data.length < 1) {\n//           setTranslations(['error'])\n//         } else {\n//           setTranslations(translationApiResponse.data)\n//         }\n//       })\n//       .then(() => setTranslatedLanguage(selectedLanguage))\n//       .catch((error) => {\n//         setTranslations(['error'])\n//         console.error(error)\n//       })\n//   }\n\n//   useEffect(() => {\n//     if (selectedLanguage) {\n//       fetchTranslationsForSelectedLanguage()\n//     }\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [selectedLanguage])\n\n//   const handleLanguageSelect = (langObject: LangType) => {\n//     setSelectedLanguage(langObject)\n//     localStorage.setItem(CACHE_KEY, langObject.code)\n//   }\n\n//   useGetDocumentTitlePrice()\n\n//   return (\n//     <Suspense fallback={null}>\n//       <HashRouter>\n//         <AppWrapper>\n//           <LanguageContext.Provider\n//             value={{\n//               selectedLanguage,\n//               setSelectedLanguage: handleLanguageSelect,\n//               translatedLanguage,\n//               setTranslatedLanguage,\n//             }}\n//           >\n//             <TranslationsContext.Provider value={{ translations, setTranslations }}>\n//               <Menu>\n//                 <BodyWrapper>\n//                   <Popups />\n//                   <Web3ReactManager>\n//                     <Switch>\n//                       <Route exact strict path=\"/swap\" component={Swap} />\n//                       <Route exact strict path=\"/find\" component={PoolFinder} />\n//                       <Route exact strict path=\"/pool\" component={Pool} />\n//                       <Route exact path=\"/add\" component={AddLiquidity} />\n//                       <Route exact path=\"/migrate\" component={Migration} />\n//                       <Route exact strict path=\"/remove/:currencyIdA/:currencyIdB\" component={RemoveLiquidity} />\n\n//                       {/* Redirection: These old routes are still used in the code base */}\n//                       <Route exact path=\"/add/:currencyIdA\" component={RedirectOldAddLiquidityPathStructure} />\n//                       <Route exact path=\"/add/:currencyIdA/:currencyIdB\" component={RedirectDuplicateTokenIds} />\n//                       <Route exact strict path=\"/remove/:tokens\" component={RedirectOldRemoveLiquidityPathStructure} />\n\n//                       <Route component={RedirectPathToSwapOnly} />\n//                     </Switch>\n//                   </Web3ReactManager>\n//                 </BodyWrapper>\n//               </Menu>\n//               <VersionBar />\n//             </TranslationsContext.Provider>\n//           </LanguageContext.Provider>\n//         </AppWrapper>\n//       </HashRouter>\n//     </Suspense>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}