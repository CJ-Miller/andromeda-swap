{"ast":null,"code":"var _jsxFileName = \"/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/components/swap/SwapModalFooter.tsx\",\n    _s = $RefreshSig$();\n\nimport { TradeType } from '@pancakeswap-libs/sdk';\nimport React, { useMemo, useState } from 'react';\nimport { Text, Button } from '@pancakeswap-libs/uikit';\nimport { Repeat } from 'react-feather';\nimport useI18n from 'hooks/useI18n';\nimport { Field } from '../../state/swap/actions';\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown, formatExecutionPrice, warningSeverity } from '../../utils/prices';\nimport { AutoColumn } from '../Column';\nimport QuestionHelper from '../QuestionHelper';\nimport { AutoRow, RowBetween, RowFixed } from '../Row';\nimport FormattedPriceImpact from './FormattedPriceImpact';\nimport { StyledBalanceMaxMini, SwapCallbackError } from './styleds';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SwapModalFooter({\n  trade,\n  onConfirm,\n  allowedSlippage,\n  swapErrorMessage,\n  disabledConfirm\n}) {\n  _s();\n\n  var _slippageAdjustedAmou, _slippageAdjustedAmou2, _slippageAdjustedAmou3, _slippageAdjustedAmou4;\n\n  const [showInverted, setShowInverted] = useState(false);\n  const slippageAdjustedAmounts = useMemo(() => computeSlippageAdjustedAmounts(trade, allowedSlippage), [allowedSlippage, trade]);\n  const {\n    priceImpactWithoutFee,\n    realizedLPFee\n  } = useMemo(() => computeTradePriceBreakdown(trade), [trade]);\n  const severity = warningSeverity(priceImpactWithoutFee);\n  const TranslateString = useI18n();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"0px\",\n      children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n        align: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: \"Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          style: {\n            justifyContent: 'center',\n            alignItems: 'center',\n            display: 'flex',\n            textAlign: 'right',\n            paddingLeft: '8px',\n            fontWeight: 500\n          },\n          children: [formatExecutionPrice(trade, showInverted), /*#__PURE__*/_jsxDEV(StyledBalanceMaxMini, {\n            onClick: () => setShowInverted(!showInverted),\n            children: /*#__PURE__*/_jsxDEV(Repeat, {\n              size: 14\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            children: trade.tradeType === TradeType.EXACT_INPUT ? TranslateString(1210, 'Minimum received') : TranslateString(220, 'Maximum sold')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n            text: TranslateString(202, 'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RowFixed, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            children: trade.tradeType === TradeType.EXACT_INPUT ? (_slippageAdjustedAmou = (_slippageAdjustedAmou2 = slippageAdjustedAmounts[Field.OUTPUT]) === null || _slippageAdjustedAmou2 === void 0 ? void 0 : _slippageAdjustedAmou2.toSignificant(4)) !== null && _slippageAdjustedAmou !== void 0 ? _slippageAdjustedAmou : '-' : (_slippageAdjustedAmou3 = (_slippageAdjustedAmou4 = slippageAdjustedAmounts[Field.INPUT]) === null || _slippageAdjustedAmou4 === void 0 ? void 0 : _slippageAdjustedAmou4.toSignificant(4)) !== null && _slippageAdjustedAmou3 !== void 0 ? _slippageAdjustedAmou3 : '-'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            marginLeft: \"4px\",\n            children: trade.tradeType === TradeType.EXACT_INPUT ? trade.outputAmount.currency.symbol : trade.inputAmount.currency.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            children: TranslateString(226, 'Price Impact')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n            text: TranslateString(224, 'The difference between the market price and your price due to trade size.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormattedPriceImpact, {\n          priceImpact: priceImpactWithoutFee\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            children: TranslateString(228, 'Liquidity Provider Fee')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n            text: TranslateString(999, 'For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the PancakeSwap treasury.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: realizedLPFee ? `${realizedLPFee === null || realizedLPFee === void 0 ? void 0 : realizedLPFee.toSignificant(6)} ${trade.inputAmount.currency.symbol}` : '-'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AutoRow, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: onConfirm,\n        disabled: disabledConfirm,\n        variant: severity > 2 ? 'danger' : 'primary',\n        mt: \"10px\",\n        id: \"confirm-swap-or-send\",\n        width: \"100%\",\n        children: severity > 2 ? 'Swap Anyway' : 'Confirm Swap'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), swapErrorMessage ? /*#__PURE__*/_jsxDEV(SwapCallbackError, {\n        error: swapErrorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 29\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SwapModalFooter, \"6C/pCpz2VSUo//lGlEc8cA6jWCM=\", false, function () {\n  return [useI18n];\n});\n\n_c = SwapModalFooter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwapModalFooter\");","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/components/swap/SwapModalFooter.tsx"],"names":["TradeType","React","useMemo","useState","Text","Button","Repeat","useI18n","Field","computeSlippageAdjustedAmounts","computeTradePriceBreakdown","formatExecutionPrice","warningSeverity","AutoColumn","QuestionHelper","AutoRow","RowBetween","RowFixed","FormattedPriceImpact","StyledBalanceMaxMini","SwapCallbackError","SwapModalFooter","trade","onConfirm","allowedSlippage","swapErrorMessage","disabledConfirm","showInverted","setShowInverted","slippageAdjustedAmounts","priceImpactWithoutFee","realizedLPFee","severity","TranslateString","justifyContent","alignItems","display","textAlign","paddingLeft","fontWeight","tradeType","EXACT_INPUT","OUTPUT","toSignificant","INPUT","outputAmount","currency","symbol","inputAmount"],"mappings":"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","sourcesContent":["import { Trade, TradeType } from '@pancakeswap-libs/sdk'\nimport React, { useMemo, useState } from 'react'\nimport { Text, Button } from '@pancakeswap-libs/uikit'\nimport { Repeat } from 'react-feather'\n\nimport useI18n from 'hooks/useI18n'\nimport { Field } from '../../state/swap/actions'\nimport {\n  computeSlippageAdjustedAmounts,\n  computeTradePriceBreakdown,\n  formatExecutionPrice,\n  warningSeverity,\n} from '../../utils/prices'\nimport { AutoColumn } from '../Column'\nimport QuestionHelper from '../QuestionHelper'\nimport { AutoRow, RowBetween, RowFixed } from '../Row'\nimport FormattedPriceImpact from './FormattedPriceImpact'\nimport { StyledBalanceMaxMini, SwapCallbackError } from './styleds'\n\nexport default function SwapModalFooter({\n  trade,\n  onConfirm,\n  allowedSlippage,\n  swapErrorMessage,\n  disabledConfirm,\n}: {\n  trade: Trade\n  allowedSlippage: number\n  onConfirm: () => void\n  swapErrorMessage: string | undefined\n  disabledConfirm: boolean\n}) {\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n  const slippageAdjustedAmounts = useMemo(() => computeSlippageAdjustedAmounts(trade, allowedSlippage), [\n    allowedSlippage,\n    trade,\n  ])\n  const { priceImpactWithoutFee, realizedLPFee } = useMemo(() => computeTradePriceBreakdown(trade), [trade])\n  const severity = warningSeverity(priceImpactWithoutFee)\n  const TranslateString = useI18n()\n\n  return (\n    <>\n      <AutoColumn gap=\"0px\">\n        <RowBetween align=\"center\">\n          <Text fontSize=\"14px\">Price</Text>\n          <Text\n            fontSize=\"14px\"\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              display: 'flex',\n              textAlign: 'right',\n              paddingLeft: '8px',\n              fontWeight: 500,\n            }}\n          >\n            {formatExecutionPrice(trade, showInverted)}\n            <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\n              <Repeat size={14} />\n            </StyledBalanceMaxMini>\n          </Text>\n        </RowBetween>\n\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? TranslateString(1210, 'Minimum received')\n                : TranslateString(220, 'Maximum sold')}\n            </Text>\n            <QuestionHelper\n              text={TranslateString(\n                202,\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.'\n              )}\n            />\n          </RowFixed>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? '-'\n                : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? '-'}\n            </Text>\n            <Text fontSize=\"14px\" marginLeft=\"4px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? trade.outputAmount.currency.symbol\n                : trade.inputAmount.currency.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{TranslateString(226, 'Price Impact')}</Text>\n            <QuestionHelper\n              text={TranslateString(224, 'The difference between the market price and your price due to trade size.')}\n            />\n          </RowFixed>\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{TranslateString(228, 'Liquidity Provider Fee')}</Text>\n            <QuestionHelper\n              text={TranslateString(\n                999,\n                'For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the PancakeSwap treasury.'\n              )}\n            />\n          </RowFixed>\n          <Text fontSize=\"14px\">\n            {realizedLPFee ? `${realizedLPFee?.toSignificant(6)} ${trade.inputAmount.currency.symbol}` : '-'}\n          </Text>\n        </RowBetween>\n      </AutoColumn>\n\n      <AutoRow>\n        <Button\n          onClick={onConfirm}\n          disabled={disabledConfirm}\n          variant={severity > 2 ? 'danger' : 'primary'}\n          mt=\"10px\"\n          id=\"confirm-swap-or-send\"\n          width=\"100%\"\n        >\n          {severity > 2 ? 'Swap Anyway' : 'Confirm Swap'}\n        </Button>\n\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </AutoRow>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}