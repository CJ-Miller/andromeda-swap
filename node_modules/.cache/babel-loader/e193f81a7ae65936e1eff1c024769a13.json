{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addTransaction } from './actions';\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder() {\n  _s();\n\n  const {\n    chainId,\n    account\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  return useCallback((response, {\n    summary,\n    approval\n  } = {}) => {\n    if (!account) return;\n    if (!chainId) return;\n    const {\n      hash\n    } = response;\n\n    if (!hash) {\n      throw Error('No transaction hash found.');\n    }\n\n    dispatch(addTransaction({\n      hash,\n      from: account,\n      chainId,\n      approval,\n      summary\n    }));\n  }, [dispatch, chainId, account]);\n} // returns all the transactions for the current chain\n\n_s(useTransactionAdder, \"MEh+TAztv1BWq5c2lTL2SEy/Uq8=\", false, function () {\n  return [useActiveWeb3React, useDispatch];\n});\n\nexport function useAllTransactions() {\n  _s2();\n\n  var _state$chainId;\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const state = useSelector(s => s.transactions);\n  return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n}\n\n_s2(useAllTransactions, \"3FhVoM2yUUuTIyL07ycVqdy9Zqs=\", false, function () {\n  return [useActiveWeb3React, useSelector];\n});\n\nexport function useIsTransactionPending(transactionHash) {\n  _s3();\n\n  const transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) return false;\n  return !transactions[transactionHash].receipt;\n}\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\n\n_s3(useIsTransactionPending, \"hqz1TRfIl9I1+vK9TqtScGR9Kdg=\", false, function () {\n  return [useAllTransactions];\n});\n\nexport function isTransactionRecent(tx) {\n  return new Date().getTime() - tx.addedTime < 86400000;\n} // returns whether a token has a pending approval transaction\n\nexport function useHasPendingApproval(tokenAddress, spender) {\n  _s4();\n\n  const allTransactions = useAllTransactions();\n  return useMemo(() => typeof tokenAddress === 'string' && typeof spender === 'string' && Object.keys(allTransactions).some(hash => {\n    const tx = allTransactions[hash];\n    if (!tx) return false;\n\n    if (tx.receipt) {\n      return false;\n    }\n\n    const {\n      approval\n    } = tx;\n    if (!approval) return false;\n    return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n  }), [allTransactions, spender, tokenAddress]);\n}\n\n_s4(useHasPendingApproval, \"VezVe/KwFqNDaRAkqywKb3KU5lg=\", false, function () {\n  return [useAllTransactions];\n});","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/state/transactions/hooks.tsx"],"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addTransaction","useTransactionAdder","chainId","account","dispatch","response","summary","approval","hash","Error","from","useAllTransactions","state","s","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some"],"mappings":"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","sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { addTransaction } from './actions'\nimport { TransactionDetails } from './reducer'\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string } }\n) => void {\n  const { chainId, account } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      { summary, approval }: { summary?: string; approval?: { tokenAddress: string; spender: string } } = {}\n    ) => {\n      if (!account) return\n      if (!chainId) return\n\n      const { hash } = response\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary }))\n    },\n    [dispatch, chainId, account]\n  )\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveWeb3React()\n\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash]\n        if (!tx) return false\n        if (tx.receipt) {\n          return false\n        }\n        const { approval } = tx\n        if (!approval) return false\n        return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\n      }),\n    [allTransactions, spender, tokenAddress]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}