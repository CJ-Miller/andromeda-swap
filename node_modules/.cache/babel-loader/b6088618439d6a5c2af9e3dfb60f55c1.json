{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport useDebounce from '../../hooks/useDebounce';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { updateBlockNumber } from './actions';\nexport default function Updater() {\n  _s();\n\n  const {\n    library,\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const windowVisible = useIsWindowVisible();\n  const [state, setState] = useState({\n    chainId,\n    blockNumber: null\n  });\n  const blockNumberCallback = useCallback(blockNumber => {\n    setState(s => {\n      if (chainId === s.chainId) {\n        if (typeof s.blockNumber !== 'number') return {\n          chainId,\n          blockNumber\n        };\n        return {\n          chainId,\n          blockNumber: Math.max(blockNumber, s.blockNumber)\n        };\n      }\n\n      return s;\n    });\n  }, [chainId, setState]); // attach/detach listeners\n\n  useEffect(() => {\n    if (!library || !chainId || !windowVisible) return undefined;\n    setState({\n      chainId,\n      blockNumber: null\n    });\n    library.getBlockNumber().then(blockNumberCallback).catch(error => console.error(`Failed to get block number for chainId: ${chainId}`, error));\n    library.on('block', blockNumberCallback);\n    return () => {\n      library.removeListener('block', blockNumberCallback);\n    };\n  }, [dispatch, chainId, library, blockNumberCallback, windowVisible]);\n  const debouncedState = useDebounce(state, 100);\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(updateBlockNumber({\n      chainId: debouncedState.chainId,\n      blockNumber: debouncedState.blockNumber\n    }));\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n  return null;\n}\n\n_s(Updater, \"YodeNKw159DNGvMWLk5W7jeVjRc=\", false, function () {\n  return [useActiveWeb3React, useDispatch, useIsWindowVisible, useDebounce];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/src/state/application/updater.ts"],"names":["useCallback","useEffect","useState","useDispatch","useActiveWeb3React","useDebounce","useIsWindowVisible","updateBlockNumber","Updater","library","chainId","dispatch","windowVisible","state","setState","blockNumber","blockNumberCallback","s","Math","max","undefined","getBlockNumber","then","catch","error","console","on","removeListener","debouncedState"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,SAASC,iBAAT,QAAkC,WAAlC;AAEA,eAAe,SAASC,OAAT,GAAyB;AAAA;;AACtC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBN,kBAAkB,EAA/C;AACA,QAAMO,QAAQ,GAAGR,WAAW,EAA5B;AAEA,QAAMS,aAAa,GAAGN,kBAAkB,EAAxC;AAEA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAA8D;AAC9FQ,IAAAA,OAD8F;AAE9FK,IAAAA,WAAW,EAAE;AAFiF,GAA9D,CAAlC;AAKA,QAAMC,mBAAmB,GAAGhB,WAAW,CACpCe,WAAD,IAAyB;AACvBD,IAAAA,QAAQ,CAAEG,CAAD,IAAO;AACd,UAAIP,OAAO,KAAKO,CAAC,CAACP,OAAlB,EAA2B;AACzB,YAAI,OAAOO,CAAC,CAACF,WAAT,KAAyB,QAA7B,EAAuC,OAAO;AAAEL,UAAAA,OAAF;AAAWK,UAAAA;AAAX,SAAP;AACvC,eAAO;AAAEL,UAAAA,OAAF;AAAWK,UAAAA,WAAW,EAAEG,IAAI,CAACC,GAAL,CAASJ,WAAT,EAAsBE,CAAC,CAACF,WAAxB;AAAxB,SAAP;AACD;;AACD,aAAOE,CAAP;AACD,KANO,CAAR;AAOD,GAToC,EAUrC,CAACP,OAAD,EAAUI,QAAV,CAVqC,CAAvC,CAXsC,CAwBtC;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,OAAD,IAAY,CAACC,OAAb,IAAwB,CAACE,aAA7B,EAA4C,OAAOQ,SAAP;AAE5CN,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,OAAF;AAAWK,MAAAA,WAAW,EAAE;AAAxB,KAAD,CAAR;AAEAN,IAAAA,OAAO,CACJY,cADH,GAEGC,IAFH,CAEQN,mBAFR,EAGGO,KAHH,CAGUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAe,2CAA0Cd,OAAQ,EAAjE,EAAoEc,KAApE,CAHpB;AAKAf,IAAAA,OAAO,CAACiB,EAAR,CAAW,OAAX,EAAoBV,mBAApB;AACA,WAAO,MAAM;AACXP,MAAAA,OAAO,CAACkB,cAAR,CAAuB,OAAvB,EAAgCX,mBAAhC;AACD,KAFD;AAGD,GAdQ,EAcN,CAACL,QAAD,EAAWD,OAAX,EAAoBD,OAApB,EAA6BO,mBAA7B,EAAkDJ,aAAlD,CAdM,CAAT;AAgBA,QAAMgB,cAAc,GAAGvB,WAAW,CAACQ,KAAD,EAAQ,GAAR,CAAlC;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC2B,cAAc,CAAClB,OAAhB,IAA2B,CAACkB,cAAc,CAACb,WAA3C,IAA0D,CAACH,aAA/D,EAA8E;AAC9ED,IAAAA,QAAQ,CAACJ,iBAAiB,CAAC;AAAEG,MAAAA,OAAO,EAAEkB,cAAc,CAAClB,OAA1B;AAAmCK,MAAAA,WAAW,EAAEa,cAAc,CAACb;AAA/D,KAAD,CAAlB,CAAR;AACD,GAHQ,EAGN,CAACH,aAAD,EAAgBD,QAAhB,EAA0BiB,cAAc,CAACb,WAAzC,EAAsDa,cAAc,CAAClB,OAArE,CAHM,CAAT;AAKA,SAAO,IAAP;AACD;;GAjDuBF,O;UACOJ,kB,EACZD,W,EAEKG,kB,EAqCCD,W;;;KAzCDG,O","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport useDebounce from '../../hooks/useDebounce'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { updateBlockNumber } from './actions'\n\nexport default function Updater(): null {\n  const { library, chainId } = useActiveWeb3React()\n  const dispatch = useDispatch()\n\n  const windowVisible = useIsWindowVisible()\n\n  const [state, setState] = useState<{ chainId: number | undefined; blockNumber: number | null }>({\n    chainId,\n    blockNumber: null,\n  })\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((s) => {\n        if (chainId === s.chainId) {\n          if (typeof s.blockNumber !== 'number') return { chainId, blockNumber }\n          return { chainId, blockNumber: Math.max(blockNumber, s.blockNumber) }\n        }\n        return s\n      })\n    },\n    [chainId, setState]\n  )\n\n  // attach/detach listeners\n  useEffect(() => {\n    if (!library || !chainId || !windowVisible) return undefined\n\n    setState({ chainId, blockNumber: null })\n\n    library\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error))\n\n    library.on('block', blockNumberCallback)\n    return () => {\n      library.removeListener('block', blockNumberCallback)\n    }\n  }, [dispatch, chainId, library, blockNumberCallback, windowVisible])\n\n  const debouncedState = useDebounce(state, 100)\n\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return\n    dispatch(updateBlockNumber({ chainId: debouncedState.chainId, blockNumber: debouncedState.blockNumber }))\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}