{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\nimport { NoBscProviderError } from '@binance-chain/bsc-connector';\nimport { NoEthereumProviderError, UserRejectedRequestError as UserRejectedRequestErrorInjected } from '@web3-react/injected-connector';\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect, WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { connectorLocalStorageKey } from '@pancakeswap-libs/uikit';\nimport useToast from 'hooks/useToast';\nimport { connectorsByName } from 'connectors';\n\nconst useAuth = () => {\n  _s();\n\n  const {\n    activate,\n    deactivate\n  } = useWeb3React();\n  const {\n    toastError\n  } = useToast();\n  const login = useCallback(connectorID => {\n    const connector = connectorsByName[connectorID];\n\n    if (connector) {\n      activate(connector, async error => {\n        window.localStorage.removeItem(connectorLocalStorageKey);\n\n        if (error instanceof UnsupportedChainIdError) {\n          toastError('Unsupported Chain Id', 'Unsupported Chain Id Error. Check your chain Id.');\n        } else if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n          toastError('Provider Error', 'No provider was found');\n        } else if (error instanceof UserRejectedRequestErrorInjected || error instanceof UserRejectedRequestErrorWalletConnect) {\n          if (connector instanceof WalletConnectConnector) {\n            const walletConnector = connector;\n            walletConnector.walletConnectProvider = null;\n          }\n\n          toastError('Authorization Error', 'Please authorize to access your account');\n        } else {\n          toastError(error.name, error.message);\n        }\n      });\n    } else {\n      toastError(\"Can't find connector\", 'The connector config is wrong');\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return {\n    login,\n    logout: deactivate\n  };\n};\n\n_s(useAuth, \"HBBM/IiTpYiR3hylFgynPnYq3fw=\", false, function () {\n  return [useWeb3React, useToast];\n});\n\nexport default useAuth;","map":{"version":3,"sources":["/Users/cj/Desktop/andromeda_swap_fork/pancake-swap-interface-v1/src/hooks/useAuth.ts"],"names":["useCallback","useWeb3React","UnsupportedChainIdError","NoBscProviderError","NoEthereumProviderError","UserRejectedRequestError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","WalletConnectConnector","connectorLocalStorageKey","useToast","connectorsByName","useAuth","activate","deactivate","toastError","login","connectorID","connector","error","window","localStorage","removeItem","walletConnector","walletConnectProvider","name","message","logout"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,EAAuBC,uBAAvB,QAAsD,kBAAtD;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SACEC,uBADF,EAEEC,wBAAwB,IAAIC,gCAF9B,QAGO,gCAHP;AAIA,SACED,wBAAwB,IAAIE,qCAD9B,EAEEC,sBAFF,QAGO,qCAHP;AAIA,SAASC,wBAAT,QAAyD,yBAAzD;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,gBAAT,QAAiC,YAAjC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA2Bb,YAAY,EAA7C;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAiBL,QAAQ,EAA/B;AAEA,QAAMM,KAAK,GAAGhB,WAAW,CAAEiB,WAAD,IAAiC;AACzD,UAAMC,SAAS,GAAGP,gBAAgB,CAACM,WAAD,CAAlC;;AACA,QAAIC,SAAJ,EAAe;AACbL,MAAAA,QAAQ,CAACK,SAAD,EAAY,MAAOC,KAAP,IAAwB;AAC1CC,QAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+Bb,wBAA/B;;AACA,YAAIU,KAAK,YAAYjB,uBAArB,EAA8C;AAC5Ca,UAAAA,UAAU,CAAC,sBAAD,EAAyB,kDAAzB,CAAV;AACD,SAFD,MAEO,IAAII,KAAK,YAAYf,uBAAjB,IAA4Ce,KAAK,YAAYhB,kBAAjE,EAAqF;AAC1FY,UAAAA,UAAU,CAAC,gBAAD,EAAmB,uBAAnB,CAAV;AACD,SAFM,MAEA,IACLI,KAAK,YAAYb,gCAAjB,IACAa,KAAK,YAAYZ,qCAFZ,EAGL;AACA,cAAIW,SAAS,YAAYV,sBAAzB,EAAiD;AAC/C,kBAAMe,eAAe,GAAGL,SAAxB;AACAK,YAAAA,eAAe,CAACC,qBAAhB,GAAwC,IAAxC;AACD;;AACDT,UAAAA,UAAU,CAAC,qBAAD,EAAwB,yCAAxB,CAAV;AACD,SATM,MASA;AACLA,UAAAA,UAAU,CAACI,KAAK,CAACM,IAAP,EAAaN,KAAK,CAACO,OAAnB,CAAV;AACD;AACF,OAlBO,CAAR;AAmBD,KApBD,MAoBO;AACLX,MAAAA,UAAU,CAAC,sBAAD,EAAyB,+BAAzB,CAAV;AACD,KAxBwD,CAyBzD;;AACD,GA1BwB,EA0BtB,EA1BsB,CAAzB;AA4BA,SAAO;AAAEC,IAAAA,KAAF;AAASW,IAAAA,MAAM,EAAEb;AAAjB,GAAP;AACD,CAjCD;;GAAMF,O;UAC6BX,Y,EACVS,Q;;;AAiCzB,eAAeE,OAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport { NoBscProviderError } from '@binance-chain/bsc-connector'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport {\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n  WalletConnectConnector,\n} from '@web3-react/walletconnect-connector'\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap-libs/uikit'\nimport useToast from 'hooks/useToast'\nimport { connectorsByName } from 'connectors'\n\nconst useAuth = () => {\n  const { activate, deactivate } = useWeb3React()\n  const { toastError } = useToast()\n\n  const login = useCallback((connectorID: ConnectorNames) => {\n    const connector = connectorsByName[connectorID]\n    if (connector) {\n      activate(connector, async (error: Error) => {\n        window.localStorage.removeItem(connectorLocalStorageKey)\n        if (error instanceof UnsupportedChainIdError) {\n          toastError('Unsupported Chain Id', 'Unsupported Chain Id Error. Check your chain Id.')\n        } else if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n          toastError('Provider Error', 'No provider was found')\n        } else if (\n          error instanceof UserRejectedRequestErrorInjected ||\n          error instanceof UserRejectedRequestErrorWalletConnect\n        ) {\n          if (connector instanceof WalletConnectConnector) {\n            const walletConnector = connector as WalletConnectConnector\n            walletConnector.walletConnectProvider = null\n          }\n          toastError('Authorization Error', 'Please authorize to access your account')\n        } else {\n          toastError(error.name, error.message)\n        }\n      })\n    } else {\n      toastError(\"Can't find connector\", 'The connector config is wrong')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return { login, logout: deactivate }\n}\n\nexport default useAuth\n"]},"metadata":{},"sourceType":"module"}