{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nexport default function useInterval(callback, delay, leading = true) {\n  _s();\n\n  const savedCallback = useRef(); // Remember the latest callback.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      const {\n        current\n      } = savedCallback;\n\n      if (current) {\n        current();\n      }\n    }\n\n    if (delay !== null) {\n      if (leading) tick();\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n\n    return undefined;\n  }, [delay, leading]);\n}\n\n_s(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/src/hooks/useInterval.ts"],"names":["useEffect","useRef","useInterval","callback","delay","leading","savedCallback","current","tick","id","setInterval","clearInterval","undefined"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA,eAAe,SAASC,WAAT,CAAqBC,QAArB,EAA2CC,KAA3C,EAAiEC,OAAO,GAAG,IAA3E,EAAiF;AAAA;;AAC9F,QAAMC,aAAa,GAAGL,MAAM,EAA5B,CAD8F,CAG9F;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,aAAa,CAACC,OAAd,GAAwBJ,QAAxB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAJ8F,CAQ9F;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,aAASQ,IAAT,GAAgB;AACd,YAAM;AAAED,QAAAA;AAAF,UAAcD,aAApB;;AACA,UAAIC,OAAJ,EAAa;AACXA,QAAAA,OAAO;AACR;AACF;;AAED,QAAIH,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAIC,OAAJ,EAAaG,IAAI;AACjB,YAAMC,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOJ,KAAP,CAAtB;AACA,aAAO,MAAMO,aAAa,CAACF,EAAD,CAA1B;AACD;;AACD,WAAOG,SAAP;AACD,GAdQ,EAcN,CAACR,KAAD,EAAQC,OAAR,CAdM,CAAT;AAeD;;GAxBuBH,W","sourcesContent":["import { useEffect, useRef } from 'react'\n\nexport default function useInterval(callback: () => void, delay: null | number, leading = true) {\n  const savedCallback = useRef<() => void>()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      const { current } = savedCallback\n      if (current) {\n        current()\n      }\n    }\n\n    if (delay !== null) {\n      if (leading) tick()\n      const id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n    return undefined\n  }, [delay, leading])\n}\n"]},"metadata":{},"sourceType":"module"}