{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { kebabCase } from 'lodash';\nimport { toastTypes } from '@pancakeswap-libs/uikit';\nimport { useDispatch } from 'react-redux';\nimport { push as pushToast, remove as removeToast, clear as clearToast } from 'state/actions'; // Toasts\n\nconst useToast = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const helpers = useMemo(() => {\n    const push = toast => dispatch(pushToast(toast));\n\n    return {\n      toastError: (title, description) => {\n        return push({\n          id: kebabCase(title),\n          type: toastTypes.DANGER,\n          title,\n          description\n        });\n      },\n      toastInfo: (title, description) => {\n        return push({\n          id: kebabCase(title),\n          type: toastTypes.INFO,\n          title,\n          description\n        });\n      },\n      toastSuccess: (title, description) => {\n        return push({\n          id: kebabCase(title),\n          type: toastTypes.SUCCESS,\n          title,\n          description\n        });\n      },\n      toastWarning: (title, description) => {\n        return push({\n          id: kebabCase(title),\n          type: toastTypes.WARNING,\n          title,\n          description\n        });\n      },\n      push,\n      remove: id => dispatch(removeToast(id)),\n      clear: () => dispatch(clearToast())\n    };\n  }, [dispatch]);\n  return helpers;\n};\n\n_s(useToast, \"sUDVWQm6KuNx8WS5X7Vf7K7gwmw=\", false, function () {\n  return [useDispatch];\n});\n\nexport default useToast;","map":{"version":3,"sources":["/Users/cj/Desktop/swap-attempts/swap2/src/hooks/useToast.ts"],"names":["useMemo","kebabCase","toastTypes","useDispatch","push","pushToast","remove","removeToast","clear","clearToast","useToast","dispatch","helpers","toast","toastError","title","description","id","type","DANGER","toastInfo","INFO","toastSuccess","SUCCESS","toastWarning","WARNING"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAAgBC,UAAhB,QAAkC,yBAAlC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SACEC,IAAI,IAAIC,SADV,EAEEC,MAAM,IAAIC,WAFZ,EAGEC,KAAK,IAAIC,UAHX,QAIO,eAJP,C,CAMA;;AACA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,OAAO,GAAGZ,OAAO,CAAC,MAAM;AAC5B,UAAMI,IAAI,GAAIS,KAAD,IAAkBF,QAAQ,CAACN,SAAS,CAACQ,KAAD,CAAV,CAAvC;;AAEA,WAAO;AACLC,MAAAA,UAAU,EAAE,CAACC,KAAD,EAAgBC,WAAhB,KAAyC;AACnD,eAAOZ,IAAI,CAAC;AAAEa,UAAAA,EAAE,EAAEhB,SAAS,CAACc,KAAD,CAAf;AAAwBG,UAAAA,IAAI,EAAEhB,UAAU,CAACiB,MAAzC;AAAiDJ,UAAAA,KAAjD;AAAwDC,UAAAA;AAAxD,SAAD,CAAX;AACD,OAHI;AAILI,MAAAA,SAAS,EAAE,CAACL,KAAD,EAAgBC,WAAhB,KAAyC;AAClD,eAAOZ,IAAI,CAAC;AAAEa,UAAAA,EAAE,EAAEhB,SAAS,CAACc,KAAD,CAAf;AAAwBG,UAAAA,IAAI,EAAEhB,UAAU,CAACmB,IAAzC;AAA+CN,UAAAA,KAA/C;AAAsDC,UAAAA;AAAtD,SAAD,CAAX;AACD,OANI;AAOLM,MAAAA,YAAY,EAAE,CAACP,KAAD,EAAgBC,WAAhB,KAAyC;AACrD,eAAOZ,IAAI,CAAC;AAAEa,UAAAA,EAAE,EAAEhB,SAAS,CAACc,KAAD,CAAf;AAAwBG,UAAAA,IAAI,EAAEhB,UAAU,CAACqB,OAAzC;AAAkDR,UAAAA,KAAlD;AAAyDC,UAAAA;AAAzD,SAAD,CAAX;AACD,OATI;AAULQ,MAAAA,YAAY,EAAE,CAACT,KAAD,EAAgBC,WAAhB,KAAyC;AACrD,eAAOZ,IAAI,CAAC;AAAEa,UAAAA,EAAE,EAAEhB,SAAS,CAACc,KAAD,CAAf;AAAwBG,UAAAA,IAAI,EAAEhB,UAAU,CAACuB,OAAzC;AAAkDV,UAAAA,KAAlD;AAAyDC,UAAAA;AAAzD,SAAD,CAAX;AACD,OAZI;AAaLZ,MAAAA,IAbK;AAcLE,MAAAA,MAAM,EAAGW,EAAD,IAAgBN,QAAQ,CAACJ,WAAW,CAACU,EAAD,CAAZ,CAd3B;AAeLT,MAAAA,KAAK,EAAE,MAAMG,QAAQ,CAACF,UAAU,EAAX;AAfhB,KAAP;AAiBD,GApBsB,EAoBpB,CAACE,QAAD,CApBoB,CAAvB;AAsBA,SAAOC,OAAP;AACD,CAzBD;;GAAMF,Q;UACaP,W;;;AA0BnB,eAAeO,QAAf","sourcesContent":["import { useMemo } from 'react'\nimport { kebabCase } from 'lodash'\nimport { Toast, toastTypes } from '@pancakeswap-libs/uikit'\nimport { useDispatch } from 'react-redux'\n\nimport {\n  push as pushToast,\n  remove as removeToast,\n  clear as clearToast\n} from 'state/actions'\n\n// Toasts\nconst useToast = () => {\n  const dispatch = useDispatch()\n  const helpers = useMemo(() => {\n    const push = (toast: Toast) => dispatch(pushToast(toast))\n\n    return {\n      toastError: (title: string, description?: string) => {\n        return push({ id: kebabCase(title), type: toastTypes.DANGER, title, description })\n      },\n      toastInfo: (title: string, description?: string) => {\n        return push({ id: kebabCase(title), type: toastTypes.INFO, title, description })\n      },\n      toastSuccess: (title: string, description?: string) => {\n        return push({ id: kebabCase(title), type: toastTypes.SUCCESS, title, description })\n      },\n      toastWarning: (title: string, description?: string) => {\n        return push({ id: kebabCase(title), type: toastTypes.WARNING, title, description })\n      },\n      push,\n      remove: (id: string) => dispatch(removeToast(id)),\n      clear: () => dispatch(clearToast()),\n    }\n  }, [dispatch])\n\n  return helpers\n}\n\nexport default useToast"]},"metadata":{},"sourceType":"module"}